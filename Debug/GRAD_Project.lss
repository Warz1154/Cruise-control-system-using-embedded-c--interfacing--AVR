
GRAD_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00005d54  00005de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  0080016a  0080016a  00005ef2  2**0
                  ALLOC
  3 .stab         000062ac  00000000  00000000  00005ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000032a5  00000000  00000000  0000c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f445  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00014140  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00014300  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000145f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__vector_1>
       8:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__vector_2>
       c:	0c 94 87 14 	jmp	0x290e	; 0x290e <__vector_3>
      10:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__vector_4>
      14:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_13>
      38:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__vector_14>
      3c:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3b       	cpi	r26, 0xBB	; 187
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <main>
      8a:	0c 94 a8 2e 	jmp	0x5d50	; 0x5d50 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 2e 	jmp	0x5d1a	; 0x5d1a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 2e 	jmp	0x5cfa	; 0x5cfa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 2e 	jmp	0x5cfa	; 0x5cfa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 2e 	jmp	0x5d1a	; 0x5d1a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 95 2e 	jmp	0x5d2a	; 0x5d2a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7d 2e 	jmp	0x5cfa	; 0x5cfa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7d 2e 	jmp	0x5cfa	; 0x5cfa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7d 2e 	jmp	0x5cfa	; 0x5cfa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 81 2e 	jmp	0x5d02	; 0x5d02 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 9d 2e 	jmp	0x5d3a	; 0x5d3a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 95 2e 	jmp	0x5d2a	; 0x5d2a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ICU_Init>:
u8_t EXTInt_Chan;
u8_t timerStarted = 0;
u16_t capturedTime = 0;

ICU_ERROR_t ICU_Init(EXTINT_Channel_t Channel)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ICU_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <ICU_Init+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <ICU_Init+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	8d 83       	std	Y+5, r24	; 0x05
	// Errors checking (guards)
	if(Channel != EXT_INT0 && Channel != EXT_INT1 && Channel != EXT_INT2)
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	88 23       	and	r24, r24
     e42:	41 f0       	breq	.+16     	; 0xe54 <ICU_Init+0x26>
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	29 f0       	breq	.+10     	; 0xe54 <ICU_Init+0x26>
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	11 f0       	breq	.+4      	; 0xe54 <ICU_Init+0x26>
		return ICU_E_NOK;
     e50:	1e 82       	std	Y+6, r1	; 0x06
     e52:	1f c0       	rjmp	.+62     	; 0xe92 <ICU_Init+0x64>

	// timer1 configuration structure
	Str_TimerConfiguration_t T_confg;
	T_confg.Interrupt_Mode = TIMER_INTERRUPT_MODE;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	8c 83       	std	Y+4, r24	; 0x04
	T_confg.Timer_Channel = TIMER_CHANNEL;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	89 83       	std	Y+1, r24	; 0x01
	T_confg.Timer_Mode = TIMER_WORK_MODE;
     e5c:	1b 82       	std	Y+3, r1	; 0x03
	T_confg.Timer_Psc = TIMER_PRESCALER;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	8a 83       	std	Y+2, r24	; 0x02

	// init timer1
	Timer_Init(&T_confg);
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	0e 94 fe 09 	call	0x13fc	; 0x13fc <Timer_Init>

	// enable global interrupt
	GLOBALInt_enable();
     e6a:	0e 94 1e 12 	call	0x243c	; 0x243c <GLOBALInt_enable>

	// enable external interrupt 1
	EXTInt_enable(Channel);
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	0e 94 3a 12 	call	0x2474	; 0x2474 <EXTInt_enable>

	// configure the ext int as rising edge
	EXTInt_Mode(Channel, RISING_EDGE);
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	63 e0       	ldi	r22, 0x03	; 3
     e78:	0e 94 b6 12 	call	0x256c	; 0x256c <EXTInt_Mode>

	// calling Time_on_read function when an interrupt occurs (ultrasonic echo)
	EXTInt_setCallBack(Channel, &ICU_captureTime);
     e7c:	23 e5       	ldi	r18, 0x53	; 83
     e7e:	37 e0       	ldi	r19, 0x07	; 7
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	b9 01       	movw	r22, r18
     e84:	0e 94 c2 13 	call	0x2784	; 0x2784 <EXTInt_setCallBack>

	// Ecternal interrupt channel internal buffer
	EXTInt_Chan = Channel;
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	80 93 98 01 	sts	0x0198, r24
	return ICU_E_OK;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	8e 83       	std	Y+6, r24	; 0x06
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
}
     e94:	26 96       	adiw	r28, 0x06	; 6
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <ICU_captureTime>:

void ICU_captureTime()
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	// if first interrupt
	if(interrupt_counter == 0)
     eae:	80 91 6a 01 	lds	r24, 0x016A
     eb2:	88 23       	and	r24, r24
     eb4:	81 f4       	brne	.+32     	; 0xed6 <ICU_captureTime+0x30>
	{
		// start timer
		Timer_Start(TIMER_CHANNEL, TIMER_TICKCOUNTS);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	6f ef       	ldi	r22, 0xFF	; 255
     eba:	7f ef       	ldi	r23, 0xFF	; 255
     ebc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Timer_Start>
		//configure as falling
		EXTInt_Mode(EXTInt_Chan, FALLING_EDGE);
     ec0:	80 91 98 01 	lds	r24, 0x0198
     ec4:	62 e0       	ldi	r22, 0x02	; 2
     ec6:	0e 94 b6 12 	call	0x256c	; 0x256c <EXTInt_Mode>
		// count interrupts
		interrupt_counter++;
     eca:	80 91 6a 01 	lds	r24, 0x016A
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	80 93 6a 01 	sts	0x016A, r24
     ed4:	0d c0       	rjmp	.+26     	; 0xef0 <ICU_captureTime+0x4a>
	}
	// if second interrupt
	else
	{
		// get counted ticks
		Timer_Get_TickTime(TIMER_CHANNEL, &capturedTime);
     ed6:	2c e6       	ldi	r18, 0x6C	; 108
     ed8:	31 e0       	ldi	r19, 0x01	; 1
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	b9 01       	movw	r22, r18
     ede:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Timer_Get_TickTime>
		// reconfigure the interrupt as rising again
		EXTInt_Mode(EXTInt_Chan, RISING_EDGE);
     ee2:	80 91 98 01 	lds	r24, 0x0198
     ee6:	63 e0       	ldi	r22, 0x03	; 3
     ee8:	0e 94 b6 12 	call	0x256c	; 0x256c <EXTInt_Mode>
		// reset interrupt counter
		interrupt_counter = 0;
     eec:	10 92 6a 01 	sts	0x016A, r1
	}
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <ICU_readCapturedTime>:

void ICU_readCapturedTime(u16_t *capTime)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <ICU_readCapturedTime+0x6>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
	*capTime = capturedTime;
     f04:	80 91 6c 01 	lds	r24, 0x016C
     f08:	90 91 6d 01 	lds	r25, 0x016D
     f0c:	e9 81       	ldd	r30, Y+1	; 0x01
     f0e:	fa 81       	ldd	r31, Y+2	; 0x02
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <UART_init>:

void (*UART_TX_Funcptr) (void) = 0;	// TX pointer to function to be called in TX ISR
void (*UART_RX_Funcptr) (void) = 0;	// RX pointer to function to be called in RX ISR

extern UART_Error_t UART_init(str_UartConfg_t * uart_config)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	27 97       	sbiw	r28, 0x07	; 7
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	9c 83       	std	Y+4, r25	; 0x04
     f34:	8b 83       	std	Y+3, r24	; 0x03
	// function guards for error handling
	if(uart_config->u8_FlagAction != UART_POLLING && uart_config->u8_FlagAction != UART_INTERRUPT )
     f36:	eb 81       	ldd	r30, Y+3	; 0x03
     f38:	fc 81       	ldd	r31, Y+4	; 0x04
     f3a:	83 81       	ldd	r24, Z+3	; 0x03
     f3c:	88 23       	and	r24, r24
     f3e:	39 f0       	breq	.+14     	; 0xf4e <UART_init+0x30>
     f40:	eb 81       	ldd	r30, Y+3	; 0x03
     f42:	fc 81       	ldd	r31, Y+4	; 0x04
     f44:	83 81       	ldd	r24, Z+3	; 0x03
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	11 f0       	breq	.+4      	; 0xf4e <UART_init+0x30>
		return UART_E_NOK;
     f4a:	1f 82       	std	Y+7, r1	; 0x07
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <UART_init+0x23e>
	// Baud rate valid range checking
	if(uart_config->u32_BaudRate < 0 || uart_config->u32_BaudRate > 256000)
		return UART_E_NOK;

	// Internal buffer for later use
	UART_FlagAction = uart_config->u8_FlagAction;
     f4e:	eb 81       	ldd	r30, Y+3	; 0x03
     f50:	fc 81       	ldd	r31, Y+4	; 0x04
     f52:	83 81       	ldd	r24, Z+3	; 0x03
     f54:	80 93 9a 01 	sts	0x019A, r24

	// UART Receiver enable
	SET_BIT(UCSRB, RXEN);
     f58:	aa e2       	ldi	r26, 0x2A	; 42
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea e2       	ldi	r30, 0x2A	; 42
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	8c 93       	st	X, r24
	// UART Transmitter enable
	SET_BIT(UCSRB, TXEN);
     f66:	aa e2       	ldi	r26, 0x2A	; 42
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ea e2       	ldi	r30, 0x2A	; 42
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	8c 93       	st	X, r24

	// UART Asynchronous Mode select
	CLEAR_BIT(UCSRC, UMSEL);
     f74:	a0 e4       	ldi	r26, 0x40	; 64
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e0 e4       	ldi	r30, 0x40	; 64
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7b       	andi	r24, 0xBF	; 191
     f80:	8c 93       	st	X, r24

	// Using UCSRC
	SET_BIT(UCSRC, URSEL);
     f82:	a0 e4       	ldi	r26, 0x40	; 64
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e0 e4       	ldi	r30, 0x40	; 64
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 68       	ori	r24, 0x80	; 128
     f8e:	8c 93       	st	X, r24

	// UART Character size selection
	switch(uart_config->u8_DataBits)
     f90:	eb 81       	ldd	r30, Y+3	; 0x03
     f92:	fc 81       	ldd	r31, Y+4	; 0x04
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3e 83       	std	Y+6, r19	; 0x06
     f9c:	2d 83       	std	Y+5, r18	; 0x05
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <UART_init+0x8c>
     fa8:	48 c0       	rjmp	.+144    	; 0x103a <UART_init+0x11c>
     faa:	2d 81       	ldd	r18, Y+5	; 0x05
     fac:	3e 81       	ldd	r19, Y+6	; 0x06
     fae:	23 30       	cpi	r18, 0x03	; 3
     fb0:	31 05       	cpc	r19, r1
     fb2:	54 f4       	brge	.+20     	; 0xfc8 <UART_init+0xaa>
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	99 f0       	breq	.+38     	; 0xfe2 <UART_init+0xc4>
     fbc:	2d 81       	ldd	r18, Y+5	; 0x05
     fbe:	3e 81       	ldd	r19, Y+6	; 0x06
     fc0:	21 30       	cpi	r18, 0x01	; 1
     fc2:	31 05       	cpc	r19, r1
     fc4:	21 f1       	breq	.+72     	; 0x100e <UART_init+0xf0>
     fc6:	7b c0       	rjmp	.+246    	; 0x10be <UART_init+0x1a0>
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	83 30       	cpi	r24, 0x03	; 3
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <UART_init+0xb6>
     fd2:	49 c0       	rjmp	.+146    	; 0x1066 <UART_init+0x148>
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	27 30       	cpi	r18, 0x07	; 7
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <UART_init+0xc2>
     fde:	59 c0       	rjmp	.+178    	; 0x1092 <UART_init+0x174>
     fe0:	6e c0       	rjmp	.+220    	; 0x10be <UART_init+0x1a0>
	{
		case UART_5_BIT_MODE:
		CLEAR_BIT(UCSRC, UCSZ0);
     fe2:	a0 e4       	ldi	r26, 0x40	; 64
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e0 e4       	ldi	r30, 0x40	; 64
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8d 7f       	andi	r24, 0xFD	; 253
     fee:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
     ff0:	a0 e4       	ldi	r26, 0x40	; 64
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e0 e4       	ldi	r30, 0x40	; 64
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8b 7f       	andi	r24, 0xFB	; 251
     ffc:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
     ffe:	aa e2       	ldi	r26, 0x2A	; 42
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ea e2       	ldi	r30, 0x2A	; 42
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8b 7f       	andi	r24, 0xFB	; 251
    100a:	8c 93       	st	X, r24
    100c:	5a c0       	rjmp	.+180    	; 0x10c2 <UART_init+0x1a4>
		break;

		case UART_6_BIT_MODE:
		SET_BIT(UCSRC, UCSZ0);
    100e:	a0 e4       	ldi	r26, 0x40	; 64
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e0 e4       	ldi	r30, 0x40	; 64
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC, UCSZ1);
    101c:	a0 e4       	ldi	r26, 0x40	; 64
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e0 e4       	ldi	r30, 0x40	; 64
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8b 7f       	andi	r24, 0xFB	; 251
    1028:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    102a:	aa e2       	ldi	r26, 0x2A	; 42
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ea e2       	ldi	r30, 0x2A	; 42
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8b 7f       	andi	r24, 0xFB	; 251
    1036:	8c 93       	st	X, r24
    1038:	44 c0       	rjmp	.+136    	; 0x10c2 <UART_init+0x1a4>
		break;

		case UART_7_BIT_MODE:
		CLEAR_BIT(UCSRC, UCSZ0);
    103a:	a0 e4       	ldi	r26, 0x40	; 64
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e0 e4       	ldi	r30, 0x40	; 64
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8d 7f       	andi	r24, 0xFD	; 253
    1046:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    1048:	a0 e4       	ldi	r26, 0x40	; 64
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e0 e4       	ldi	r30, 0x40	; 64
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    1056:	aa e2       	ldi	r26, 0x2A	; 42
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ea e2       	ldi	r30, 0x2A	; 42
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8b 7f       	andi	r24, 0xFB	; 251
    1062:	8c 93       	st	X, r24
    1064:	2e c0       	rjmp	.+92     	; 0x10c2 <UART_init+0x1a4>
		break;

		case UART_8_BIT_MODE:
		SET_BIT(UCSRC, UCSZ0);
    1066:	a0 e4       	ldi	r26, 0x40	; 64
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e0 e4       	ldi	r30, 0x40	; 64
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    1074:	a0 e4       	ldi	r26, 0x40	; 64
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e0 e4       	ldi	r30, 0x40	; 64
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRB, UCSZ2);
    1082:	aa e2       	ldi	r26, 0x2A	; 42
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ea e2       	ldi	r30, 0x2A	; 42
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8b 7f       	andi	r24, 0xFB	; 251
    108e:	8c 93       	st	X, r24
    1090:	18 c0       	rjmp	.+48     	; 0x10c2 <UART_init+0x1a4>
		break;

		case UART_9_BIT_MODE:
		SET_BIT(UCSRC, UCSZ0);
    1092:	a0 e4       	ldi	r26, 0x40	; 64
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e0 e4       	ldi	r30, 0x40	; 64
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	8c 93       	st	X, r24
		SET_BIT(UCSRC, UCSZ1);
    10a0:	a0 e4       	ldi	r26, 0x40	; 64
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e0 e4       	ldi	r30, 0x40	; 64
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	84 60       	ori	r24, 0x04	; 4
    10ac:	8c 93       	st	X, r24
		SET_BIT(UCSRB, UCSZ2);
    10ae:	aa e2       	ldi	r26, 0x2A	; 42
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ea e2       	ldi	r30, 0x2A	; 42
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	84 60       	ori	r24, 0x04	; 4
    10ba:	8c 93       	st	X, r24
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <UART_init+0x1a4>
		break;

		default:
		return UART_E_NOK;
    10be:	1f 82       	std	Y+7, r1	; 0x07
    10c0:	4d c0       	rjmp	.+154    	; 0x115c <UART_init+0x23e>
	}

	// Interrupt configurations
	if(uart_config->u8_FlagAction == UART_INTERRUPT)
    10c2:	eb 81       	ldd	r30, Y+3	; 0x03
    10c4:	fc 81       	ldd	r31, Y+4	; 0x04
    10c6:	83 81       	ldd	r24, Z+3	; 0x03
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	a9 f4       	brne	.+42     	; 0x10f6 <UART_init+0x1d8>
	{
		// Enable Global interrupt
		SET_BIT(SREG, 7);
    10cc:	af e5       	ldi	r26, 0x5F	; 95
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ef e5       	ldi	r30, 0x5F	; 95
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	8c 93       	st	X, r24
		// RX complete interrupt enable
		SET_BIT(UCSRB, RXCIE);
    10da:	aa e2       	ldi	r26, 0x2A	; 42
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ea e2       	ldi	r30, 0x2A	; 42
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	8c 93       	st	X, r24
		// TX complete interrupt enable
		SET_BIT(UCSRB, TXCIE);
    10e8:	aa e2       	ldi	r26, 0x2A	; 42
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ea e2       	ldi	r30, 0x2A	; 42
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	8c 93       	st	X, r24
	}

	// Temp var to store the equation result
	u16_t UBRR_val = ((F_CPU)/((uart_config->u32_BaudRate)*16UL)-1);
    10f6:	eb 81       	ldd	r30, Y+3	; 0x03
    10f8:	fc 81       	ldd	r31, Y+4	; 0x04
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	cc 01       	movw	r24, r24
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	aa 1f       	adc	r26, r26
    111a:	bb 1f       	adc	r27, r27
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	aa 1f       	adc	r26, r26
    1122:	bb 1f       	adc	r27, r27
    1124:	9c 01       	movw	r18, r24
    1126:	ad 01       	movw	r20, r26
    1128:	80 e4       	ldi	r24, 0x40	; 64
    112a:	92 e4       	ldi	r25, 0x42	; 66
    112c:	af e0       	ldi	r26, 0x0F	; 15
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <__udivmodsi4>
    1138:	da 01       	movw	r26, r20
    113a:	c9 01       	movw	r24, r18
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01

	// Splitting the 12 bits result of the above equation into the UBRRL & UBRRH registers
	UBRRH = (UBRR_val>>8); 	// shift the register right by 8 bits
    1142:	e0 e4       	ldi	r30, 0x40	; 64
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	89 2f       	mov	r24, r25
    114c:	99 27       	eor	r25, r25
    114e:	80 83       	st	Z, r24
	UBRRL = UBRR_val;		// set baud rate
    1150:	e9 e2       	ldi	r30, 0x29	; 41
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	80 83       	st	Z, r24

	return UART_E_OK;
    1158:	31 e0       	ldi	r19, 0x01	; 1
    115a:	3f 83       	std	Y+7, r19	; 0x07
    115c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    115e:	27 96       	adiw	r28, 0x07	; 7
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <UART_sendByte>:

extern UART_Error_t UART_sendByte(const u8_t u8_Data)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <UART_sendByte+0x6>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Data < 0 || u8_Data > 255)
		return UART_E_NOK;

	if(UART_FlagAction == UART_POLLING)
    117c:	80 91 9a 01 	lds	r24, 0x019A
    1180:	88 23       	and	r24, r24
    1182:	c1 f4       	brne	.+48     	; 0x11b4 <UART_sendByte+0x44>
	{
		// WHILE the UDR is not empty stuck until it is empty
		while(!GET_BIT(UCSRA, UDRE));
    1184:	eb e2       	ldi	r30, 0x2B	; 43
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	80 72       	andi	r24, 0x20	; 32
    1190:	90 70       	andi	r25, 0x00	; 0
    1192:	95 95       	asr	r25
    1194:	87 95       	ror	r24
    1196:	95 95       	asr	r25
    1198:	87 95       	ror	r24
    119a:	95 95       	asr	r25
    119c:	87 95       	ror	r24
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	95 95       	asr	r25
    11a4:	87 95       	ror	r24
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	69 f3       	breq	.-38     	; 0x1184 <UART_sendByte+0x14>
		// then put the data in the empty UDR
		UDR = u8_Data;
    11aa:	ec e2       	ldi	r30, 0x2C	; 44
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	80 83       	st	Z, r24
    11b2:	13 c0       	rjmp	.+38     	; 0x11da <UART_sendByte+0x6a>
	}
	else if(UART_FlagAction == UART_INTERRUPT)
    11b4:	80 91 9a 01 	lds	r24, 0x019A
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	69 f4       	brne	.+26     	; 0x11d6 <UART_sendByte+0x66>
	{
		// storing the data to be sent in a global buffer
		UART_Data_Transmit = u8_Data;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	80 93 99 01 	sts	0x0199, r24
		// setting data sent flag to zero for later ISR later use
		UART_DataSent_Status = UART_DATA_NOT_SENT;
    11c2:	10 92 68 01 	sts	0x0168, r1
		// Enable the uart data register empty interrupt enable
		// so we can send the data when it gets fired as we are in interrupt mode
		SET_BIT(UCSRB, UDRIE);
    11c6:	aa e2       	ldi	r26, 0x2A	; 42
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ea e2       	ldi	r30, 0x2A	; 42
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 62       	ori	r24, 0x20	; 32
    11d2:	8c 93       	st	X, r24
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <UART_sendByte+0x6a>
	}
	else
	{
		return UART_E_NOK;
    11d6:	1a 82       	std	Y+2, r1	; 0x02
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <UART_sendByte+0x6e>
	}
	return UART_E_OK;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	8a 83       	std	Y+2, r24	; 0x02
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <UART_recieveByte>:

extern UART_Error_t UART_recieveByte(u8_t *u8_Data)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <UART_recieveByte+0x6>
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
	if(UART_FlagAction == UART_POLLING)
    11fa:	80 91 9a 01 	lds	r24, 0x019A
    11fe:	88 23       	and	r24, r24
    1200:	91 f4       	brne	.+36     	; 0x1226 <UART_recieveByte+0x3c>
	{
		while(!GET_BIT(UCSRA, RXC));	// Wait until data is received
    1202:	eb e2       	ldi	r30, 0x2B	; 43
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	88 1f       	adc	r24, r24
    120a:	88 27       	eor	r24, r24
    120c:	88 1f       	adc	r24, r24
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	90 70       	andi	r25, 0x00	; 0
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	a9 f3       	breq	.-22     	; 0x1202 <UART_recieveByte+0x18>
		*u8_Data = UDR;					// return the data into the pointer
    1218:	ec e2       	ldi	r30, 0x2C	; 44
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	e9 81       	ldd	r30, Y+1	; 0x01
    1220:	fa 81       	ldd	r31, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
    1224:	0d c0       	rjmp	.+26     	; 0x1240 <UART_recieveByte+0x56>
	}
	else if(UART_FlagAction == UART_INTERRUPT)
    1226:	80 91 9a 01 	lds	r24, 0x019A
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	39 f4       	brne	.+14     	; 0x123c <UART_recieveByte+0x52>
	{
		// internal bufffer to store the address of the data var so we can return UDR to it in ISR
		UART_Data_Received_ptr = u8_Data;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	90 93 6f 01 	sts	0x016F, r25
    1236:	80 93 6e 01 	sts	0x016E, r24
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <UART_recieveByte+0x56>
	}
	else
	{
		return UART_E_NOK;
    123c:	1b 82       	std	Y+3, r1	; 0x03
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <UART_recieveByte+0x5a>
	}
	return UART_E_OK;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <UART_TX_SetCallBack>:


// when transmit completed, call a specific function
extern UART_Error_t UART_TX_SetCallBack(void (*Copy_FunctionAddress)(void))
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <UART_TX_SetCallBack+0x6>
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
	// return if null
	if(Copy_FunctionAddress == 0)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	11 f4       	brne	.+4      	; 0x126e <UART_TX_SetCallBack+0x1c>
		return UART_E_NOK;
    126a:	1b 82       	std	Y+3, r1	; 0x03
    126c:	08 c0       	rjmp	.+16     	; 0x127e <UART_TX_SetCallBack+0x2c>

	// pointer to be called in ISR
	UART_TX_Funcptr = Copy_FunctionAddress;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	90 93 71 01 	sts	0x0171, r25
    1276:	80 93 70 01 	sts	0x0170, r24
	return UART_E_OK;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	8b 83       	std	Y+3, r24	; 0x03
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <UART_RX_SetCallBack>:

extern UART_Error_t UART_RX_SetCallBack(void (*Copy_FunctionAddress)(void))
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <UART_RX_SetCallBack+0x6>
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
	// return if null
	if(Copy_FunctionAddress == 0)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <UART_RX_SetCallBack+0x1c>
		return UART_E_NOK;
    12a4:	1b 82       	std	Y+3, r1	; 0x03
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <UART_RX_SetCallBack+0x2c>

	UART_RX_Funcptr = Copy_FunctionAddress;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	90 93 73 01 	sts	0x0173, r25
    12b0:	80 93 72 01 	sts	0x0172, r24
	return UART_E_OK;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <__vector_14>:

// UDRE interrupt handler
// for sending data to UDR register when it is empty and ready
ISR(__vector_14)
{
    12c6:	1f 92       	push	r1
    12c8:	0f 92       	push	r0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	0f 92       	push	r0
    12ce:	11 24       	eor	r1, r1
    12d0:	8f 93       	push	r24
    12d2:	af 93       	push	r26
    12d4:	bf 93       	push	r27
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	// Sending the data from the global var to the UDR register so that it can be transmitted
	if(UART_DataSent_Status == UART_DATA_NOT_SENT)
    12e2:	80 91 68 01 	lds	r24, 0x0168
    12e6:	88 23       	and	r24, r24
    12e8:	79 f4       	brne	.+30     	; 0x1308 <__vector_14+0x42>
	{
		// write to the UDR register the data to be sent
		UDR = UART_Data_Transmit;
    12ea:	ec e2       	ldi	r30, 0x2C	; 44
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 91 99 01 	lds	r24, 0x0199
    12f2:	80 83       	st	Z, r24
		// fire the software data sent flag so ISR will not be called again.
		UART_DataSent_Status = UART_DATA_SENT;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 68 01 	sts	0x0168, r24
		// Clear the UDR empty flag to avoid RX frame error message.
		CLEAR_BIT(UCSRB, UDRIE);
    12fa:	aa e2       	ldi	r26, 0x2A	; 42
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ea e2       	ldi	r30, 0x2A	; 42
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7d       	andi	r24, 0xDF	; 223
    1306:	8c 93       	st	X, r24
	}
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	bf 91       	pop	r27
    1312:	af 91       	pop	r26
    1314:	8f 91       	pop	r24
    1316:	0f 90       	pop	r0
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	0f 90       	pop	r0
    131c:	1f 90       	pop	r1
    131e:	18 95       	reti

00001320 <__vector_13>:

// RXC interrupt handler
// for receiving data from UDR register when it receives it
ISR(__vector_13)
{
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	0f 92       	push	r0
    1328:	11 24       	eor	r1, r1
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	// Storing the data received in the UDR in the Data receiver global pointer
	*UART_Data_Received_ptr = UDR;
    134a:	a0 91 6e 01 	lds	r26, 0x016E
    134e:	b0 91 6f 01 	lds	r27, 0x016F
    1352:	ec e2       	ldi	r30, 0x2C	; 44
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8c 93       	st	X, r24

	// Call a specific function when data is received successfully
	if(UART_RX_Funcptr != 0)	// call the function if not null
    135a:	80 91 72 01 	lds	r24, 0x0172
    135e:	90 91 73 01 	lds	r25, 0x0173
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	29 f0       	breq	.+10     	; 0x1370 <__vector_13+0x50>
		UART_RX_Funcptr();
    1366:	e0 91 72 01 	lds	r30, 0x0172
    136a:	f0 91 73 01 	lds	r31, 0x0173
    136e:	09 95       	icall
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_15>:

// TXC interrupt handler
// for calling a specific function in case the data successfully transmitted
ISR(__vector_15)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	// call the function if not null
	if(UART_TX_Funcptr != 0)
    13c0:	80 91 70 01 	lds	r24, 0x0170
    13c4:	90 91 71 01 	lds	r25, 0x0171
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <__vector_15+0x40>
		UART_TX_Funcptr();
    13cc:	e0 91 70 01 	lds	r30, 0x0170
    13d0:	f0 91 71 01 	lds	r31, 0x0171
    13d4:	09 95       	icall
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <Timer_Init>:
void (*TIMER2_FuncPtr) (void) = 0;

extern void (*FPWM_Timer2OVFfuncPtr) (void);

extern u8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <Timer_Init+0x6>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <Timer_Init+0x8>
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
	// we don't support counter mode
	if(Confg_S->Timer_Mode == COUNTER_MODE)
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	19 f4       	brne	.+6      	; 0x141e <Timer_Init+0x22>
		return ERROR_NOK;
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	74 c0       	rjmp	.+232    	; 0x1506 <Timer_Init+0x10a>

	switch(Confg_S->Timer_Channel)
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3c 83       	std	Y+4, r19	; 0x04
    142a:	2b 83       	std	Y+3, r18	; 0x03
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	21 f1       	breq	.+72     	; 0x147e <Timer_Init+0x82>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <Timer_Init+0x46>
    1440:	45 c0       	rjmp	.+138    	; 0x14cc <Timer_Init+0xd0>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	09 f0       	breq	.+2      	; 0x144c <Timer_Init+0x50>
    144a:	59 c0       	rjmp	.+178    	; 0x14fe <Timer_Init+0x102>
	{
		case TIMER0:
		// internal buffer
		TIMER0_Psc = Confg_S->Timer_Psc;
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	81 81       	ldd	r24, Z+1	; 0x01
    1452:	80 93 9e 01 	sts	0x019E, r24
		TIMER0_Interrupt_Mode = Confg_S->Interrupt_Mode;
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	83 81       	ldd	r24, Z+3	; 0x03
    145c:	80 93 a0 01 	sts	0x01A0, r24

		// enabling normal timer mode
		CLEAR_BIT(TCCR0, WGM00);
    1460:	a3 e5       	ldi	r26, 0x53	; 83
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e3 e5       	ldi	r30, 0x53	; 83
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8f 7b       	andi	r24, 0xBF	; 191
    146c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM01);
    146e:	a3 e5       	ldi	r26, 0x53	; 83
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e3 e5       	ldi	r30, 0x53	; 83
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	87 7f       	andi	r24, 0xF7	; 247
    147a:	8c 93       	st	X, r24
    147c:	43 c0       	rjmp	.+134    	; 0x1504 <Timer_Init+0x108>
		break;

		case TIMER1:
		// internal buffer
		TIMER1_Psc = Confg_S->Timer_Psc;
    147e:	e9 81       	ldd	r30, Y+1	; 0x01
    1480:	fa 81       	ldd	r31, Y+2	; 0x02
    1482:	81 81       	ldd	r24, Z+1	; 0x01
    1484:	80 93 9f 01 	sts	0x019F, r24
		TIMER1_Interrupt_Mode = Confg_S->Interrupt_Mode;
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	83 81       	ldd	r24, Z+3	; 0x03
    148e:	80 93 9c 01 	sts	0x019C, r24

		// enabling normal timer mode
		// 16 bit timer --->  A:8-bit, B:8-bit
		// Timer control register 1 A
		CLEAR_BIT(TCCR1A, WGM10);
    1492:	af e4       	ldi	r26, 0x4F	; 79
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ef e4       	ldi	r30, 0x4F	; 79
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A, WGM11);
    14a0:	af e4       	ldi	r26, 0x4F	; 79
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ef e4       	ldi	r30, 0x4F	; 79
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	8c 93       	st	X, r24

		// Timer Control Register 1 B
		CLEAR_BIT(TCCR1B, WGM12);
    14ae:	ae e4       	ldi	r26, 0x4E	; 78
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ee e4       	ldi	r30, 0x4E	; 78
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	87 7f       	andi	r24, 0xF7	; 247
    14ba:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B, WGM13);
    14bc:	ae e4       	ldi	r26, 0x4E	; 78
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ee e4       	ldi	r30, 0x4E	; 78
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7e       	andi	r24, 0xEF	; 239
    14c8:	8c 93       	st	X, r24
    14ca:	1c c0       	rjmp	.+56     	; 0x1504 <Timer_Init+0x108>
		break;

		case TIMER2:
		// internal buffer
		TIMER2_Psc = Confg_S->Timer_Psc;
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	81 81       	ldd	r24, Z+1	; 0x01
    14d2:	80 93 9d 01 	sts	0x019D, r24
		TIMER2_Interrupt_Mode = Confg_S->Interrupt_Mode;
    14d6:	e9 81       	ldd	r30, Y+1	; 0x01
    14d8:	fa 81       	ldd	r31, Y+2	; 0x02
    14da:	83 81       	ldd	r24, Z+3	; 0x03
    14dc:	80 93 9b 01 	sts	0x019B, r24

		// enabling normal timer mode
		// Timer control register 2 (8-bit)
		CLEAR_BIT(TCCR2, WGM20);
    14e0:	a5 e4       	ldi	r26, 0x45	; 69
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e4       	ldi	r30, 0x45	; 69
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 7b       	andi	r24, 0xBF	; 191
    14ec:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, WGM21);
    14ee:	a5 e4       	ldi	r26, 0x45	; 69
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e5 e4       	ldi	r30, 0x45	; 69
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	87 7f       	andi	r24, 0xF7	; 247
    14fa:	8c 93       	st	X, r24
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <Timer_Init+0x108>
		break;

		default:
		return ERROR_NOK;
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	9d 83       	std	Y+5, r25	; 0x05
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <Timer_Init+0x10a>
	}
	return ERROR_OK;
    1504:	1d 82       	std	Y+5, r1	; 0x05
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <Timer_Start>:

extern u8_t Timer_Start(u8_t Copy_u8_timerChannel, u16_t Copy_uint16_TickCounts)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	2f 97       	sbiw	r28, 0x0f	; 15
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	8c 83       	std	Y+4, r24	; 0x04
    152e:	7e 83       	std	Y+6, r23	; 0x06
    1530:	6d 83       	std	Y+5, r22	; 0x05
	if(Copy_u8_timerChannel == TIMER0 || Copy_u8_timerChannel == TIMER2)
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	88 23       	and	r24, r24
    1536:	19 f0       	breq	.+6      	; 0x153e <Timer_Start+0x26>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	49 f4       	brne	.+18     	; 0x1550 <Timer_Start+0x38>
	{
		if(Copy_uint16_TickCounts > TIMER0_OVERFLOW || Copy_uint16_TickCounts < 0)
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	8f 3f       	cpi	r24, 0xFF	; 255
    1544:	91 05       	cpc	r25, r1
    1546:	51 f0       	breq	.+20     	; 0x155c <Timer_Start+0x44>
    1548:	48 f0       	brcs	.+18     	; 0x155c <Timer_Start+0x44>
			return ERROR_NOK;
    154a:	21 e0       	ldi	r18, 0x01	; 1
    154c:	2f 87       	std	Y+15, r18	; 0x0f
    154e:	6b c3       	rjmp	.+1750   	; 0x1c26 <Timer_Start+0x70e>
	}
	else if(Copy_u8_timerChannel == TIMER1)
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	19 f0       	breq	.+6      	; 0x155c <Timer_Start+0x44>
		if(Copy_uint16_TickCounts > TIMER1_OVERFLOW || Copy_uint16_TickCounts < 0)
			return ERROR_NOK;
	}
	else
	{
		return ERROR_NOK;
    1556:	31 e0       	ldi	r19, 0x01	; 1
    1558:	3f 87       	std	Y+15, r19	; 0x0f
    155a:	65 c3       	rjmp	.+1738   	; 0x1c26 <Timer_Start+0x70e>
	}

	switch(Copy_u8_timerChannel)
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3e 87       	std	Y+14, r19	; 0x0e
    1564:	2d 87       	std	Y+13, r18	; 0x0d
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <Timer_Start+0x5a>
    1570:	24 c1       	rjmp	.+584    	; 0x17ba <Timer_Start+0x2a2>
    1572:	2d 85       	ldd	r18, Y+13	; 0x0d
    1574:	3e 85       	ldd	r19, Y+14	; 0x0e
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	09 f4       	brne	.+2      	; 0x157e <Timer_Start+0x66>
    157c:	3b c2       	rjmp	.+1142   	; 0x19f4 <Timer_Start+0x4dc>
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	09 f0       	breq	.+2      	; 0x1588 <Timer_Start+0x70>
    1586:	4e c3       	rjmp	.+1692   	; 0x1c24 <Timer_Start+0x70c>
	{
		case TIMER0:
			// setting the ticks
			TCNT0 = TIMER0_OVERFLOW - Copy_uint16_TickCounts;
    1588:	e2 e5       	ldi	r30, 0x52	; 82
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	80 95       	com	r24
    1590:	80 83       	st	Z, r24
			// set the pre-scaler
			switch(TIMER0_Psc)
    1592:	80 91 9e 01 	lds	r24, 0x019E
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3c 87       	std	Y+12, r19	; 0x0c
    159c:	2b 87       	std	Y+11, r18	; 0x0b
    159e:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <Timer_Start+0x92>
    15a8:	70 c0       	rjmp	.+224    	; 0x168a <Timer_Start+0x172>
    15aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ae:	24 30       	cpi	r18, 0x04	; 4
    15b0:	31 05       	cpc	r19, r1
    15b2:	84 f4       	brge	.+32     	; 0x15d4 <Timer_Start+0xbc>
    15b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	d1 f1       	breq	.+116    	; 0x1632 <Timer_Start+0x11a>
    15be:	2b 85       	ldd	r18, Y+11	; 0x0b
    15c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	0c f0       	brlt	.+2      	; 0x15ca <Timer_Start+0xb2>
    15c8:	4a c0       	rjmp	.+148    	; 0x165e <Timer_Start+0x146>
    15ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    15cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	d1 f0       	breq	.+52     	; 0x1606 <Timer_Start+0xee>
    15d2:	c9 c0       	rjmp	.+402    	; 0x1766 <Timer_Start+0x24e>
    15d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    15d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    15d8:	25 30       	cpi	r18, 0x05	; 5
    15da:	31 05       	cpc	r19, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <Timer_Start+0xc8>
    15de:	81 c0       	rjmp	.+258    	; 0x16e2 <Timer_Start+0x1ca>
    15e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e4:	85 30       	cpi	r24, 0x05	; 5
    15e6:	91 05       	cpc	r25, r1
    15e8:	0c f4       	brge	.+2      	; 0x15ec <Timer_Start+0xd4>
    15ea:	65 c0       	rjmp	.+202    	; 0x16b6 <Timer_Start+0x19e>
    15ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    15f0:	26 30       	cpi	r18, 0x06	; 6
    15f2:	31 05       	cpc	r19, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <Timer_Start+0xe0>
    15f6:	8b c0       	rjmp	.+278    	; 0x170e <Timer_Start+0x1f6>
    15f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    15fc:	87 30       	cpi	r24, 0x07	; 7
    15fe:	91 05       	cpc	r25, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <Timer_Start+0xec>
    1602:	9b c0       	rjmp	.+310    	; 0x173a <Timer_Start+0x222>
    1604:	b0 c0       	rjmp	.+352    	; 0x1766 <Timer_Start+0x24e>
			{
				case NO_CLOCK_TIMER_0:
					CLEAR_BIT(TCCR0, CS00);
    1606:	a3 e5       	ldi	r26, 0x53	; 83
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e3 e5       	ldi	r30, 0x53	; 83
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8e 7f       	andi	r24, 0xFE	; 254
    1612:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS01);
    1614:	a3 e5       	ldi	r26, 0x53	; 83
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e3 e5       	ldi	r30, 0x53	; 83
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	8d 7f       	andi	r24, 0xFD	; 253
    1620:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS02);
    1622:	a3 e5       	ldi	r26, 0x53	; 83
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e3 e5       	ldi	r30, 0x53	; 83
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8b 7f       	andi	r24, 0xFB	; 251
    162e:	8c 93       	st	X, r24
    1630:	9d c0       	rjmp	.+314    	; 0x176c <Timer_Start+0x254>
					break;

				case F_CPU_CLOCK_TIMER_0:
					SET_BIT(TCCR0, CS00);
    1632:	a3 e5       	ldi	r26, 0x53	; 83
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e3 e5       	ldi	r30, 0x53	; 83
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	81 60       	ori	r24, 0x01	; 1
    163e:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS01);
    1640:	a3 e5       	ldi	r26, 0x53	; 83
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e3 e5       	ldi	r30, 0x53	; 83
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8d 7f       	andi	r24, 0xFD	; 253
    164c:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS02);
    164e:	a3 e5       	ldi	r26, 0x53	; 83
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e3 e5       	ldi	r30, 0x53	; 83
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8b 7f       	andi	r24, 0xFB	; 251
    165a:	8c 93       	st	X, r24
    165c:	87 c0       	rjmp	.+270    	; 0x176c <Timer_Start+0x254>
					break;

				case F_CPU_CLOCK_8_TIMER_0:
					CLEAR_BIT(TCCR0, CS00);
    165e:	a3 e5       	ldi	r26, 0x53	; 83
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e3 e5       	ldi	r30, 0x53	; 83
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS01);
    166c:	a3 e5       	ldi	r26, 0x53	; 83
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e3 e5       	ldi	r30, 0x53	; 83
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS02);
    167a:	a3 e5       	ldi	r26, 0x53	; 83
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e3 e5       	ldi	r30, 0x53	; 83
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	8b 7f       	andi	r24, 0xFB	; 251
    1686:	8c 93       	st	X, r24
    1688:	71 c0       	rjmp	.+226    	; 0x176c <Timer_Start+0x254>
					break;

				case F_CPU_CLOCK_64_TIMER_0:
					SET_BIT(TCCR0, CS00);
    168a:	a3 e5       	ldi	r26, 0x53	; 83
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e3 e5       	ldi	r30, 0x53	; 83
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS01);
    1698:	a3 e5       	ldi	r26, 0x53	; 83
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e3 e5       	ldi	r30, 0x53	; 83
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	82 60       	ori	r24, 0x02	; 2
    16a4:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS02);
    16a6:	a3 e5       	ldi	r26, 0x53	; 83
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e3 e5       	ldi	r30, 0x53	; 83
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8b 7f       	andi	r24, 0xFB	; 251
    16b2:	8c 93       	st	X, r24
    16b4:	5b c0       	rjmp	.+182    	; 0x176c <Timer_Start+0x254>
					break;

				case F_CPU_CLOCK_256_TIMER_0:
					CLEAR_BIT(TCCR0, CS00);
    16b6:	a3 e5       	ldi	r26, 0x53	; 83
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e3 e5       	ldi	r30, 0x53	; 83
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8e 7f       	andi	r24, 0xFE	; 254
    16c2:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS01);
    16c4:	a3 e5       	ldi	r26, 0x53	; 83
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e3 e5       	ldi	r30, 0x53	; 83
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8d 7f       	andi	r24, 0xFD	; 253
    16d0:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS02);
    16d2:	a3 e5       	ldi	r26, 0x53	; 83
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e3 e5       	ldi	r30, 0x53	; 83
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	84 60       	ori	r24, 0x04	; 4
    16de:	8c 93       	st	X, r24
    16e0:	45 c0       	rjmp	.+138    	; 0x176c <Timer_Start+0x254>
					break;

				case F_CPU_CLOCK_1024_TIMER_0:
					SET_BIT(TCCR0, CS00);
    16e2:	a3 e5       	ldi	r26, 0x53	; 83
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e3 e5       	ldi	r30, 0x53	; 83
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	81 60       	ori	r24, 0x01	; 1
    16ee:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0, CS01);
    16f0:	a3 e5       	ldi	r26, 0x53	; 83
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e3 e5       	ldi	r30, 0x53	; 83
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8d 7f       	andi	r24, 0xFD	; 253
    16fc:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS02);
    16fe:	a3 e5       	ldi	r26, 0x53	; 83
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e3 e5       	ldi	r30, 0x53	; 83
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	84 60       	ori	r24, 0x04	; 4
    170a:	8c 93       	st	X, r24
    170c:	2f c0       	rjmp	.+94     	; 0x176c <Timer_Start+0x254>
					break;

				case F_EXTERNAL_CLOCK_FALLING_TIMER_0:
					CLEAR_BIT(TCCR0, CS00);
    170e:	a3 e5       	ldi	r26, 0x53	; 83
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e3 e5       	ldi	r30, 0x53	; 83
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS01);
    171c:	a3 e5       	ldi	r26, 0x53	; 83
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e3 e5       	ldi	r30, 0x53	; 83
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	82 60       	ori	r24, 0x02	; 2
    1728:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS02);
    172a:	a3 e5       	ldi	r26, 0x53	; 83
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e3 e5       	ldi	r30, 0x53	; 83
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	84 60       	ori	r24, 0x04	; 4
    1736:	8c 93       	st	X, r24
    1738:	19 c0       	rjmp	.+50     	; 0x176c <Timer_Start+0x254>
					break;

				case F_EXTERNAL_CLOCK_RISING_TIMER_0:
					SET_BIT(TCCR0, CS00);
    173a:	a3 e5       	ldi	r26, 0x53	; 83
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 e5       	ldi	r30, 0x53	; 83
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	81 60       	ori	r24, 0x01	; 1
    1746:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS01);
    1748:	a3 e5       	ldi	r26, 0x53	; 83
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e3 e5       	ldi	r30, 0x53	; 83
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	8c 93       	st	X, r24
					SET_BIT(TCCR0, CS02);
    1756:	a3 e5       	ldi	r26, 0x53	; 83
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e3 e5       	ldi	r30, 0x53	; 83
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	84 60       	ori	r24, 0x04	; 4
    1762:	8c 93       	st	X, r24
    1764:	03 c0       	rjmp	.+6      	; 0x176c <Timer_Start+0x254>
					break;

				default:
					return ERROR_NOK;
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	9f 87       	std	Y+15, r25	; 0x0f
    176a:	5d c2       	rjmp	.+1210   	; 0x1c26 <Timer_Start+0x70e>
			}
			// enable INTERRUPTS incase of OVF_INT mode
			if(TIMER0_Interrupt_Mode == INTERRUPT)
    176c:	80 91 a0 01 	lds	r24, 0x01A0
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	79 f4       	brne	.+30     	; 0x1792 <Timer_Start+0x27a>
			{
				// Enable global interrupt
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    1774:	af e5       	ldi	r26, 0x5F	; 95
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ef e5       	ldi	r30, 0x5F	; 95
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 68       	ori	r24, 0x80	; 128
    1780:	8c 93       	st	X, r24

				// timer overflow interrupt enable
				SET_BIT(TIMSK, TOIE0);
    1782:	a9 e5       	ldi	r26, 0x59	; 89
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e9 e5       	ldi	r30, 0x59	; 89
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	81 60       	ori	r24, 0x01	; 1
    178e:	8c 93       	st	X, r24
    1790:	49 c2       	rjmp	.+1170   	; 0x1c24 <Timer_Start+0x70c>
			}
			else
			{
				u8_t flagStatus = 0;
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	07 c0       	rjmp	.+14     	; 0x17a4 <Timer_Start+0x28c>
				while(!flagStatus)
				{
					Timer_Get_FlagStatus(TIMER0, &flagStatus);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	9e 01       	movw	r18, r28
    179a:	2f 5f       	subi	r18, 0xFF	; 255
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	b9 01       	movw	r22, r18
    17a0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <Timer_Get_FlagStatus>
				SET_BIT(TIMSK, TOIE0);
			}
			else
			{
				u8_t flagStatus = 0;
				while(!flagStatus)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	88 23       	and	r24, r24
    17a8:	b1 f3       	breq	.-20     	; 0x1796 <Timer_Start+0x27e>
				{
					Timer_Get_FlagStatus(TIMER0, &flagStatus);
				}
				SET_BIT(TIFR, TOV0);
    17aa:	a8 e5       	ldi	r26, 0x58	; 88
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e8 e5       	ldi	r30, 0x58	; 88
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	81 60       	ori	r24, 0x01	; 1
    17b6:	8c 93       	st	X, r24
    17b8:	35 c2       	rjmp	.+1130   	; 0x1c24 <Timer_Start+0x70c>
			}
			break;

		case TIMER1:
			// setting the ticks
			TCNT1 = TIMER1_OVERFLOW - Copy_uint16_TickCounts;
    17ba:	ec e4       	ldi	r30, 0x4C	; 76
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	90 95       	com	r25
    17c4:	81 95       	neg	r24
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
			// set the pre-scaler
			switch(TIMER1_Psc)
    17cc:	80 91 9f 01 	lds	r24, 0x019F
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3a 87       	std	Y+10, r19	; 0x0a
    17d6:	29 87       	std	Y+9, r18	; 0x09
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <Timer_Start+0x2cc>
    17e2:	70 c0       	rjmp	.+224    	; 0x18c4 <Timer_Start+0x3ac>
    17e4:	29 85       	ldd	r18, Y+9	; 0x09
    17e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e8:	24 30       	cpi	r18, 0x04	; 4
    17ea:	31 05       	cpc	r19, r1
    17ec:	84 f4       	brge	.+32     	; 0x180e <Timer_Start+0x2f6>
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	d1 f1       	breq	.+116    	; 0x186c <Timer_Start+0x354>
    17f8:	29 85       	ldd	r18, Y+9	; 0x09
    17fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	0c f0       	brlt	.+2      	; 0x1804 <Timer_Start+0x2ec>
    1802:	4a c0       	rjmp	.+148    	; 0x1898 <Timer_Start+0x380>
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	d1 f0       	breq	.+52     	; 0x1840 <Timer_Start+0x328>
    180c:	c9 c0       	rjmp	.+402    	; 0x19a0 <Timer_Start+0x488>
    180e:	29 85       	ldd	r18, Y+9	; 0x09
    1810:	3a 85       	ldd	r19, Y+10	; 0x0a
    1812:	25 30       	cpi	r18, 0x05	; 5
    1814:	31 05       	cpc	r19, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <Timer_Start+0x302>
    1818:	81 c0       	rjmp	.+258    	; 0x191c <Timer_Start+0x404>
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	9a 85       	ldd	r25, Y+10	; 0x0a
    181e:	85 30       	cpi	r24, 0x05	; 5
    1820:	91 05       	cpc	r25, r1
    1822:	0c f4       	brge	.+2      	; 0x1826 <Timer_Start+0x30e>
    1824:	65 c0       	rjmp	.+202    	; 0x18f0 <Timer_Start+0x3d8>
    1826:	29 85       	ldd	r18, Y+9	; 0x09
    1828:	3a 85       	ldd	r19, Y+10	; 0x0a
    182a:	26 30       	cpi	r18, 0x06	; 6
    182c:	31 05       	cpc	r19, r1
    182e:	09 f4       	brne	.+2      	; 0x1832 <Timer_Start+0x31a>
    1830:	8b c0       	rjmp	.+278    	; 0x1948 <Timer_Start+0x430>
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	87 30       	cpi	r24, 0x07	; 7
    1838:	91 05       	cpc	r25, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <Timer_Start+0x326>
    183c:	9b c0       	rjmp	.+310    	; 0x1974 <Timer_Start+0x45c>
    183e:	b0 c0       	rjmp	.+352    	; 0x19a0 <Timer_Start+0x488>
			{
				case NO_CLOCK_TIMER_1:
					CLEAR_BIT(TCCR1B, CS10);
    1840:	ae e4       	ldi	r26, 0x4E	; 78
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ee e4       	ldi	r30, 0x4E	; 78
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8e 7f       	andi	r24, 0xFE	; 254
    184c:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS11);
    184e:	ae e4       	ldi	r26, 0x4E	; 78
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ee e4       	ldi	r30, 0x4E	; 78
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8d 7f       	andi	r24, 0xFD	; 253
    185a:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS12);
    185c:	ae e4       	ldi	r26, 0x4E	; 78
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ee e4       	ldi	r30, 0x4E	; 78
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	8b 7f       	andi	r24, 0xFB	; 251
    1868:	8c 93       	st	X, r24
    186a:	9d c0       	rjmp	.+314    	; 0x19a6 <Timer_Start+0x48e>
					break;

				case F_CPU_CLOCK_TIMER_1:
					SET_BIT(TCCR1B, CS10);
    186c:	ae e4       	ldi	r26, 0x4E	; 78
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ee e4       	ldi	r30, 0x4E	; 78
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	81 60       	ori	r24, 0x01	; 1
    1878:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS11);
    187a:	ae e4       	ldi	r26, 0x4E	; 78
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	ee e4       	ldi	r30, 0x4E	; 78
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8d 7f       	andi	r24, 0xFD	; 253
    1886:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS12);
    1888:	ae e4       	ldi	r26, 0x4E	; 78
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ee e4       	ldi	r30, 0x4E	; 78
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8b 7f       	andi	r24, 0xFB	; 251
    1894:	8c 93       	st	X, r24
    1896:	87 c0       	rjmp	.+270    	; 0x19a6 <Timer_Start+0x48e>
					break;

				case F_CPU_CLOCK_8_TIMER_1:
					CLEAR_BIT(TCCR1B, CS10);
    1898:	ae e4       	ldi	r26, 0x4E	; 78
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	ee e4       	ldi	r30, 0x4E	; 78
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS11);
    18a6:	ae e4       	ldi	r26, 0x4E	; 78
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ee e4       	ldi	r30, 0x4E	; 78
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	82 60       	ori	r24, 0x02	; 2
    18b2:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS12);
    18b4:	ae e4       	ldi	r26, 0x4E	; 78
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	ee e4       	ldi	r30, 0x4E	; 78
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8b 7f       	andi	r24, 0xFB	; 251
    18c0:	8c 93       	st	X, r24
    18c2:	71 c0       	rjmp	.+226    	; 0x19a6 <Timer_Start+0x48e>
					break;

				case F_CPU_CLOCK_64_TIMER_1:
					SET_BIT(TCCR1B, CS10);
    18c4:	ae e4       	ldi	r26, 0x4E	; 78
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ee e4       	ldi	r30, 0x4E	; 78
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	81 60       	ori	r24, 0x01	; 1
    18d0:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS11);
    18d2:	ae e4       	ldi	r26, 0x4E	; 78
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ee e4       	ldi	r30, 0x4E	; 78
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	82 60       	ori	r24, 0x02	; 2
    18de:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS12);
    18e0:	ae e4       	ldi	r26, 0x4E	; 78
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ee e4       	ldi	r30, 0x4E	; 78
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	8b 7f       	andi	r24, 0xFB	; 251
    18ec:	8c 93       	st	X, r24
    18ee:	5b c0       	rjmp	.+182    	; 0x19a6 <Timer_Start+0x48e>
					break;

				case F_CPU_CLOCK_256_TIMER_1:
					CLEAR_BIT(TCCR1B, CS10);
    18f0:	ae e4       	ldi	r26, 0x4E	; 78
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ee e4       	ldi	r30, 0x4E	; 78
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8e 7f       	andi	r24, 0xFE	; 254
    18fc:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS11);
    18fe:	ae e4       	ldi	r26, 0x4E	; 78
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ee e4       	ldi	r30, 0x4E	; 78
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8d 7f       	andi	r24, 0xFD	; 253
    190a:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS12);
    190c:	ae e4       	ldi	r26, 0x4E	; 78
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ee e4       	ldi	r30, 0x4E	; 78
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	84 60       	ori	r24, 0x04	; 4
    1918:	8c 93       	st	X, r24
    191a:	45 c0       	rjmp	.+138    	; 0x19a6 <Timer_Start+0x48e>
					break;

				case F_CPU_CLOCK_1024_TIMER_1:
					SET_BIT(TCCR1B, CS10);
    191c:	ae e4       	ldi	r26, 0x4E	; 78
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	ee e4       	ldi	r30, 0x4E	; 78
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	81 60       	ori	r24, 0x01	; 1
    1928:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR1B, CS11);
    192a:	ae e4       	ldi	r26, 0x4E	; 78
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ee e4       	ldi	r30, 0x4E	; 78
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8d 7f       	andi	r24, 0xFD	; 253
    1936:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS12);
    1938:	ae e4       	ldi	r26, 0x4E	; 78
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ee e4       	ldi	r30, 0x4E	; 78
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	84 60       	ori	r24, 0x04	; 4
    1944:	8c 93       	st	X, r24
    1946:	2f c0       	rjmp	.+94     	; 0x19a6 <Timer_Start+0x48e>
					break;

				case F_EXTERNAL_CLOCK_FALLING_TIMER_1:
					CLEAR_BIT(TCCR1B, CS10);
    1948:	ae e4       	ldi	r26, 0x4E	; 78
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ee e4       	ldi	r30, 0x4E	; 78
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8e 7f       	andi	r24, 0xFE	; 254
    1954:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS11);
    1956:	ae e4       	ldi	r26, 0x4E	; 78
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	ee e4       	ldi	r30, 0x4E	; 78
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	82 60       	ori	r24, 0x02	; 2
    1962:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS12);
    1964:	ae e4       	ldi	r26, 0x4E	; 78
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	ee e4       	ldi	r30, 0x4E	; 78
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	84 60       	ori	r24, 0x04	; 4
    1970:	8c 93       	st	X, r24
    1972:	19 c0       	rjmp	.+50     	; 0x19a6 <Timer_Start+0x48e>
					break;

				case F_EXTERNAL_CLOCK_RISING_TIMER_1:
					SET_BIT(TCCR1B, CS10);
    1974:	ae e4       	ldi	r26, 0x4E	; 78
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ee e4       	ldi	r30, 0x4E	; 78
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	81 60       	ori	r24, 0x01	; 1
    1980:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS11);
    1982:	ae e4       	ldi	r26, 0x4E	; 78
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	ee e4       	ldi	r30, 0x4E	; 78
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	82 60       	ori	r24, 0x02	; 2
    198e:	8c 93       	st	X, r24
					SET_BIT(TCCR1B, CS12);
    1990:	ae e4       	ldi	r26, 0x4E	; 78
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	ee e4       	ldi	r30, 0x4E	; 78
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	84 60       	ori	r24, 0x04	; 4
    199c:	8c 93       	st	X, r24
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <Timer_Start+0x48e>
					break;

				default:
					return ERROR_NOK;
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	9f 87       	std	Y+15, r25	; 0x0f
    19a4:	40 c1       	rjmp	.+640    	; 0x1c26 <Timer_Start+0x70e>
			}
			// enable INTERRUPTS incase of OVF_INT mode
			if(TIMER1_Interrupt_Mode == INTERRUPT)
    19a6:	80 91 9c 01 	lds	r24, 0x019C
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	79 f4       	brne	.+30     	; 0x19cc <Timer_Start+0x4b4>
			{
				// Enable global interrupt
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    19ae:	af e5       	ldi	r26, 0x5F	; 95
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	ef e5       	ldi	r30, 0x5F	; 95
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	80 68       	ori	r24, 0x80	; 128
    19ba:	8c 93       	st	X, r24

				// timer overflow interrupt enable
				SET_BIT(TIMSK, TOIE1);
    19bc:	a9 e5       	ldi	r26, 0x59	; 89
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e9 e5       	ldi	r30, 0x59	; 89
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	84 60       	ori	r24, 0x04	; 4
    19c8:	8c 93       	st	X, r24
    19ca:	2c c1       	rjmp	.+600    	; 0x1c24 <Timer_Start+0x70c>
			}
			else
			{
				u8_t flagStatus = 0;
    19cc:	1a 82       	std	Y+2, r1	; 0x02
    19ce:	07 c0       	rjmp	.+14     	; 0x19de <Timer_Start+0x4c6>
				while(!flagStatus)
				{
					Timer_Get_FlagStatus(TIMER1, &flagStatus);
    19d0:	9e 01       	movw	r18, r28
    19d2:	2e 5f       	subi	r18, 0xFE	; 254
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	b9 01       	movw	r22, r18
    19da:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <Timer_Get_FlagStatus>
				SET_BIT(TIMSK, TOIE1);
			}
			else
			{
				u8_t flagStatus = 0;
				while(!flagStatus)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	88 23       	and	r24, r24
    19e2:	b1 f3       	breq	.-20     	; 0x19d0 <Timer_Start+0x4b8>
				{
					Timer_Get_FlagStatus(TIMER1, &flagStatus);
				}
				SET_BIT(TIFR, TOV1);
    19e4:	a8 e5       	ldi	r26, 0x58	; 88
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 e5       	ldi	r30, 0x58	; 88
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	84 60       	ori	r24, 0x04	; 4
    19f0:	8c 93       	st	X, r24
    19f2:	18 c1       	rjmp	.+560    	; 0x1c24 <Timer_Start+0x70c>
			}
			break;

		case TIMER2:
			// setting the ticks
			TCNT2 = TIMER2_OVERFLOW - Copy_uint16_TickCounts;
    19f4:	e4 e4       	ldi	r30, 0x44	; 68
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	80 95       	com	r24
    19fc:	80 83       	st	Z, r24

			// set the pre-scaler
			switch(TIMER2_Psc)
    19fe:	80 91 9d 01 	lds	r24, 0x019D
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	38 87       	std	Y+8, r19	; 0x08
    1a08:	2f 83       	std	Y+7, r18	; 0x07
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	91 05       	cpc	r25, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <Timer_Start+0x4fe>
    1a14:	70 c0       	rjmp	.+224    	; 0x1af6 <Timer_Start+0x5de>
    1a16:	2f 81       	ldd	r18, Y+7	; 0x07
    1a18:	38 85       	ldd	r19, Y+8	; 0x08
    1a1a:	24 30       	cpi	r18, 0x04	; 4
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	84 f4       	brge	.+32     	; 0x1a40 <Timer_Start+0x528>
    1a20:	8f 81       	ldd	r24, Y+7	; 0x07
    1a22:	98 85       	ldd	r25, Y+8	; 0x08
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	91 05       	cpc	r25, r1
    1a28:	d1 f1       	breq	.+116    	; 0x1a9e <Timer_Start+0x586>
    1a2a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a2c:	38 85       	ldd	r19, Y+8	; 0x08
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	0c f0       	brlt	.+2      	; 0x1a36 <Timer_Start+0x51e>
    1a34:	4a c0       	rjmp	.+148    	; 0x1aca <Timer_Start+0x5b2>
    1a36:	8f 81       	ldd	r24, Y+7	; 0x07
    1a38:	98 85       	ldd	r25, Y+8	; 0x08
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	d1 f0       	breq	.+52     	; 0x1a72 <Timer_Start+0x55a>
    1a3e:	c9 c0       	rjmp	.+402    	; 0x1bd2 <Timer_Start+0x6ba>
    1a40:	2f 81       	ldd	r18, Y+7	; 0x07
    1a42:	38 85       	ldd	r19, Y+8	; 0x08
    1a44:	25 30       	cpi	r18, 0x05	; 5
    1a46:	31 05       	cpc	r19, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <Timer_Start+0x534>
    1a4a:	81 c0       	rjmp	.+258    	; 0x1b4e <Timer_Start+0x636>
    1a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4e:	98 85       	ldd	r25, Y+8	; 0x08
    1a50:	85 30       	cpi	r24, 0x05	; 5
    1a52:	91 05       	cpc	r25, r1
    1a54:	0c f4       	brge	.+2      	; 0x1a58 <Timer_Start+0x540>
    1a56:	65 c0       	rjmp	.+202    	; 0x1b22 <Timer_Start+0x60a>
    1a58:	2f 81       	ldd	r18, Y+7	; 0x07
    1a5a:	38 85       	ldd	r19, Y+8	; 0x08
    1a5c:	26 30       	cpi	r18, 0x06	; 6
    1a5e:	31 05       	cpc	r19, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <Timer_Start+0x54c>
    1a62:	8b c0       	rjmp	.+278    	; 0x1b7a <Timer_Start+0x662>
    1a64:	8f 81       	ldd	r24, Y+7	; 0x07
    1a66:	98 85       	ldd	r25, Y+8	; 0x08
    1a68:	87 30       	cpi	r24, 0x07	; 7
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <Timer_Start+0x558>
    1a6e:	9b c0       	rjmp	.+310    	; 0x1ba6 <Timer_Start+0x68e>
    1a70:	b0 c0       	rjmp	.+352    	; 0x1bd2 <Timer_Start+0x6ba>
			{
				case NO_CLOCK_TIMER_2:
					CLEAR_BIT(TCCR2, CS20);
    1a72:	a5 e4       	ldi	r26, 0x45	; 69
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e4       	ldi	r30, 0x45	; 69
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8e 7f       	andi	r24, 0xFE	; 254
    1a7e:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS21);
    1a80:	a5 e4       	ldi	r26, 0x45	; 69
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e4       	ldi	r30, 0x45	; 69
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8d 7f       	andi	r24, 0xFD	; 253
    1a8c:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS22);
    1a8e:	a5 e4       	ldi	r26, 0x45	; 69
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e4       	ldi	r30, 0x45	; 69
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8b 7f       	andi	r24, 0xFB	; 251
    1a9a:	8c 93       	st	X, r24
    1a9c:	9d c0       	rjmp	.+314    	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				case F_CPU_CLOCK_TIMER_2:
					SET_BIT(TCCR2, CS20);
    1a9e:	a5 e4       	ldi	r26, 0x45	; 69
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e5 e4       	ldi	r30, 0x45	; 69
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	81 60       	ori	r24, 0x01	; 1
    1aaa:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS21);
    1aac:	a5 e4       	ldi	r26, 0x45	; 69
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e5 e4       	ldi	r30, 0x45	; 69
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	8d 7f       	andi	r24, 0xFD	; 253
    1ab8:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS22);
    1aba:	a5 e4       	ldi	r26, 0x45	; 69
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e4       	ldi	r30, 0x45	; 69
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8b 7f       	andi	r24, 0xFB	; 251
    1ac6:	8c 93       	st	X, r24
    1ac8:	87 c0       	rjmp	.+270    	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				case F_CPU_CLOCK_8_TIMER_2:
					CLEAR_BIT(TCCR2, CS20);
    1aca:	a5 e4       	ldi	r26, 0x45	; 69
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e5 e4       	ldi	r30, 0x45	; 69
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8e 7f       	andi	r24, 0xFE	; 254
    1ad6:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS21);
    1ad8:	a5 e4       	ldi	r26, 0x45	; 69
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e4       	ldi	r30, 0x45	; 69
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	82 60       	ori	r24, 0x02	; 2
    1ae4:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS22);
    1ae6:	a5 e4       	ldi	r26, 0x45	; 69
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e5 e4       	ldi	r30, 0x45	; 69
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	8b 7f       	andi	r24, 0xFB	; 251
    1af2:	8c 93       	st	X, r24
    1af4:	71 c0       	rjmp	.+226    	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				case F_CPU_CLOCK_32_TIMER_2:
					SET_BIT(TCCR2, CS20);
    1af6:	a5 e4       	ldi	r26, 0x45	; 69
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e4       	ldi	r30, 0x45	; 69
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	81 60       	ori	r24, 0x01	; 1
    1b02:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS21);
    1b04:	a5 e4       	ldi	r26, 0x45	; 69
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e4       	ldi	r30, 0x45	; 69
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 60       	ori	r24, 0x02	; 2
    1b10:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS22);
    1b12:	a5 e4       	ldi	r26, 0x45	; 69
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e4       	ldi	r30, 0x45	; 69
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	8b 7f       	andi	r24, 0xFB	; 251
    1b1e:	8c 93       	st	X, r24
    1b20:	5b c0       	rjmp	.+182    	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				case F_CPU_CLOCK_64_TIMER_2:
					CLEAR_BIT(TCCR2, CS20);
    1b22:	a5 e4       	ldi	r26, 0x45	; 69
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e5 e4       	ldi	r30, 0x45	; 69
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8e 7f       	andi	r24, 0xFE	; 254
    1b2e:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS21);
    1b30:	a5 e4       	ldi	r26, 0x45	; 69
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e5 e4       	ldi	r30, 0x45	; 69
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	8d 7f       	andi	r24, 0xFD	; 253
    1b3c:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS22);
    1b3e:	a5 e4       	ldi	r26, 0x45	; 69
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e4       	ldi	r30, 0x45	; 69
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	84 60       	ori	r24, 0x04	; 4
    1b4a:	8c 93       	st	X, r24
    1b4c:	45 c0       	rjmp	.+138    	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				case F_CPU_CLOCK_128_TIMER_2:
					SET_BIT(TCCR2, CS20);
    1b4e:	a5 e4       	ldi	r26, 0x45	; 69
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e5 e4       	ldi	r30, 0x45	; 69
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	81 60       	ori	r24, 0x01	; 1
    1b5a:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2, CS21);
    1b5c:	a5 e4       	ldi	r26, 0x45	; 69
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e5 e4       	ldi	r30, 0x45	; 69
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8d 7f       	andi	r24, 0xFD	; 253
    1b68:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS22);
    1b6a:	a5 e4       	ldi	r26, 0x45	; 69
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e5 e4       	ldi	r30, 0x45	; 69
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	84 60       	ori	r24, 0x04	; 4
    1b76:	8c 93       	st	X, r24
    1b78:	2f c0       	rjmp	.+94     	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				case F_CPU_CLOCK_256_TIMER_2:
					CLEAR_BIT(TCCR2, CS20);
    1b7a:	a5 e4       	ldi	r26, 0x45	; 69
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e5 e4       	ldi	r30, 0x45	; 69
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8e 7f       	andi	r24, 0xFE	; 254
    1b86:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS21);
    1b88:	a5 e4       	ldi	r26, 0x45	; 69
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e5 e4       	ldi	r30, 0x45	; 69
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	82 60       	ori	r24, 0x02	; 2
    1b94:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS22);
    1b96:	a5 e4       	ldi	r26, 0x45	; 69
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e5 e4       	ldi	r30, 0x45	; 69
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	84 60       	ori	r24, 0x04	; 4
    1ba2:	8c 93       	st	X, r24
    1ba4:	19 c0       	rjmp	.+50     	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				case F_CPU_CLOCK_1024_TIMER_2:
					SET_BIT(TCCR2, CS20);
    1ba6:	a5 e4       	ldi	r26, 0x45	; 69
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e5 e4       	ldi	r30, 0x45	; 69
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	81 60       	ori	r24, 0x01	; 1
    1bb2:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS21);
    1bb4:	a5 e4       	ldi	r26, 0x45	; 69
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e5 e4       	ldi	r30, 0x45	; 69
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	82 60       	ori	r24, 0x02	; 2
    1bc0:	8c 93       	st	X, r24
					SET_BIT(TCCR2, CS22);
    1bc2:	a5 e4       	ldi	r26, 0x45	; 69
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e5 e4       	ldi	r30, 0x45	; 69
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	84 60       	ori	r24, 0x04	; 4
    1bce:	8c 93       	st	X, r24
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <Timer_Start+0x6c0>
					break;

				default:
					return ERROR_NOK;
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	9f 87       	std	Y+15, r25	; 0x0f
    1bd6:	27 c0       	rjmp	.+78     	; 0x1c26 <Timer_Start+0x70e>
			}
			// enable INTERRUPTS incase of OVF_INT mode
			if(TIMER2_Interrupt_Mode == INTERRUPT)
    1bd8:	80 91 9b 01 	lds	r24, 0x019B
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	79 f4       	brne	.+30     	; 0x1bfe <Timer_Start+0x6e6>
			{
				// Enable global interrupt
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    1be0:	af e5       	ldi	r26, 0x5F	; 95
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ef e5       	ldi	r30, 0x5F	; 95
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	80 68       	ori	r24, 0x80	; 128
    1bec:	8c 93       	st	X, r24

				// timer2 overflow interrupt enable
				SET_BIT(TIMSK, TOIE2);
    1bee:	a9 e5       	ldi	r26, 0x59	; 89
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e9 e5       	ldi	r30, 0x59	; 89
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	80 64       	ori	r24, 0x40	; 64
    1bfa:	8c 93       	st	X, r24
    1bfc:	13 c0       	rjmp	.+38     	; 0x1c24 <Timer_Start+0x70c>
			}
			else
			{
				u8_t flagStatus = 0;
    1bfe:	1b 82       	std	Y+3, r1	; 0x03
    1c00:	07 c0       	rjmp	.+14     	; 0x1c10 <Timer_Start+0x6f8>
				while(!flagStatus)
				{
					Timer_Get_FlagStatus(TIMER2, &flagStatus);
    1c02:	9e 01       	movw	r18, r28
    1c04:	2d 5f       	subi	r18, 0xFD	; 253
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	b9 01       	movw	r22, r18
    1c0c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <Timer_Get_FlagStatus>
				SET_BIT(TIMSK, TOIE2);
			}
			else
			{
				u8_t flagStatus = 0;
				while(!flagStatus)
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 23       	and	r24, r24
    1c14:	b1 f3       	breq	.-20     	; 0x1c02 <Timer_Start+0x6ea>
				{
					Timer_Get_FlagStatus(TIMER2, &flagStatus);
				}
				SET_BIT(TIFR, TOV2);
    1c16:	a8 e5       	ldi	r26, 0x58	; 88
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e8 e5       	ldi	r30, 0x58	; 88
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 64       	ori	r24, 0x40	; 64
    1c22:	8c 93       	st	X, r24
			}
			break;
	}

	return ERROR_OK;
    1c24:	1f 86       	std	Y+15, r1	; 0x0f
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1c28:	2f 96       	adiw	r28, 0x0f	; 15
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <Timer_Stop>:


extern u8_t Timer_Stop(u8_t Copy_u8_timerChannel)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <Timer_Stop+0x6>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <Timer_Stop+0x8>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_timerChannel)
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	3c 83       	std	Y+4, r19	; 0x04
    1c50:	2b 83       	std	Y+3, r18	; 0x03
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	91 05       	cpc	r25, r1
    1c5a:	e1 f0       	breq	.+56     	; 0x1c94 <Timer_Stop+0x5a>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	51 f1       	breq	.+84     	; 0x1cba <Timer_Stop+0x80>
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	c9 f5       	brne	.+114    	; 0x1ce0 <Timer_Stop+0xa6>
	{
		case TIMER0:
		if(TIMER0_Interrupt_Mode == INTERRUPT)
    1c6e:	80 91 a0 01 	lds	r24, 0x01A0
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	c1 f5       	brne	.+112    	; 0x1ce6 <Timer_Stop+0xac>
		{
			// disable global interrupt
			CLEAR_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);  // WHY SHOULD I DO THAT? INTERRUPT PERIPHERAL MAYBE USED...
    1c76:	af e5       	ldi	r26, 0x5F	; 95
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	ef e5       	ldi	r30, 0x5F	; 95
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8f 77       	andi	r24, 0x7F	; 127
    1c82:	8c 93       	st	X, r24
			// disable ovf interrupt
			CLEAR_BIT(TIMSK, TOIE0);
    1c84:	a9 e5       	ldi	r26, 0x59	; 89
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e9 e5       	ldi	r30, 0x59	; 89
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8e 7f       	andi	r24, 0xFE	; 254
    1c90:	8c 93       	st	X, r24
    1c92:	29 c0       	rjmp	.+82     	; 0x1ce6 <Timer_Stop+0xac>
		*		---> nothing to do
		************************************************************/
		break;

		case TIMER1:
		if(TIMER1_Interrupt_Mode == INTERRUPT)
    1c94:	80 91 9c 01 	lds	r24, 0x019C
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	29 f5       	brne	.+74     	; 0x1ce6 <Timer_Stop+0xac>
		{
			// disable global interrupt
			CLEAR_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);  // WHY SHOULD I DO THAT? INTERRUPT PERIPHERAL MAYBE USED...
    1c9c:	af e5       	ldi	r26, 0x5F	; 95
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	ef e5       	ldi	r30, 0x5F	; 95
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8f 77       	andi	r24, 0x7F	; 127
    1ca8:	8c 93       	st	X, r24
			// disable ovf interrupt
			CLEAR_BIT(TIMSK, TOIE1);
    1caa:	a9 e5       	ldi	r26, 0x59	; 89
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e9 e5       	ldi	r30, 0x59	; 89
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8b 7f       	andi	r24, 0xFB	; 251
    1cb6:	8c 93       	st	X, r24
    1cb8:	16 c0       	rjmp	.+44     	; 0x1ce6 <Timer_Stop+0xac>
		}
		break;

		case TIMER2:
		if(TIMER2_Interrupt_Mode == INTERRUPT)
    1cba:	80 91 9b 01 	lds	r24, 0x019B
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	91 f4       	brne	.+36     	; 0x1ce6 <Timer_Stop+0xac>
		{
			// disable global interrupt
			CLEAR_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);  // WHY SHOULD I DO THAT? INTERRUPT PERIPHERAL MAYBE USED...
    1cc2:	af e5       	ldi	r26, 0x5F	; 95
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ef e5       	ldi	r30, 0x5F	; 95
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 77       	andi	r24, 0x7F	; 127
    1cce:	8c 93       	st	X, r24
			// disable ovf interrupt
			CLEAR_BIT(TIMSK, TOIE2);
    1cd0:	a9 e5       	ldi	r26, 0x59	; 89
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e9 e5       	ldi	r30, 0x59	; 89
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	8f 7b       	andi	r24, 0xBF	; 191
    1cdc:	8c 93       	st	X, r24
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <Timer_Stop+0xac>
		}
		break;

		default:
		return ERROR_NOK;
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
    1ce2:	9a 83       	std	Y+2, r25	; 0x02
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <Timer_Stop+0xae>
	}
	return ERROR_OK;
    1ce6:	1a 82       	std	Y+2, r1	; 0x02
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <Timer_Reset>:

// should i reset timer counter register only??
// or should i set logical one to ovf flag register TIFR to clear it?

extern u8_t Timer_Reset(u8_t Copy_u8_timerChannel, u16_t Copy_uint16_TickCounts)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <Timer_Reset+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <Timer_Reset+0x8>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <Timer_Reset+0xa>
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	7b 83       	std	Y+3, r23	; 0x03
    1d0a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8_timerChannel == TIMER0 || Copy_u8_timerChannel == TIMER2)
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	88 23       	and	r24, r24
    1d10:	19 f0       	breq	.+6      	; 0x1d18 <Timer_Reset+0x20>
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	82 30       	cpi	r24, 0x02	; 2
    1d16:	49 f4       	brne	.+18     	; 0x1d2a <Timer_Reset+0x32>
	{
		if(Copy_uint16_TickCounts > TIMER0_OVERFLOW || Copy_uint16_TickCounts < 0)
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d1e:	91 05       	cpc	r25, r1
    1d20:	21 f0       	breq	.+8      	; 0x1d2a <Timer_Reset+0x32>
    1d22:	18 f0       	brcs	.+6      	; 0x1d2a <Timer_Reset+0x32>
			return ERROR_NOK;
    1d24:	21 e0       	ldi	r18, 0x01	; 1
    1d26:	2e 83       	std	Y+6, r18	; 0x06
    1d28:	2d c0       	rjmp	.+90     	; 0x1d84 <Timer_Reset+0x8c>
	{
		if(Copy_uint16_TickCounts > TIMER1_OVERFLOW || Copy_uint16_TickCounts < 0)
			return ERROR_NOK;
	}

	switch(Copy_u8_timerChannel)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3d 83       	std	Y+5, r19	; 0x05
    1d32:	2c 83       	std	Y+4, r18	; 0x04
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	79 f0       	breq	.+30     	; 0x1d5c <Timer_Reset+0x64>
    1d3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d40:	3d 81       	ldd	r19, Y+5	; 0x05
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	a1 f0       	breq	.+40     	; 0x1d70 <Timer_Reset+0x78>
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	b1 f4       	brne	.+44     	; 0x1d7c <Timer_Reset+0x84>
	{
		case TIMER0:
		TCNT0 = TIMER0_OVERFLOW - Copy_uint16_TickCounts;
    1d50:	e2 e5       	ldi	r30, 0x52	; 82
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	80 95       	com	r24
    1d58:	80 83       	st	Z, r24
    1d5a:	13 c0       	rjmp	.+38     	; 0x1d82 <Timer_Reset+0x8a>
		break;

		case TIMER1:
		TCNT1 = TIMER1_OVERFLOW - Copy_uint16_TickCounts;;
    1d5c:	ec e4       	ldi	r30, 0x4C	; 76
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	90 95       	com	r25
    1d66:	81 95       	neg	r24
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <Timer_Reset+0x8a>
		break;

		case TIMER2:
		TCNT2 = TIMER2_OVERFLOW - Copy_uint16_TickCounts;;
    1d70:	e4 e4       	ldi	r30, 0x44	; 68
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	80 95       	com	r24
    1d78:	80 83       	st	Z, r24
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <Timer_Reset+0x8a>
		break;

		default:
		return ERROR_NOK;
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	9e 83       	std	Y+6, r25	; 0x06
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <Timer_Reset+0x8c>
	}
	return ERROR_OK;
    1d82:	1e 82       	std	Y+6, r1	; 0x06
    1d84:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1d86:	26 96       	adiw	r28, 0x06	; 6
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <Timer_Get_TickTime>:

extern u8_t Timer_Get_TickTime(u8_t Copy_u8_timerChannel, u16_t *Copy_uint8Ptr_TimerTickTime)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <Timer_Get_TickTime+0x6>
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <Timer_Get_TickTime+0x8>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <Timer_Get_TickTime+0xa>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	7b 83       	std	Y+3, r23	; 0x03
    1daa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_timerChannel)
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	3e 83       	std	Y+6, r19	; 0x06
    1db4:	2d 83       	std	Y+5, r18	; 0x05
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	99 f0       	breq	.+38     	; 0x1de6 <Timer_Get_TickTime+0x4e>
    1dc0:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc2:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	b9 f0       	breq	.+46     	; 0x1df8 <Timer_Get_TickTime+0x60>
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	e9 f4       	brne	.+58     	; 0x1e0c <Timer_Get_TickTime+0x74>
	{
		case TIMER0:
		*Copy_uint8Ptr_TimerTickTime = TCNT0;
    1dd2:	e2 e5       	ldi	r30, 0x52	; 82
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dde:	fb 81       	ldd	r31, Y+3	; 0x03
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
    1de4:	16 c0       	rjmp	.+44     	; 0x1e12 <Timer_Get_TickTime+0x7a>
		break;

		case TIMER1:
		*Copy_uint8Ptr_TimerTickTime = TCNT1;
    1de6:	ec e4       	ldi	r30, 0x4C	; 76
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	ea 81       	ldd	r30, Y+2	; 0x02
    1df0:	fb 81       	ldd	r31, Y+3	; 0x03
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	0d c0       	rjmp	.+26     	; 0x1e12 <Timer_Get_TickTime+0x7a>
		break;

		case TIMER2:
		*Copy_uint8Ptr_TimerTickTime = TCNT2;
    1df8:	e4 e4       	ldi	r30, 0x44	; 68
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	ea 81       	ldd	r30, Y+2	; 0x02
    1e04:	fb 81       	ldd	r31, Y+3	; 0x03
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	03 c0       	rjmp	.+6      	; 0x1e12 <Timer_Get_TickTime+0x7a>
		break;

		default:
		return ERROR_NOK;
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <Timer_Get_TickTime+0x7c>
	}
	return ERROR_OK;
    1e12:	1c 82       	std	Y+4, r1	; 0x04
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e16:	26 96       	adiw	r28, 0x06	; 6
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <Timer_Get_FlagStatus>:

extern u8_t Timer_Get_FlagStatus(u8_t Copy_u8_timerChannel, u8_t *Copy_uint8Ptr_FlagStatus)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <Timer_Get_FlagStatus+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <Timer_Get_FlagStatus+0x8>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <Timer_Get_FlagStatus+0xa>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	7b 83       	std	Y+3, r23	; 0x03
    1e3a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_timerChannel)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	3e 83       	std	Y+6, r19	; 0x06
    1e44:	2d 83       	std	Y+5, r18	; 0x05
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	89 f0       	breq	.+34     	; 0x1e72 <Timer_Get_FlagStatus+0x4a>
    1e50:	2d 81       	ldd	r18, Y+5	; 0x05
    1e52:	3e 81       	ldd	r19, Y+6	; 0x06
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 05       	cpc	r19, r1
    1e58:	d9 f0       	breq	.+54     	; 0x1e90 <Timer_Get_FlagStatus+0x68>
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	51 f5       	brne	.+84     	; 0x1eb6 <Timer_Get_FlagStatus+0x8e>
	{
		case TIMER0:
		// getting the Timer overflow bit value from the Timer interrupt flag register
		*Copy_uint8Ptr_FlagStatus = GET_BIT(TIFR, TOV0);
    1e62:	e8 e5       	ldi	r30, 0x58	; 88
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	81 70       	andi	r24, 0x01	; 1
    1e6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e6e:	80 83       	st	Z, r24
    1e70:	25 c0       	rjmp	.+74     	; 0x1ebc <Timer_Get_FlagStatus+0x94>
		break;

		case TIMER1:
		// getting the Timer overflow bit value from the Timer interrupt flag register
		*Copy_uint8Ptr_FlagStatus = GET_BIT(TIFR, TOV1);
    1e72:	e8 e5       	ldi	r30, 0x58	; 88
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	84 70       	andi	r24, 0x04	; 4
    1e7e:	90 70       	andi	r25, 0x00	; 0
    1e80:	95 95       	asr	r25
    1e82:	87 95       	ror	r24
    1e84:	95 95       	asr	r25
    1e86:	87 95       	ror	r24
    1e88:	ea 81       	ldd	r30, Y+2	; 0x02
    1e8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e8c:	80 83       	st	Z, r24
    1e8e:	16 c0       	rjmp	.+44     	; 0x1ebc <Timer_Get_FlagStatus+0x94>
		break;

		case TIMER2:
		// getting the Timer overflow bit value from the Timer interrupt flag register
		*Copy_uint8Ptr_FlagStatus = GET_BIT(TIFR, TOV2);
    1e90:	e8 e5       	ldi	r30, 0x58	; 88
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	80 74       	andi	r24, 0x40	; 64
    1e9c:	90 70       	andi	r25, 0x00	; 0
    1e9e:	08 2e       	mov	r0, r24
    1ea0:	89 2f       	mov	r24, r25
    1ea2:	00 0c       	add	r0, r0
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	99 0b       	sbc	r25, r25
    1ea8:	00 0c       	add	r0, r0
    1eaa:	88 1f       	adc	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb2:	80 83       	st	Z, r24
    1eb4:	03 c0       	rjmp	.+6      	; 0x1ebc <Timer_Get_FlagStatus+0x94>
		break;

		default:
		return ERROR_NOK;
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <Timer_Get_FlagStatus+0x96>
	}
	return ERROR_OK;
    1ebc:	1c 82       	std	Y+4, r1	; 0x04
    1ebe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ec0:	26 96       	adiw	r28, 0x06	; 6
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <TIMER_SetCallBack>:

u8_t TIMER_SetCallBack(u8_t Copy_u8_timerChannel,void (*Copy_FunctionAddress)(void))
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <TIMER_SetCallBack+0x6>
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <TIMER_SetCallBack+0x8>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <TIMER_SetCallBack+0xa>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	7b 83       	std	Y+3, r23	; 0x03
    1ee4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_timerChannel)
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	3e 83       	std	Y+6, r19	; 0x06
    1eee:	2d 83       	std	Y+5, r18	; 0x05
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	81 f0       	breq	.+32     	; 0x1f1a <TIMER_SetCallBack+0x48>
    1efa:	2d 81       	ldd	r18, Y+5	; 0x05
    1efc:	3e 81       	ldd	r19, Y+6	; 0x06
    1efe:	22 30       	cpi	r18, 0x02	; 2
    1f00:	31 05       	cpc	r19, r1
    1f02:	91 f0       	breq	.+36     	; 0x1f28 <TIMER_SetCallBack+0x56>
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	a9 f4       	brne	.+42     	; 0x1f36 <TIMER_SetCallBack+0x64>
	{
		case TIMER0:
			TIMER0_FuncPtr = Copy_FunctionAddress;
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f10:	90 93 75 01 	sts	0x0175, r25
    1f14:	80 93 74 01 	sts	0x0174, r24
    1f18:	11 c0       	rjmp	.+34     	; 0x1f3c <TIMER_SetCallBack+0x6a>
			break;

		case TIMER1:
			TIMER1_FuncPtr = Copy_FunctionAddress;
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1e:	90 93 77 01 	sts	0x0177, r25
    1f22:	80 93 76 01 	sts	0x0176, r24
    1f26:	0a c0       	rjmp	.+20     	; 0x1f3c <TIMER_SetCallBack+0x6a>
			break;

		case TIMER2:
			TIMER2_FuncPtr = Copy_FunctionAddress;
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	90 93 79 01 	sts	0x0179, r25
    1f30:	80 93 78 01 	sts	0x0178, r24
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <TIMER_SetCallBack+0x6a>
			break;

		default:
			return ERROR_NOK;
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	9c 83       	std	Y+4, r25	; 0x04
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <TIMER_SetCallBack+0x6c>
	}
	return ERROR_OK;
    1f3c:	1c 82       	std	Y+4, r1	; 0x04
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f40:	26 96       	adiw	r28, 0x06	; 6
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <__vector_11>:

// Timer0 overflow interrupt handler
ISR(__vector_11)
{
    1f52:	1f 92       	push	r1
    1f54:	0f 92       	push	r0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	0f 92       	push	r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	2f 93       	push	r18
    1f5e:	3f 93       	push	r19
    1f60:	4f 93       	push	r20
    1f62:	5f 93       	push	r21
    1f64:	6f 93       	push	r22
    1f66:	7f 93       	push	r23
    1f68:	8f 93       	push	r24
    1f6a:	9f 93       	push	r25
    1f6c:	af 93       	push	r26
    1f6e:	bf 93       	push	r27
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_FuncPtr != 0)
    1f7c:	80 91 74 01 	lds	r24, 0x0174
    1f80:	90 91 75 01 	lds	r25, 0x0175
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	29 f0       	breq	.+10     	; 0x1f92 <__vector_11+0x40>
		TIMER0_FuncPtr();
    1f88:	e0 91 74 01 	lds	r30, 0x0174
    1f8c:	f0 91 75 01 	lds	r31, 0x0175
    1f90:	09 95       	icall
}
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	ff 91       	pop	r31
    1f98:	ef 91       	pop	r30
    1f9a:	bf 91       	pop	r27
    1f9c:	af 91       	pop	r26
    1f9e:	9f 91       	pop	r25
    1fa0:	8f 91       	pop	r24
    1fa2:	7f 91       	pop	r23
    1fa4:	6f 91       	pop	r22
    1fa6:	5f 91       	pop	r21
    1fa8:	4f 91       	pop	r20
    1faa:	3f 91       	pop	r19
    1fac:	2f 91       	pop	r18
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	0f 90       	pop	r0
    1fb4:	1f 90       	pop	r1
    1fb6:	18 95       	reti

00001fb8 <__vector_9>:

// Timer1 overflow interrupt handler
ISR(__vector_9)
{
    1fb8:	1f 92       	push	r1
    1fba:	0f 92       	push	r0
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	0f 92       	push	r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	2f 93       	push	r18
    1fc4:	3f 93       	push	r19
    1fc6:	4f 93       	push	r20
    1fc8:	5f 93       	push	r21
    1fca:	6f 93       	push	r22
    1fcc:	7f 93       	push	r23
    1fce:	8f 93       	push	r24
    1fd0:	9f 93       	push	r25
    1fd2:	af 93       	push	r26
    1fd4:	bf 93       	push	r27
    1fd6:	ef 93       	push	r30
    1fd8:	ff 93       	push	r31
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_FuncPtr != 0)
    1fe2:	80 91 76 01 	lds	r24, 0x0176
    1fe6:	90 91 77 01 	lds	r25, 0x0177
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	29 f0       	breq	.+10     	; 0x1ff8 <__vector_9+0x40>
		TIMER1_FuncPtr();
    1fee:	e0 91 76 01 	lds	r30, 0x0176
    1ff2:	f0 91 77 01 	lds	r31, 0x0177
    1ff6:	09 95       	icall
}
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	ff 91       	pop	r31
    1ffe:	ef 91       	pop	r30
    2000:	bf 91       	pop	r27
    2002:	af 91       	pop	r26
    2004:	9f 91       	pop	r25
    2006:	8f 91       	pop	r24
    2008:	7f 91       	pop	r23
    200a:	6f 91       	pop	r22
    200c:	5f 91       	pop	r21
    200e:	4f 91       	pop	r20
    2010:	3f 91       	pop	r19
    2012:	2f 91       	pop	r18
    2014:	0f 90       	pop	r0
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	0f 90       	pop	r0
    201a:	1f 90       	pop	r1
    201c:	18 95       	reti

0000201e <__vector_5>:

// Timer2 overflow interrupt handler
ISR(__vector_5)
{
    201e:	1f 92       	push	r1
    2020:	0f 92       	push	r0
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	0f 92       	push	r0
    2026:	11 24       	eor	r1, r1
    2028:	2f 93       	push	r18
    202a:	3f 93       	push	r19
    202c:	4f 93       	push	r20
    202e:	5f 93       	push	r21
    2030:	6f 93       	push	r22
    2032:	7f 93       	push	r23
    2034:	8f 93       	push	r24
    2036:	9f 93       	push	r25
    2038:	af 93       	push	r26
    203a:	bf 93       	push	r27
    203c:	ef 93       	push	r30
    203e:	ff 93       	push	r31
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_FuncPtr != 0)
    2048:	80 91 78 01 	lds	r24, 0x0178
    204c:	90 91 79 01 	lds	r25, 0x0179
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	29 f0       	breq	.+10     	; 0x205e <__vector_5+0x40>
		TIMER2_FuncPtr();
    2054:	e0 91 78 01 	lds	r30, 0x0178
    2058:	f0 91 79 01 	lds	r31, 0x0179
    205c:	09 95       	icall

	if(FPWM_Timer2OVFfuncPtr != 0)
    205e:	80 91 7c 01 	lds	r24, 0x017C
    2062:	90 91 7d 01 	lds	r25, 0x017D
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	29 f0       	breq	.+10     	; 0x2074 <__vector_5+0x56>
		FPWM_Timer2OVFfuncPtr();
    206a:	e0 91 7c 01 	lds	r30, 0x017C
    206e:	f0 91 7d 01 	lds	r31, 0x017D
    2072:	09 95       	icall
}
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	ff 91       	pop	r31
    207a:	ef 91       	pop	r30
    207c:	bf 91       	pop	r27
    207e:	af 91       	pop	r26
    2080:	9f 91       	pop	r25
    2082:	8f 91       	pop	r24
    2084:	7f 91       	pop	r23
    2086:	6f 91       	pop	r22
    2088:	5f 91       	pop	r21
    208a:	4f 91       	pop	r20
    208c:	3f 91       	pop	r19
    208e:	2f 91       	pop	r18
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	0f 90       	pop	r0
    2096:	1f 90       	pop	r1
    2098:	18 95       	reti

0000209a <FPWM_TIMER2_INT_Init>:

void (*Timer2CMPfuncPtr) (void) = 0;
void (*FPWM_Timer2OVFfuncPtr) (void) = 0;

FPWM_ERROR_t FPWM_TIMER2_INT_Init(u8_t prescaler)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <FPWM_TIMER2_INT_Init+0x6>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <FPWM_TIMER2_INT_Init+0x8>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
	// timer2 as a fast PWM
	SET_BIT(TCCR2, WGM20);
    20a8:	a5 e4       	ldi	r26, 0x45	; 69
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e5 e4       	ldi	r30, 0x45	; 69
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 64       	ori	r24, 0x40	; 64
    20b4:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    20b6:	a5 e4       	ldi	r26, 0x45	; 69
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e5 e4       	ldi	r30, 0x45	; 69
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	88 60       	ori	r24, 0x08	; 8
    20c2:	8c 93       	st	X, r24

	// timer2 fast pwm select inverting mode
	CLEAR_BIT(TCCR2, COM20);
    20c4:	a5 e4       	ldi	r26, 0x45	; 69
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e5 e4       	ldi	r30, 0x45	; 69
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	8f 7e       	andi	r24, 0xEF	; 239
    20d0:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM21);
    20d2:	a5 e4       	ldi	r26, 0x45	; 69
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e5 e4       	ldi	r30, 0x45	; 69
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	80 62       	ori	r24, 0x20	; 32
    20de:	8c 93       	st	X, r24

	// timer ovf and ctc interrupt enable
	SET_BIT(TIMSK, TOIE2); // TIMER2 ovf int
    20e0:	a9 e5       	ldi	r26, 0x59	; 89
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e9 e5       	ldi	r30, 0x59	; 89
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	80 64       	ori	r24, 0x40	; 64
    20ec:	8c 93       	st	X, r24
	SET_BIT(TIMSK, OCIE2); // TIMER2 ctc int
    20ee:	a9 e5       	ldi	r26, 0x59	; 89
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e9 e5       	ldi	r30, 0x59	; 89
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	8c 93       	st	X, r24

	// Global interrupt enable
	SET_BIT(SREG, 7);
    20fc:	af e5       	ldi	r26, 0x5F	; 95
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	ef e5       	ldi	r30, 0x5F	; 95
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	80 68       	ori	r24, 0x80	; 128
    2108:	8c 93       	st	X, r24

	// PRESCALER
	switch(prescaler)
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	3c 83       	std	Y+4, r19	; 0x04
    2112:	2b 83       	std	Y+3, r18	; 0x03
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <FPWM_TIMER2_INT_Init+0x86>
    211e:	70 c0       	rjmp	.+224    	; 0x2200 <FPWM_TIMER2_INT_Init+0x166>
    2120:	2b 81       	ldd	r18, Y+3	; 0x03
    2122:	3c 81       	ldd	r19, Y+4	; 0x04
    2124:	24 30       	cpi	r18, 0x04	; 4
    2126:	31 05       	cpc	r19, r1
    2128:	84 f4       	brge	.+32     	; 0x214a <FPWM_TIMER2_INT_Init+0xb0>
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 05       	cpc	r25, r1
    2132:	d1 f1       	breq	.+116    	; 0x21a8 <FPWM_TIMER2_INT_Init+0x10e>
    2134:	2b 81       	ldd	r18, Y+3	; 0x03
    2136:	3c 81       	ldd	r19, Y+4	; 0x04
    2138:	22 30       	cpi	r18, 0x02	; 2
    213a:	31 05       	cpc	r19, r1
    213c:	0c f0       	brlt	.+2      	; 0x2140 <FPWM_TIMER2_INT_Init+0xa6>
    213e:	4a c0       	rjmp	.+148    	; 0x21d4 <FPWM_TIMER2_INT_Init+0x13a>
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	d1 f0       	breq	.+52     	; 0x217c <FPWM_TIMER2_INT_Init+0xe2>
    2148:	c9 c0       	rjmp	.+402    	; 0x22dc <FPWM_TIMER2_INT_Init+0x242>
    214a:	2b 81       	ldd	r18, Y+3	; 0x03
    214c:	3c 81       	ldd	r19, Y+4	; 0x04
    214e:	25 30       	cpi	r18, 0x05	; 5
    2150:	31 05       	cpc	r19, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <FPWM_TIMER2_INT_Init+0xbc>
    2154:	81 c0       	rjmp	.+258    	; 0x2258 <FPWM_TIMER2_INT_Init+0x1be>
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	85 30       	cpi	r24, 0x05	; 5
    215c:	91 05       	cpc	r25, r1
    215e:	0c f4       	brge	.+2      	; 0x2162 <FPWM_TIMER2_INT_Init+0xc8>
    2160:	65 c0       	rjmp	.+202    	; 0x222c <FPWM_TIMER2_INT_Init+0x192>
    2162:	2b 81       	ldd	r18, Y+3	; 0x03
    2164:	3c 81       	ldd	r19, Y+4	; 0x04
    2166:	26 30       	cpi	r18, 0x06	; 6
    2168:	31 05       	cpc	r19, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <FPWM_TIMER2_INT_Init+0xd4>
    216c:	8b c0       	rjmp	.+278    	; 0x2284 <FPWM_TIMER2_INT_Init+0x1ea>
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	87 30       	cpi	r24, 0x07	; 7
    2174:	91 05       	cpc	r25, r1
    2176:	09 f4       	brne	.+2      	; 0x217a <FPWM_TIMER2_INT_Init+0xe0>
    2178:	9b c0       	rjmp	.+310    	; 0x22b0 <FPWM_TIMER2_INT_Init+0x216>
    217a:	b0 c0       	rjmp	.+352    	; 0x22dc <FPWM_TIMER2_INT_Init+0x242>
	{
		case NO_CLOCK_FPWM2:
			CLEAR_BIT(TCCR2, CS20);
    217c:	a5 e4       	ldi	r26, 0x45	; 69
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e4       	ldi	r30, 0x45	; 69
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8e 7f       	andi	r24, 0xFE	; 254
    2188:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS21);
    218a:	a5 e4       	ldi	r26, 0x45	; 69
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e5 e4       	ldi	r30, 0x45	; 69
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	8d 7f       	andi	r24, 0xFD	; 253
    2196:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS22);
    2198:	a5 e4       	ldi	r26, 0x45	; 69
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e5 e4       	ldi	r30, 0x45	; 69
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8b 7f       	andi	r24, 0xFB	; 251
    21a4:	8c 93       	st	X, r24
    21a6:	9d c0       	rjmp	.+314    	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		case F_CPU_CLOCK_FPWM2:
			SET_BIT(TCCR2, CS20);
    21a8:	a5 e4       	ldi	r26, 0x45	; 69
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e5 e4       	ldi	r30, 0x45	; 69
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	81 60       	ori	r24, 0x01	; 1
    21b4:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS21);
    21b6:	a5 e4       	ldi	r26, 0x45	; 69
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e5 e4       	ldi	r30, 0x45	; 69
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8d 7f       	andi	r24, 0xFD	; 253
    21c2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS22);
    21c4:	a5 e4       	ldi	r26, 0x45	; 69
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e5 e4       	ldi	r30, 0x45	; 69
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	8b 7f       	andi	r24, 0xFB	; 251
    21d0:	8c 93       	st	X, r24
    21d2:	87 c0       	rjmp	.+270    	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		case F_CPU_CLOCK_8_FPWM2:
			CLEAR_BIT(TCCR2, CS20);
    21d4:	a5 e4       	ldi	r26, 0x45	; 69
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e5 e4       	ldi	r30, 0x45	; 69
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	8e 7f       	andi	r24, 0xFE	; 254
    21e0:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS21);
    21e2:	a5 e4       	ldi	r26, 0x45	; 69
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e5 e4       	ldi	r30, 0x45	; 69
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	82 60       	ori	r24, 0x02	; 2
    21ee:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS22);
    21f0:	a5 e4       	ldi	r26, 0x45	; 69
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e4       	ldi	r30, 0x45	; 69
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8b 7f       	andi	r24, 0xFB	; 251
    21fc:	8c 93       	st	X, r24
    21fe:	71 c0       	rjmp	.+226    	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		case F_CPU_CLOCK_32_FPWM2:
			SET_BIT(TCCR2, CS20);
    2200:	a5 e4       	ldi	r26, 0x45	; 69
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e5 e4       	ldi	r30, 0x45	; 69
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	81 60       	ori	r24, 0x01	; 1
    220c:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS21);
    220e:	a5 e4       	ldi	r26, 0x45	; 69
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e5 e4       	ldi	r30, 0x45	; 69
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	82 60       	ori	r24, 0x02	; 2
    221a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS22);
    221c:	a5 e4       	ldi	r26, 0x45	; 69
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e5 e4       	ldi	r30, 0x45	; 69
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8b 7f       	andi	r24, 0xFB	; 251
    2228:	8c 93       	st	X, r24
    222a:	5b c0       	rjmp	.+182    	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		case F_CPU_CLOCK_64_FPWM2:
			CLEAR_BIT(TCCR2, CS20);
    222c:	a5 e4       	ldi	r26, 0x45	; 69
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e5 e4       	ldi	r30, 0x45	; 69
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8e 7f       	andi	r24, 0xFE	; 254
    2238:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS21);
    223a:	a5 e4       	ldi	r26, 0x45	; 69
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e5 e4       	ldi	r30, 0x45	; 69
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	8d 7f       	andi	r24, 0xFD	; 253
    2246:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS22);
    2248:	a5 e4       	ldi	r26, 0x45	; 69
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e5 e4       	ldi	r30, 0x45	; 69
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	84 60       	ori	r24, 0x04	; 4
    2254:	8c 93       	st	X, r24
    2256:	45 c0       	rjmp	.+138    	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		case F_CPU_CLOCK_128_FPWM2:
			SET_BIT(TCCR2, CS20);
    2258:	a5 e4       	ldi	r26, 0x45	; 69
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e5 e4       	ldi	r30, 0x45	; 69
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	81 60       	ori	r24, 0x01	; 1
    2264:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2, CS21);
    2266:	a5 e4       	ldi	r26, 0x45	; 69
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e5 e4       	ldi	r30, 0x45	; 69
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8d 7f       	andi	r24, 0xFD	; 253
    2272:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS22);
    2274:	a5 e4       	ldi	r26, 0x45	; 69
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e5 e4       	ldi	r30, 0x45	; 69
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	84 60       	ori	r24, 0x04	; 4
    2280:	8c 93       	st	X, r24
    2282:	2f c0       	rjmp	.+94     	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		case F_CPU_CLOCK_256_FPWM2:
			CLEAR_BIT(TCCR2, CS20);
    2284:	a5 e4       	ldi	r26, 0x45	; 69
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e5 e4       	ldi	r30, 0x45	; 69
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	8e 7f       	andi	r24, 0xFE	; 254
    2290:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS21);
    2292:	a5 e4       	ldi	r26, 0x45	; 69
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e5 e4       	ldi	r30, 0x45	; 69
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS22);
    22a0:	a5 e4       	ldi	r26, 0x45	; 69
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e5 e4       	ldi	r30, 0x45	; 69
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	84 60       	ori	r24, 0x04	; 4
    22ac:	8c 93       	st	X, r24
    22ae:	19 c0       	rjmp	.+50     	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		case F_CPU_CLOCK_1024_FPWM2:
			SET_BIT(TCCR2, CS20);
    22b0:	a5 e4       	ldi	r26, 0x45	; 69
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e5 e4       	ldi	r30, 0x45	; 69
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	81 60       	ori	r24, 0x01	; 1
    22bc:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS21);
    22be:	a5 e4       	ldi	r26, 0x45	; 69
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e4       	ldi	r30, 0x45	; 69
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	82 60       	ori	r24, 0x02	; 2
    22ca:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS22);
    22cc:	a5 e4       	ldi	r26, 0x45	; 69
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e5 e4       	ldi	r30, 0x45	; 69
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	84 60       	ori	r24, 0x04	; 4
    22d8:	8c 93       	st	X, r24
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <FPWM_TIMER2_INT_Init+0x248>
			break;

		default:
			return FPWM_E_NOK;
    22dc:	91 e0       	ldi	r25, 0x01	; 1
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <FPWM_TIMER2_INT_Init+0x24a>
	}

	return FPWM_E_OK;
    22e2:	1a 82       	std	Y+2, r1	; 0x02
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <FPWM_TIMER2_INT_setDutyCycle>:

FPWM_ERROR_t FPWM_TIMER2_INT_setDutyCycle(u8_t dutyCycle)
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <FPWM_TIMER2_INT_setDutyCycle+0x6>
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <FPWM_TIMER2_INT_setDutyCycle+0x8>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	8b 83       	std	Y+3, r24	; 0x03
	if(dutyCycle < 0 || dutyCycle > 100)
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	85 36       	cpi	r24, 0x65	; 101
    2306:	18 f0       	brcs	.+6      	; 0x230e <FPWM_TIMER2_INT_setDutyCycle+0x1a>
		return FPWM_E_NOK;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	8c 83       	std	Y+4, r24	; 0x04
    230c:	3f c0       	rjmp	.+126    	; 0x238c <FPWM_TIMER2_INT_setDutyCycle+0x98>

	u16_t value = (FPWM_TIMER2_OVERFLOW - (FPWM_TIMER2_OVERFLOW * ((float)dutyCycle/100)));
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a0 e0       	ldi	r26, 0x00	; 0
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	48 ec       	ldi	r20, 0xC8	; 200
    232e:	52 e4       	ldi	r21, 0x42	; 66
    2330:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e8       	ldi	r20, 0x80	; 128
    2342:	53 ec       	ldi	r21, 0xC3	; 195
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	53 e4       	ldi	r21, 0x43	; 67
    2358:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01

	if(value == 0)
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	29 f4       	brne	.+10     	; 0x2382 <FPWM_TIMER2_INT_setDutyCycle+0x8e>
		OCR2 = 1; // 100% Duty cycle
    2378:	e3 e4       	ldi	r30, 0x43	; 67
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 83       	st	Z, r24
    2380:	04 c0       	rjmp	.+8      	; 0x238a <FPWM_TIMER2_INT_setDutyCycle+0x96>
	else
		OCR2 = value; // a specific duty cycle rather than 100%
    2382:	e3 e4       	ldi	r30, 0x43	; 67
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	80 83       	st	Z, r24

	return FPWM_E_OK;
    238a:	1c 82       	std	Y+4, r1	; 0x04
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <FPWM_TIMER2_INT_setCallBack>:

void FPWM_TIMER2_INT_setCallBack(void (*deviceOnFuncPtr) (void), void (*deviceOffFuncPtr) (void))
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <FPWM_TIMER2_INT_setCallBack+0x6>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <FPWM_TIMER2_INT_setCallBack+0x8>
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	7c 83       	std	Y+4, r23	; 0x04
    23ae:	6b 83       	std	Y+3, r22	; 0x03
	Timer2CMPfuncPtr = deviceOnFuncPtr;
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	90 93 7b 01 	sts	0x017B, r25
    23b8:	80 93 7a 01 	sts	0x017A, r24
	FPWM_Timer2OVFfuncPtr = deviceOffFuncPtr;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	90 93 7d 01 	sts	0x017D, r25
    23c4:	80 93 7c 01 	sts	0x017C, r24
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <__vector_4>:

// Timer2 CTC Interrupt
ISR(__vector_4)
{
    23d6:	1f 92       	push	r1
    23d8:	0f 92       	push	r0
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	0f 92       	push	r0
    23de:	11 24       	eor	r1, r1
    23e0:	2f 93       	push	r18
    23e2:	3f 93       	push	r19
    23e4:	4f 93       	push	r20
    23e6:	5f 93       	push	r21
    23e8:	6f 93       	push	r22
    23ea:	7f 93       	push	r23
    23ec:	8f 93       	push	r24
    23ee:	9f 93       	push	r25
    23f0:	af 93       	push	r26
    23f2:	bf 93       	push	r27
    23f4:	ef 93       	push	r30
    23f6:	ff 93       	push	r31
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
	if(Timer2CMPfuncPtr != 0)
    2400:	80 91 7a 01 	lds	r24, 0x017A
    2404:	90 91 7b 01 	lds	r25, 0x017B
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	29 f0       	breq	.+10     	; 0x2416 <__vector_4+0x40>
		Timer2CMPfuncPtr();
    240c:	e0 91 7a 01 	lds	r30, 0x017A
    2410:	f0 91 7b 01 	lds	r31, 0x017B
    2414:	09 95       	icall
}
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <GLOBALInt_enable>:
void (*EXTINT0_CallBackPtr) (void) = NULL;
void (*EXTINT1_CallBackPtr) (void) = NULL;
void (*EXTINT2_CallBackPtr) (void) = NULL;

void GLOBALInt_enable()
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(STATUS_REGISTER, GIE);
    2444:	af e5       	ldi	r26, 0x5F	; 95
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	ef e5       	ldi	r30, 0x5F	; 95
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	80 68       	ori	r24, 0x80	; 128
    2450:	8c 93       	st	X, r24
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <GLOBALInt_disbable>:

// disables the global interrupt bit in status register
void GLOBALInt_disbable()
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(STATUS_REGISTER, GIE);
    2460:	af e5       	ldi	r26, 0x5F	; 95
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ef e5       	ldi	r30, 0x5F	; 95
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	8f 77       	andi	r24, 0x7F	; 127
    246c:	8c 93       	st	X, r24
}
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <EXTInt_enable>:

EXTINT_Error_t EXTInt_enable(EXTINT_Channel_t Channel)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <EXTInt_enable+0x6>
    247a:	00 d0       	rcall	.+0      	; 0x247c <EXTInt_enable+0x8>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	89 83       	std	Y+1, r24	; 0x01
	// Switching the external interrupt peripheral
	switch(Channel)
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	3c 83       	std	Y+4, r19	; 0x04
    248a:	2b 83       	std	Y+3, r18	; 0x03
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	91 05       	cpc	r25, r1
    2494:	89 f0       	breq	.+34     	; 0x24b8 <EXTInt_enable+0x44>
    2496:	2b 81       	ldd	r18, Y+3	; 0x03
    2498:	3c 81       	ldd	r19, Y+4	; 0x04
    249a:	22 30       	cpi	r18, 0x02	; 2
    249c:	31 05       	cpc	r19, r1
    249e:	a1 f0       	breq	.+40     	; 0x24c8 <EXTInt_enable+0x54>
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	c1 f4       	brne	.+48     	; 0x24d8 <EXTInt_enable+0x64>
	{
		case EXT_INT0:
		// setting the int0 bit in the general interrupt control register to 1
		SET_BIT(GICR, INT0);
    24a8:	ab e5       	ldi	r26, 0x5B	; 91
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	eb e5       	ldi	r30, 0x5B	; 91
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	80 64       	ori	r24, 0x40	; 64
    24b4:	8c 93       	st	X, r24
    24b6:	12 c0       	rjmp	.+36     	; 0x24dc <EXTInt_enable+0x68>
		break;
		case EXT_INT1:
		// setting the int1 bit in the general interrupt control register to 1
		SET_BIT(GICR, INT1);
    24b8:	ab e5       	ldi	r26, 0x5B	; 91
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	eb e5       	ldi	r30, 0x5B	; 91
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 68       	ori	r24, 0x80	; 128
    24c4:	8c 93       	st	X, r24
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <EXTInt_enable+0x68>
		break;
		case EXT_INT2:
		// setting the int2 bit in the general interrupt control register to 1
		SET_BIT(GICR, INT2);
    24c8:	ab e5       	ldi	r26, 0x5B	; 91
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	eb e5       	ldi	r30, 0x5B	; 91
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	80 62       	ori	r24, 0x20	; 32
    24d4:	8c 93       	st	X, r24
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <EXTInt_enable+0x68>
		break;
		default:
		// error handling
		return EXTINT_E_NOK;
    24d8:	1a 82       	std	Y+2, r1	; 0x02
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <EXTInt_enable+0x6c>
	}
	return EXTINT_E_OK;
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <EXTInt_disable>:

EXTINT_Error_t EXTInt_disable(EXTINT_Channel_t Channel)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	00 d0       	rcall	.+0      	; 0x24f6 <EXTInt_disable+0x6>
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <EXTInt_disable+0x8>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	89 83       	std	Y+1, r24	; 0x01
	// Switching the external interrupt peripheral
	switch(Channel)
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	3c 83       	std	Y+4, r19	; 0x04
    2506:	2b 83       	std	Y+3, r18	; 0x03
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	81 30       	cpi	r24, 0x01	; 1
    250e:	91 05       	cpc	r25, r1
    2510:	89 f0       	breq	.+34     	; 0x2534 <EXTInt_disable+0x44>
    2512:	2b 81       	ldd	r18, Y+3	; 0x03
    2514:	3c 81       	ldd	r19, Y+4	; 0x04
    2516:	22 30       	cpi	r18, 0x02	; 2
    2518:	31 05       	cpc	r19, r1
    251a:	a1 f0       	breq	.+40     	; 0x2544 <EXTInt_disable+0x54>
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	9c 81       	ldd	r25, Y+4	; 0x04
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	c1 f4       	brne	.+48     	; 0x2554 <EXTInt_disable+0x64>
	{
		case EXT_INT0:
		// setting the int0 bit in the general interrupt control register to 0
		CLEAR_BIT(GICR, INT0);
    2524:	ab e5       	ldi	r26, 0x5B	; 91
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	eb e5       	ldi	r30, 0x5B	; 91
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8f 7b       	andi	r24, 0xBF	; 191
    2530:	8c 93       	st	X, r24
    2532:	12 c0       	rjmp	.+36     	; 0x2558 <EXTInt_disable+0x68>
		break;
		case EXT_INT1:
		// setting the int1 bit in the general interrupt control register to 0
		CLEAR_BIT(GICR, INT1);
    2534:	ab e5       	ldi	r26, 0x5B	; 91
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	eb e5       	ldi	r30, 0x5B	; 91
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	8f 77       	andi	r24, 0x7F	; 127
    2540:	8c 93       	st	X, r24
    2542:	0a c0       	rjmp	.+20     	; 0x2558 <EXTInt_disable+0x68>
		break;
		case EXT_INT2:
		// setting the int2 bit in the general interrupt control register to 0
		CLEAR_BIT(GICR, INT2);
    2544:	ab e5       	ldi	r26, 0x5B	; 91
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	eb e5       	ldi	r30, 0x5B	; 91
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	8f 7d       	andi	r24, 0xDF	; 223
    2550:	8c 93       	st	X, r24
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <EXTInt_disable+0x68>
		break;
		default:
		// error handling
		return EXTINT_E_NOK;
    2554:	1a 82       	std	Y+2, r1	; 0x02
    2556:	02 c0       	rjmp	.+4      	; 0x255c <EXTInt_disable+0x6c>
	}
	return EXTINT_E_OK;
    2558:	91 e0       	ldi	r25, 0x01	; 1
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <EXTInt_Mode>:

EXTINT_Error_t EXTInt_Mode(EXTINT_Channel_t Channel, EXTINT_Mode_t Mode)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	2b 97       	sbiw	r28, 0x0b	; 11
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	6a 83       	std	Y+2, r22	; 0x02
	// Switching the external interrupt peripheral
	switch(Channel)
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	3b 87       	std	Y+11, r19	; 0x0b
    258c:	2a 87       	std	Y+10, r18	; 0x0a
    258e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2590:	9b 85       	ldd	r25, Y+11	; 0x0b
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	91 05       	cpc	r25, r1
    2596:	09 f4       	brne	.+2      	; 0x259a <EXTInt_Mode+0x2e>
    2598:	68 c0       	rjmp	.+208    	; 0x266a <EXTInt_Mode+0xfe>
    259a:	2a 85       	ldd	r18, Y+10	; 0x0a
    259c:	3b 85       	ldd	r19, Y+11	; 0x0b
    259e:	22 30       	cpi	r18, 0x02	; 2
    25a0:	31 05       	cpc	r19, r1
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <EXTInt_Mode+0x3a>
    25a4:	bf c0       	rjmp	.+382    	; 0x2724 <EXTInt_Mode+0x1b8>
    25a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <EXTInt_Mode+0x44>
    25ae:	dc c0       	rjmp	.+440    	; 0x2768 <EXTInt_Mode+0x1fc>
	{
		case EXT_INT0:
		switch(Mode)
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	39 87       	std	Y+9, r19	; 0x09
    25b8:	28 87       	std	Y+8, r18	; 0x08
    25ba:	88 85       	ldd	r24, Y+8	; 0x08
    25bc:	99 85       	ldd	r25, Y+9	; 0x09
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	91 05       	cpc	r25, r1
    25c2:	21 f1       	breq	.+72     	; 0x260c <EXTInt_Mode+0xa0>
    25c4:	28 85       	ldd	r18, Y+8	; 0x08
    25c6:	39 85       	ldd	r19, Y+9	; 0x09
    25c8:	22 30       	cpi	r18, 0x02	; 2
    25ca:	31 05       	cpc	r19, r1
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <EXTInt_Mode+0x6c>
    25ce:	88 85       	ldd	r24, Y+8	; 0x08
    25d0:	99 85       	ldd	r25, Y+9	; 0x09
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	61 f0       	breq	.+24     	; 0x25ee <EXTInt_Mode+0x82>
    25d6:	47 c0       	rjmp	.+142    	; 0x2666 <EXTInt_Mode+0xfa>
    25d8:	28 85       	ldd	r18, Y+8	; 0x08
    25da:	39 85       	ldd	r19, Y+9	; 0x09
    25dc:	22 30       	cpi	r18, 0x02	; 2
    25de:	31 05       	cpc	r19, r1
    25e0:	21 f1       	breq	.+72     	; 0x262a <EXTInt_Mode+0xbe>
    25e2:	88 85       	ldd	r24, Y+8	; 0x08
    25e4:	99 85       	ldd	r25, Y+9	; 0x09
    25e6:	83 30       	cpi	r24, 0x03	; 3
    25e8:	91 05       	cpc	r25, r1
    25ea:	71 f1       	breq	.+92     	; 0x2648 <EXTInt_Mode+0xdc>
    25ec:	3c c0       	rjmp	.+120    	; 0x2666 <EXTInt_Mode+0xfa>
		{
			// Low level mode for EXT_INT0
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR, ISC00);
    25ee:	a5 e5       	ldi	r26, 0x55	; 85
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e5 e5       	ldi	r30, 0x55	; 85
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8e 7f       	andi	r24, 0xFE	; 254
    25fa:	8c 93       	st	X, r24
			//setting ISC01 bit to zero in the MCU register
			CLEAR_BIT(MCUCR, ISC01);
    25fc:	a5 e5       	ldi	r26, 0x55	; 85
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e5 e5       	ldi	r30, 0x55	; 85
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	8d 7f       	andi	r24, 0xFD	; 253
    2608:	8c 93       	st	X, r24
    260a:	b0 c0       	rjmp	.+352    	; 0x276c <EXTInt_Mode+0x200>
			break;
			// Logical change mode for EXT_INT0
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR, ISC00);
    260c:	a5 e5       	ldi	r26, 0x55	; 85
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e5 e5       	ldi	r30, 0x55	; 85
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	81 60       	ori	r24, 0x01	; 1
    2618:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR, ISC01);
    261a:	a5 e5       	ldi	r26, 0x55	; 85
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e5 e5       	ldi	r30, 0x55	; 85
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8d 7f       	andi	r24, 0xFD	; 253
    2626:	8c 93       	st	X, r24
    2628:	a1 c0       	rjmp	.+322    	; 0x276c <EXTInt_Mode+0x200>
			break;
			// Falling edge mode for EXT_INT0
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR, ISC00);
    262a:	a5 e5       	ldi	r26, 0x55	; 85
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e5 e5       	ldi	r30, 0x55	; 85
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	8e 7f       	andi	r24, 0xFE	; 254
    2636:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC01);
    2638:	a5 e5       	ldi	r26, 0x55	; 85
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e5 e5       	ldi	r30, 0x55	; 85
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	82 60       	ori	r24, 0x02	; 2
    2644:	8c 93       	st	X, r24
    2646:	92 c0       	rjmp	.+292    	; 0x276c <EXTInt_Mode+0x200>
			break;
			// Rising edge mode for EXT_INT0
			case RISING_EDGE:
			SET_BIT(MCUCR, ISC00);
    2648:	a5 e5       	ldi	r26, 0x55	; 85
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e5 e5       	ldi	r30, 0x55	; 85
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	81 60       	ori	r24, 0x01	; 1
    2654:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC01);
    2656:	a5 e5       	ldi	r26, 0x55	; 85
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e5 e5       	ldi	r30, 0x55	; 85
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	82 60       	ori	r24, 0x02	; 2
    2662:	8c 93       	st	X, r24
    2664:	83 c0       	rjmp	.+262    	; 0x276c <EXTInt_Mode+0x200>
			break;
			default:
			return EXTINT_E_NOK;
    2666:	1f 82       	std	Y+7, r1	; 0x07
    2668:	83 c0       	rjmp	.+262    	; 0x2770 <EXTInt_Mode+0x204>
		}
		break;
		case EXT_INT1:
		switch(Mode)
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	3e 83       	std	Y+6, r19	; 0x06
    2672:	2d 83       	std	Y+5, r18	; 0x05
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    2678:	81 30       	cpi	r24, 0x01	; 1
    267a:	91 05       	cpc	r25, r1
    267c:	21 f1       	breq	.+72     	; 0x26c6 <EXTInt_Mode+0x15a>
    267e:	2d 81       	ldd	r18, Y+5	; 0x05
    2680:	3e 81       	ldd	r19, Y+6	; 0x06
    2682:	22 30       	cpi	r18, 0x02	; 2
    2684:	31 05       	cpc	r19, r1
    2686:	2c f4       	brge	.+10     	; 0x2692 <EXTInt_Mode+0x126>
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	61 f0       	breq	.+24     	; 0x26a8 <EXTInt_Mode+0x13c>
    2690:	47 c0       	rjmp	.+142    	; 0x2720 <EXTInt_Mode+0x1b4>
    2692:	2d 81       	ldd	r18, Y+5	; 0x05
    2694:	3e 81       	ldd	r19, Y+6	; 0x06
    2696:	22 30       	cpi	r18, 0x02	; 2
    2698:	31 05       	cpc	r19, r1
    269a:	21 f1       	breq	.+72     	; 0x26e4 <EXTInt_Mode+0x178>
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	83 30       	cpi	r24, 0x03	; 3
    26a2:	91 05       	cpc	r25, r1
    26a4:	71 f1       	breq	.+92     	; 0x2702 <EXTInt_Mode+0x196>
    26a6:	3c c0       	rjmp	.+120    	; 0x2720 <EXTInt_Mode+0x1b4>
		{
			// Low level mode for EXT_INT1
			case LOW_LEVEL:
			//setting ISC10 bit to zero in the MCU register
			CLEAR_BIT(MCUCR, ISC10);
    26a8:	a5 e5       	ldi	r26, 0x55	; 85
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e5 e5       	ldi	r30, 0x55	; 85
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	8b 7f       	andi	r24, 0xFB	; 251
    26b4:	8c 93       	st	X, r24
			//setting ISC11 bit to zero in the MCU register
			CLEAR_BIT(MCUCR, ISC11);
    26b6:	a5 e5       	ldi	r26, 0x55	; 85
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e5 e5       	ldi	r30, 0x55	; 85
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	87 7f       	andi	r24, 0xF7	; 247
    26c2:	8c 93       	st	X, r24
    26c4:	53 c0       	rjmp	.+166    	; 0x276c <EXTInt_Mode+0x200>
			break;
			// Logical change mode for EXT_INT0
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR, ISC10);
    26c6:	a5 e5       	ldi	r26, 0x55	; 85
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e5 e5       	ldi	r30, 0x55	; 85
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	84 60       	ori	r24, 0x04	; 4
    26d2:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR, ISC11);
    26d4:	a5 e5       	ldi	r26, 0x55	; 85
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e5 e5       	ldi	r30, 0x55	; 85
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	87 7f       	andi	r24, 0xF7	; 247
    26e0:	8c 93       	st	X, r24
    26e2:	44 c0       	rjmp	.+136    	; 0x276c <EXTInt_Mode+0x200>
			break;
			// Falling edge mode for EXT_INT0
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR, ISC10);
    26e4:	a5 e5       	ldi	r26, 0x55	; 85
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e5 e5       	ldi	r30, 0x55	; 85
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	8b 7f       	andi	r24, 0xFB	; 251
    26f0:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC11);
    26f2:	a5 e5       	ldi	r26, 0x55	; 85
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e5 e5       	ldi	r30, 0x55	; 85
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	88 60       	ori	r24, 0x08	; 8
    26fe:	8c 93       	st	X, r24
    2700:	35 c0       	rjmp	.+106    	; 0x276c <EXTInt_Mode+0x200>
			break;
			// Rising edge mode for EXT_INT0
			case RISING_EDGE:
			SET_BIT(MCUCR, ISC10);
    2702:	a5 e5       	ldi	r26, 0x55	; 85
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e5 e5       	ldi	r30, 0x55	; 85
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	84 60       	ori	r24, 0x04	; 4
    270e:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC11);
    2710:	a5 e5       	ldi	r26, 0x55	; 85
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e5 e5       	ldi	r30, 0x55	; 85
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	88 60       	ori	r24, 0x08	; 8
    271c:	8c 93       	st	X, r24
    271e:	26 c0       	rjmp	.+76     	; 0x276c <EXTInt_Mode+0x200>
			break;
			default:
			return EXTINT_E_NOK;
    2720:	1f 82       	std	Y+7, r1	; 0x07
    2722:	26 c0       	rjmp	.+76     	; 0x2770 <EXTInt_Mode+0x204>
		}
		break;
		case EXT_INT2:
		switch(Mode)
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	3c 83       	std	Y+4, r19	; 0x04
    272c:	2b 83       	std	Y+3, r18	; 0x03
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	91 05       	cpc	r25, r1
    2736:	31 f0       	breq	.+12     	; 0x2744 <EXTInt_Mode+0x1d8>
    2738:	2b 81       	ldd	r18, Y+3	; 0x03
    273a:	3c 81       	ldd	r19, Y+4	; 0x04
    273c:	23 30       	cpi	r18, 0x03	; 3
    273e:	31 05       	cpc	r19, r1
    2740:	49 f0       	breq	.+18     	; 0x2754 <EXTInt_Mode+0x1e8>
    2742:	10 c0       	rjmp	.+32     	; 0x2764 <EXTInt_Mode+0x1f8>
		{
			// Falling edge mode for EXT_INT0
			case FALLING_EDGE:
			// setting the ISC2 bit in MCUCSR register to zero
			CLEAR_BIT(MCUCSR, ISC2);
    2744:	a4 e5       	ldi	r26, 0x54	; 84
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e4 e5       	ldi	r30, 0x54	; 84
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	8f 7b       	andi	r24, 0xBF	; 191
    2750:	8c 93       	st	X, r24
    2752:	0c c0       	rjmp	.+24     	; 0x276c <EXTInt_Mode+0x200>
			break;
			// Rising edge mode for EXT_INT0
			case RISING_EDGE:
			// setting the ISC2 bit in MCUCSR register to one
			SET_BIT(MCUCSR, ISC2);
    2754:	a4 e5       	ldi	r26, 0x54	; 84
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e4 e5       	ldi	r30, 0x54	; 84
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	80 64       	ori	r24, 0x40	; 64
    2760:	8c 93       	st	X, r24
    2762:	04 c0       	rjmp	.+8      	; 0x276c <EXTInt_Mode+0x200>
			break;
			default:
			return EXTINT_E_NOK;
    2764:	1f 82       	std	Y+7, r1	; 0x07
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <EXTInt_Mode+0x204>
		}
		break;
		default:
		// error handling
		return EXTINT_E_NOK;
    2768:	1f 82       	std	Y+7, r1	; 0x07
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <EXTInt_Mode+0x204>
	}
	return EXTINT_E_OK;
    276c:	31 e0       	ldi	r19, 0x01	; 1
    276e:	3f 83       	std	Y+7, r19	; 0x07
    2770:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2772:	2b 96       	adiw	r28, 0x0b	; 11
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <EXTInt_setCallBack>:

EXTINT_Error_t EXTInt_setCallBack(EXTINT_Channel_t Channel, void (*funcPtr) (void))
{
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	00 d0       	rcall	.+0      	; 0x278a <EXTInt_setCallBack+0x6>
    278a:	00 d0       	rcall	.+0      	; 0x278c <EXTInt_setCallBack+0x8>
    278c:	00 d0       	rcall	.+0      	; 0x278e <EXTInt_setCallBack+0xa>
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	7b 83       	std	Y+3, r23	; 0x03
    2796:	6a 83       	std	Y+2, r22	; 0x02
	// return if null
	if(funcPtr == 0)
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	9b 81       	ldd	r25, Y+3	; 0x03
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	11 f4       	brne	.+4      	; 0x27a4 <EXTInt_setCallBack+0x20>
	{
		return EXTINT_E_NOK;
    27a0:	1e 82       	std	Y+6, r1	; 0x06
    27a2:	2c c0       	rjmp	.+88     	; 0x27fc <EXTInt_setCallBack+0x78>
	}

	switch(Channel)
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	3d 83       	std	Y+5, r19	; 0x05
    27ac:	2c 83       	std	Y+4, r18	; 0x04
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	9d 81       	ldd	r25, Y+5	; 0x05
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	91 05       	cpc	r25, r1
    27b6:	81 f0       	breq	.+32     	; 0x27d8 <EXTInt_setCallBack+0x54>
    27b8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ba:	3d 81       	ldd	r19, Y+5	; 0x05
    27bc:	22 30       	cpi	r18, 0x02	; 2
    27be:	31 05       	cpc	r19, r1
    27c0:	91 f0       	breq	.+36     	; 0x27e6 <EXTInt_setCallBack+0x62>
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	9d 81       	ldd	r25, Y+5	; 0x05
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	a9 f4       	brne	.+42     	; 0x27f4 <EXTInt_setCallBack+0x70>
	{
		case EXT_INT0:
		EXTINT0_CallBackPtr = funcPtr;
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	90 93 7f 01 	sts	0x017F, r25
    27d2:	80 93 7e 01 	sts	0x017E, r24
    27d6:	10 c0       	rjmp	.+32     	; 0x27f8 <EXTInt_setCallBack+0x74>
		break;
		case EXT_INT1:
		EXTINT1_CallBackPtr = funcPtr;
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	9b 81       	ldd	r25, Y+3	; 0x03
    27dc:	90 93 81 01 	sts	0x0181, r25
    27e0:	80 93 80 01 	sts	0x0180, r24
    27e4:	09 c0       	rjmp	.+18     	; 0x27f8 <EXTInt_setCallBack+0x74>
		break;
		case EXT_INT2:
		EXTINT2_CallBackPtr = funcPtr;
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	90 93 83 01 	sts	0x0183, r25
    27ee:	80 93 82 01 	sts	0x0182, r24
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <EXTInt_setCallBack+0x74>
		break;
		default:
		return EXTINT_E_NOK;
    27f4:	1e 82       	std	Y+6, r1	; 0x06
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <EXTInt_setCallBack+0x78>
	}
	return EXTINT_E_OK;
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    27fe:	26 96       	adiw	r28, 0x06	; 6
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <checkGlobalInterrupt>:

// safety function
void checkGlobalInterrupt()
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
	if(!GET_BIT(STATUS_REGISTER, GIE))
    2818:	ef e5       	ldi	r30, 0x5F	; 95
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	88 1f       	adc	r24, r24
    2820:	88 27       	eor	r24, r24
    2822:	88 1f       	adc	r24, r24
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	90 70       	andi	r25, 0x00	; 0
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	39 f4       	brne	.+14     	; 0x283c <checkGlobalInterrupt+0x2c>
		SET_BIT(STATUS_REGISTER, GIE);
    282e:	af e5       	ldi	r26, 0x5F	; 95
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ef e5       	ldi	r30, 0x5F	; 95
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	80 68       	ori	r24, 0x80	; 128
    283a:	8c 93       	st	X, r24
}
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <__vector_1>:

// EXT_INT0 handler
// CPU will call the ISR automatic when the interrupt happens
ISR(__vector_1) // from avr interrupt.h
{
    2842:	1f 92       	push	r1
    2844:	0f 92       	push	r0
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	0f 92       	push	r0
    284a:	11 24       	eor	r1, r1
    284c:	2f 93       	push	r18
    284e:	3f 93       	push	r19
    2850:	4f 93       	push	r20
    2852:	5f 93       	push	r21
    2854:	6f 93       	push	r22
    2856:	7f 93       	push	r23
    2858:	8f 93       	push	r24
    285a:	9f 93       	push	r25
    285c:	af 93       	push	r26
    285e:	bf 93       	push	r27
    2860:	ef 93       	push	r30
    2862:	ff 93       	push	r31
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT0_CallBackPtr != 0)
    286c:	80 91 7e 01 	lds	r24, 0x017E
    2870:	90 91 7f 01 	lds	r25, 0x017F
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	29 f0       	breq	.+10     	; 0x2882 <__vector_1+0x40>
	{
		EXTINT0_CallBackPtr();
    2878:	e0 91 7e 01 	lds	r30, 0x017E
    287c:	f0 91 7f 01 	lds	r31, 0x017F
    2880:	09 95       	icall
	}
}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	ff 91       	pop	r31
    2888:	ef 91       	pop	r30
    288a:	bf 91       	pop	r27
    288c:	af 91       	pop	r26
    288e:	9f 91       	pop	r25
    2890:	8f 91       	pop	r24
    2892:	7f 91       	pop	r23
    2894:	6f 91       	pop	r22
    2896:	5f 91       	pop	r21
    2898:	4f 91       	pop	r20
    289a:	3f 91       	pop	r19
    289c:	2f 91       	pop	r18
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	0f 90       	pop	r0
    28a4:	1f 90       	pop	r1
    28a6:	18 95       	reti

000028a8 <__vector_2>:

// EXT_INT1 handler
ISR(__vector_2)
{
    28a8:	1f 92       	push	r1
    28aa:	0f 92       	push	r0
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	0f 92       	push	r0
    28b0:	11 24       	eor	r1, r1
    28b2:	2f 93       	push	r18
    28b4:	3f 93       	push	r19
    28b6:	4f 93       	push	r20
    28b8:	5f 93       	push	r21
    28ba:	6f 93       	push	r22
    28bc:	7f 93       	push	r23
    28be:	8f 93       	push	r24
    28c0:	9f 93       	push	r25
    28c2:	af 93       	push	r26
    28c4:	bf 93       	push	r27
    28c6:	ef 93       	push	r30
    28c8:	ff 93       	push	r31
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT1_CallBackPtr != 0)
    28d2:	80 91 80 01 	lds	r24, 0x0180
    28d6:	90 91 81 01 	lds	r25, 0x0181
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	29 f0       	breq	.+10     	; 0x28e8 <__vector_2+0x40>
	{
		EXTINT1_CallBackPtr();
    28de:	e0 91 80 01 	lds	r30, 0x0180
    28e2:	f0 91 81 01 	lds	r31, 0x0181
    28e6:	09 95       	icall
	}
}
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	ff 91       	pop	r31
    28ee:	ef 91       	pop	r30
    28f0:	bf 91       	pop	r27
    28f2:	af 91       	pop	r26
    28f4:	9f 91       	pop	r25
    28f6:	8f 91       	pop	r24
    28f8:	7f 91       	pop	r23
    28fa:	6f 91       	pop	r22
    28fc:	5f 91       	pop	r21
    28fe:	4f 91       	pop	r20
    2900:	3f 91       	pop	r19
    2902:	2f 91       	pop	r18
    2904:	0f 90       	pop	r0
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	0f 90       	pop	r0
    290a:	1f 90       	pop	r1
    290c:	18 95       	reti

0000290e <__vector_3>:

// EXT_INT2 handler
ISR(__vector_3)
{
    290e:	1f 92       	push	r1
    2910:	0f 92       	push	r0
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	0f 92       	push	r0
    2916:	11 24       	eor	r1, r1
    2918:	2f 93       	push	r18
    291a:	3f 93       	push	r19
    291c:	4f 93       	push	r20
    291e:	5f 93       	push	r21
    2920:	6f 93       	push	r22
    2922:	7f 93       	push	r23
    2924:	8f 93       	push	r24
    2926:	9f 93       	push	r25
    2928:	af 93       	push	r26
    292a:	bf 93       	push	r27
    292c:	ef 93       	push	r30
    292e:	ff 93       	push	r31
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT2_CallBackPtr != 0)
    2938:	80 91 82 01 	lds	r24, 0x0182
    293c:	90 91 83 01 	lds	r25, 0x0183
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	29 f0       	breq	.+10     	; 0x294e <__vector_3+0x40>
	{
		EXTINT2_CallBackPtr();
    2944:	e0 91 82 01 	lds	r30, 0x0182
    2948:	f0 91 83 01 	lds	r31, 0x0183
    294c:	09 95       	icall
	}
}
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	ff 91       	pop	r31
    2954:	ef 91       	pop	r30
    2956:	bf 91       	pop	r27
    2958:	af 91       	pop	r26
    295a:	9f 91       	pop	r25
    295c:	8f 91       	pop	r24
    295e:	7f 91       	pop	r23
    2960:	6f 91       	pop	r22
    2962:	5f 91       	pop	r21
    2964:	4f 91       	pop	r20
    2966:	3f 91       	pop	r19
    2968:	2f 91       	pop	r18
    296a:	0f 90       	pop	r0
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	0f 90       	pop	r0
    2970:	1f 90       	pop	r1
    2972:	18 95       	reti

00002974 <DIO_setPort_Direction>:

//PORT FUNCTION IMPLEMENATION

//set Port Direction
Error_t DIO_setPort_Direction(DIO_PORT_ID port_ID, DIO_DIRECTION direction)
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	27 97       	sbiw	r28, 0x07	; 7
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	6a 83       	std	Y+2, r22	; 0x02
	if(direction == OUTPUT)
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	b1 f5       	brne	.+108    	; 0x29fe <DIO_setPort_Direction+0x8a>
	{
		switch(port_ID)
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	3f 83       	std	Y+7, r19	; 0x07
    299a:	2e 83       	std	Y+6, r18	; 0x06
    299c:	8e 81       	ldd	r24, Y+6	; 0x06
    299e:	9f 81       	ldd	r25, Y+7	; 0x07
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	91 05       	cpc	r25, r1
    29a4:	d1 f0       	breq	.+52     	; 0x29da <DIO_setPort_Direction+0x66>
    29a6:	2e 81       	ldd	r18, Y+6	; 0x06
    29a8:	3f 81       	ldd	r19, Y+7	; 0x07
    29aa:	22 30       	cpi	r18, 0x02	; 2
    29ac:	31 05       	cpc	r19, r1
    29ae:	2c f4       	brge	.+10     	; 0x29ba <DIO_setPort_Direction+0x46>
    29b0:	8e 81       	ldd	r24, Y+6	; 0x06
    29b2:	9f 81       	ldd	r25, Y+7	; 0x07
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	61 f0       	breq	.+24     	; 0x29d0 <DIO_setPort_Direction+0x5c>
    29b8:	1f c0       	rjmp	.+62     	; 0x29f8 <DIO_setPort_Direction+0x84>
    29ba:	2e 81       	ldd	r18, Y+6	; 0x06
    29bc:	3f 81       	ldd	r19, Y+7	; 0x07
    29be:	22 30       	cpi	r18, 0x02	; 2
    29c0:	31 05       	cpc	r19, r1
    29c2:	81 f0       	breq	.+32     	; 0x29e4 <DIO_setPort_Direction+0x70>
    29c4:	8e 81       	ldd	r24, Y+6	; 0x06
    29c6:	9f 81       	ldd	r25, Y+7	; 0x07
    29c8:	83 30       	cpi	r24, 0x03	; 3
    29ca:	91 05       	cpc	r25, r1
    29cc:	81 f0       	breq	.+32     	; 0x29ee <DIO_setPort_Direction+0x7a>
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <DIO_setPort_Direction+0x84>
		{
			case DPORTA: DDRA = 0xFF; break;
    29d0:	ea e3       	ldi	r30, 0x3A	; 58
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	8f ef       	ldi	r24, 0xFF	; 255
    29d6:	80 83       	st	Z, r24
    29d8:	4a c0       	rjmp	.+148    	; 0x2a6e <DIO_setPort_Direction+0xfa>
			case DPORTB: DDRB = 0xFF; break;
    29da:	e7 e3       	ldi	r30, 0x37	; 55
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	80 83       	st	Z, r24
    29e2:	45 c0       	rjmp	.+138    	; 0x2a6e <DIO_setPort_Direction+0xfa>
			case DPORTC: DDRC = 0xFF; break;
    29e4:	e4 e3       	ldi	r30, 0x34	; 52
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	8f ef       	ldi	r24, 0xFF	; 255
    29ea:	80 83       	st	Z, r24
    29ec:	40 c0       	rjmp	.+128    	; 0x2a6e <DIO_setPort_Direction+0xfa>
			case DPORTD: DDRD = 0xFF; break;
    29ee:	e1 e3       	ldi	r30, 0x31	; 49
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	8f ef       	ldi	r24, 0xFF	; 255
    29f4:	80 83       	st	Z, r24
    29f6:	3b c0       	rjmp	.+118    	; 0x2a6e <DIO_setPort_Direction+0xfa>
			default: return E_N_OK;
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	9d 83       	std	Y+5, r25	; 0x05
    29fc:	39 c0       	rjmp	.+114    	; 0x2a70 <DIO_setPort_Direction+0xfc>
		}
	}
	else if (direction == INPUT)
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	88 23       	and	r24, r24
    2a02:	91 f5       	brne	.+100    	; 0x2a68 <DIO_setPort_Direction+0xf4>
	{
		switch(port_ID)
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	3c 83       	std	Y+4, r19	; 0x04
    2a0c:	2b 83       	std	Y+3, r18	; 0x03
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	9c 81       	ldd	r25, Y+4	; 0x04
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	91 05       	cpc	r25, r1
    2a16:	c9 f0       	breq	.+50     	; 0x2a4a <DIO_setPort_Direction+0xd6>
    2a18:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a1c:	22 30       	cpi	r18, 0x02	; 2
    2a1e:	31 05       	cpc	r19, r1
    2a20:	2c f4       	brge	.+10     	; 0x2a2c <DIO_setPort_Direction+0xb8>
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	61 f0       	breq	.+24     	; 0x2a42 <DIO_setPort_Direction+0xce>
    2a2a:	1b c0       	rjmp	.+54     	; 0x2a62 <DIO_setPort_Direction+0xee>
    2a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a30:	22 30       	cpi	r18, 0x02	; 2
    2a32:	31 05       	cpc	r19, r1
    2a34:	71 f0       	breq	.+28     	; 0x2a52 <DIO_setPort_Direction+0xde>
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	83 30       	cpi	r24, 0x03	; 3
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	69 f0       	breq	.+26     	; 0x2a5a <DIO_setPort_Direction+0xe6>
    2a40:	10 c0       	rjmp	.+32     	; 0x2a62 <DIO_setPort_Direction+0xee>
		{
			case DPORTA: DDRA = 0x00; break;
    2a42:	ea e3       	ldi	r30, 0x3A	; 58
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	10 82       	st	Z, r1
    2a48:	12 c0       	rjmp	.+36     	; 0x2a6e <DIO_setPort_Direction+0xfa>
			case DPORTB: DDRB = 0x00; break;
    2a4a:	e7 e3       	ldi	r30, 0x37	; 55
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	10 82       	st	Z, r1
    2a50:	0e c0       	rjmp	.+28     	; 0x2a6e <DIO_setPort_Direction+0xfa>
			case DPORTC: DDRC = 0x00; break;
    2a52:	e4 e3       	ldi	r30, 0x34	; 52
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	10 82       	st	Z, r1
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <DIO_setPort_Direction+0xfa>
			case DPORTD: DDRD = 0x00; break;
    2a5a:	e1 e3       	ldi	r30, 0x31	; 49
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	10 82       	st	Z, r1
    2a60:	06 c0       	rjmp	.+12     	; 0x2a6e <DIO_setPort_Direction+0xfa>
			default: return E_N_OK;
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	9d 83       	std	Y+5, r25	; 0x05
    2a66:	04 c0       	rjmp	.+8      	; 0x2a70 <DIO_setPort_Direction+0xfc>
		}
	}
	else
	{
		return E_N_OK;
    2a68:	21 e0       	ldi	r18, 0x01	; 1
    2a6a:	2d 83       	std	Y+5, r18	; 0x05
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <DIO_setPort_Direction+0xfc>
	}
	return E_OK;
    2a6e:	1d 82       	std	Y+5, r1	; 0x05
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2a72:	27 96       	adiw	r28, 0x07	; 7
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <DIO_setPort_Value>:


//SET PORT VALUE
Error_t DIO_setPort_Value(DIO_PORT_ID port_ID, u8_t value)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <DIO_setPort_Value+0x6>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <DIO_setPort_Value+0x8>
    2a8c:	0f 92       	push	r0
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_ID)
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	3d 83       	std	Y+5, r19	; 0x05
    2a9e:	2c 83       	std	Y+4, r18	; 0x04
    2aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	d1 f0       	breq	.+52     	; 0x2ade <DIO_setPort_Value+0x5a>
    2aaa:	2c 81       	ldd	r18, Y+4	; 0x04
    2aac:	3d 81       	ldd	r19, Y+5	; 0x05
    2aae:	22 30       	cpi	r18, 0x02	; 2
    2ab0:	31 05       	cpc	r19, r1
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <DIO_setPort_Value+0x3a>
    2ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	61 f0       	breq	.+24     	; 0x2ad4 <DIO_setPort_Value+0x50>
    2abc:	1f c0       	rjmp	.+62     	; 0x2afc <DIO_setPort_Value+0x78>
    2abe:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac2:	22 30       	cpi	r18, 0x02	; 2
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	81 f0       	breq	.+32     	; 0x2ae8 <DIO_setPort_Value+0x64>
    2ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aca:	9d 81       	ldd	r25, Y+5	; 0x05
    2acc:	83 30       	cpi	r24, 0x03	; 3
    2ace:	91 05       	cpc	r25, r1
    2ad0:	81 f0       	breq	.+32     	; 0x2af2 <DIO_setPort_Value+0x6e>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <DIO_setPort_Value+0x78>
	{
		case DPORTA: PORTA = value; break;
    2ad4:	eb e3       	ldi	r30, 0x3B	; 59
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	80 83       	st	Z, r24
    2adc:	12 c0       	rjmp	.+36     	; 0x2b02 <DIO_setPort_Value+0x7e>
		case DPORTB: PORTB = value; break;
    2ade:	e8 e3       	ldi	r30, 0x38	; 56
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	80 83       	st	Z, r24
    2ae6:	0d c0       	rjmp	.+26     	; 0x2b02 <DIO_setPort_Value+0x7e>
		case DPORTC: PORTC = value; break;
    2ae8:	e5 e3       	ldi	r30, 0x35	; 53
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	80 83       	st	Z, r24
    2af0:	08 c0       	rjmp	.+16     	; 0x2b02 <DIO_setPort_Value+0x7e>
		case DPORTD: PORTD = value; break;
    2af2:	e2 e3       	ldi	r30, 0x32	; 50
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	80 83       	st	Z, r24
    2afa:	03 c0       	rjmp	.+6      	; 0x2b02 <DIO_setPort_Value+0x7e>
		default: return E_N_OK;
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	9b 83       	std	Y+3, r25	; 0x03
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <DIO_setPort_Value+0x80>
	}
	return E_OK;
    2b02:	1b 82       	std	Y+3, r1	; 0x03
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <GetPort_Value>:


Error_t GetPort_Value(DIO_PORT_ID port_ID, u8_t *PtrPortValue)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <GetPort_Value+0x6>
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <GetPort_Value+0x8>
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <GetPort_Value+0xa>
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	89 83       	std	Y+1, r24	; 0x01
    2b26:	7b 83       	std	Y+3, r23	; 0x03
    2b28:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_ID)
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	3e 83       	std	Y+6, r19	; 0x06
    2b32:	2d 83       	std	Y+5, r18	; 0x05
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	e1 f0       	breq	.+56     	; 0x2b76 <GetPort_Value+0x60>
    2b3e:	2d 81       	ldd	r18, Y+5	; 0x05
    2b40:	3e 81       	ldd	r19, Y+6	; 0x06
    2b42:	22 30       	cpi	r18, 0x02	; 2
    2b44:	31 05       	cpc	r19, r1
    2b46:	2c f4       	brge	.+10     	; 0x2b52 <GetPort_Value+0x3c>
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	61 f0       	breq	.+24     	; 0x2b68 <GetPort_Value+0x52>
    2b50:	27 c0       	rjmp	.+78     	; 0x2ba0 <GetPort_Value+0x8a>
    2b52:	2d 81       	ldd	r18, Y+5	; 0x05
    2b54:	3e 81       	ldd	r19, Y+6	; 0x06
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	a1 f0       	breq	.+40     	; 0x2b84 <GetPort_Value+0x6e>
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	83 30       	cpi	r24, 0x03	; 3
    2b62:	91 05       	cpc	r25, r1
    2b64:	b1 f0       	breq	.+44     	; 0x2b92 <GetPort_Value+0x7c>
    2b66:	1c c0       	rjmp	.+56     	; 0x2ba0 <GetPort_Value+0x8a>
	{
		case DPORTA: *PtrPortValue = PINA; break;
    2b68:	e9 e3       	ldi	r30, 0x39	; 57
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b70:	fb 81       	ldd	r31, Y+3	; 0x03
    2b72:	80 83       	st	Z, r24
    2b74:	18 c0       	rjmp	.+48     	; 0x2ba6 <GetPort_Value+0x90>
		case DPORTB: *PtrPortValue = PINB; break;
    2b76:	e6 e3       	ldi	r30, 0x36	; 54
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b80:	80 83       	st	Z, r24
    2b82:	11 c0       	rjmp	.+34     	; 0x2ba6 <GetPort_Value+0x90>
		case DPORTC: *PtrPortValue = PINC; break;
    2b84:	e3 e3       	ldi	r30, 0x33	; 51
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b8e:	80 83       	st	Z, r24
    2b90:	0a c0       	rjmp	.+20     	; 0x2ba6 <GetPort_Value+0x90>
		case DPORTD: *PtrPortValue = PIND; break;
    2b92:	e0 e3       	ldi	r30, 0x30	; 48
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	ea 81       	ldd	r30, Y+2	; 0x02
    2b9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b9c:	80 83       	st	Z, r24
    2b9e:	03 c0       	rjmp	.+6      	; 0x2ba6 <GetPort_Value+0x90>
		default: return E_N_OK;
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	9c 83       	std	Y+4, r25	; 0x04
    2ba4:	01 c0       	rjmp	.+2      	; 0x2ba8 <GetPort_Value+0x92>
	}
	return E_OK;
    2ba6:	1c 82       	std	Y+4, r1	; 0x04
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2baa:	26 96       	adiw	r28, 0x06	; 6
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <DIO_setPin_Direction>:

//-------------------------------------------------------------------------------------------------------------------------------

//SET PIN DIRECTION
Error_t DIO_setPin_Direction(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID, DIO_DIRECTION direction)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	28 97       	sbiw	r28, 0x08	; 8
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	6a 83       	std	Y+2, r22	; 0x02
    2bd4:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_ID > PIN7 || pin_ID < PIN0 ) //CHECKS IF THE PIN is WITHIN THE VALID RANGE
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	87 30       	cpi	r24, 0x07	; 7
    2bda:	18 f0       	brcs	.+6      	; 0x2be2 <DIO_setPin_Direction+0x26>
			return E_N_OK;
    2bdc:	21 e0       	ldi	r18, 0x01	; 1
    2bde:	28 87       	std	Y+8, r18	; 0x08
    2be0:	f5 c0       	rjmp	.+490    	; 0x2dcc <DIO_setPin_Direction+0x210>

	if(direction == OUTPUT)
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	09 f0       	breq	.+2      	; 0x2bea <DIO_setPin_Direction+0x2e>
    2be8:	72 c0       	rjmp	.+228    	; 0x2cce <DIO_setPin_Direction+0x112>
	{
		switch(port_ID)
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	3f 83       	std	Y+7, r19	; 0x07
    2bf2:	2e 83       	std	Y+6, r18	; 0x06
    2bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf8:	81 30       	cpi	r24, 0x01	; 1
    2bfa:	91 05       	cpc	r25, r1
    2bfc:	49 f1       	breq	.+82     	; 0x2c50 <DIO_setPin_Direction+0x94>
    2bfe:	2e 81       	ldd	r18, Y+6	; 0x06
    2c00:	3f 81       	ldd	r19, Y+7	; 0x07
    2c02:	22 30       	cpi	r18, 0x02	; 2
    2c04:	31 05       	cpc	r19, r1
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <DIO_setPin_Direction+0x56>
    2c08:	8e 81       	ldd	r24, Y+6	; 0x06
    2c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	61 f0       	breq	.+24     	; 0x2c28 <DIO_setPin_Direction+0x6c>
    2c10:	5b c0       	rjmp	.+182    	; 0x2cc8 <DIO_setPin_Direction+0x10c>
    2c12:	2e 81       	ldd	r18, Y+6	; 0x06
    2c14:	3f 81       	ldd	r19, Y+7	; 0x07
    2c16:	22 30       	cpi	r18, 0x02	; 2
    2c18:	31 05       	cpc	r19, r1
    2c1a:	71 f1       	breq	.+92     	; 0x2c78 <DIO_setPin_Direction+0xbc>
    2c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c20:	83 30       	cpi	r24, 0x03	; 3
    2c22:	91 05       	cpc	r25, r1
    2c24:	e9 f1       	breq	.+122    	; 0x2ca0 <DIO_setPin_Direction+0xe4>
    2c26:	50 c0       	rjmp	.+160    	; 0x2cc8 <DIO_setPin_Direction+0x10c>
		{
			case DPORTA: SET_BIT(DDRA, pin_ID); break;
    2c28:	aa e3       	ldi	r26, 0x3A	; 58
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	ea e3       	ldi	r30, 0x3A	; 58
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	48 2f       	mov	r20, r24
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	02 2e       	mov	r0, r18
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <DIO_setPin_Direction+0x8a>
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	0a 94       	dec	r0
    2c48:	e2 f7       	brpl	.-8      	; 0x2c42 <DIO_setPin_Direction+0x86>
    2c4a:	84 2b       	or	r24, r20
    2c4c:	8c 93       	st	X, r24
    2c4e:	bd c0       	rjmp	.+378    	; 0x2dca <DIO_setPin_Direction+0x20e>
			case DPORTB: SET_BIT(DDRB, pin_ID); break;
    2c50:	a7 e3       	ldi	r26, 0x37	; 55
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e7 e3       	ldi	r30, 0x37	; 55
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	48 2f       	mov	r20, r24
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	02 2e       	mov	r0, r18
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <DIO_setPin_Direction+0xb2>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	0a 94       	dec	r0
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <DIO_setPin_Direction+0xae>
    2c72:	84 2b       	or	r24, r20
    2c74:	8c 93       	st	X, r24
    2c76:	a9 c0       	rjmp	.+338    	; 0x2dca <DIO_setPin_Direction+0x20e>
			case DPORTC: SET_BIT(DDRC, pin_ID); break;
    2c78:	a4 e3       	ldi	r26, 0x34	; 52
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	e4 e3       	ldi	r30, 0x34	; 52
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	48 2f       	mov	r20, r24
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	02 2e       	mov	r0, r18
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <DIO_setPin_Direction+0xda>
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	0a 94       	dec	r0
    2c98:	e2 f7       	brpl	.-8      	; 0x2c92 <DIO_setPin_Direction+0xd6>
    2c9a:	84 2b       	or	r24, r20
    2c9c:	8c 93       	st	X, r24
    2c9e:	95 c0       	rjmp	.+298    	; 0x2dca <DIO_setPin_Direction+0x20e>
			case DPORTD: SET_BIT(DDRD, pin_ID); break;
    2ca0:	a1 e3       	ldi	r26, 0x31	; 49
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e1 e3       	ldi	r30, 0x31	; 49
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	48 2f       	mov	r20, r24
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	02 2e       	mov	r0, r18
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <DIO_setPin_Direction+0x102>
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	0a 94       	dec	r0
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <DIO_setPin_Direction+0xfe>
    2cc2:	84 2b       	or	r24, r20
    2cc4:	8c 93       	st	X, r24
    2cc6:	81 c0       	rjmp	.+258    	; 0x2dca <DIO_setPin_Direction+0x20e>
			default: return E_N_OK;
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	98 87       	std	Y+8, r25	; 0x08
    2ccc:	7f c0       	rjmp	.+254    	; 0x2dcc <DIO_setPin_Direction+0x210>
		}
	}
	else if(direction == INPUT)
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	88 23       	and	r24, r24
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <DIO_setPin_Direction+0x11a>
    2cd4:	77 c0       	rjmp	.+238    	; 0x2dc4 <DIO_setPin_Direction+0x208>
	{
		switch(port_ID)
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	3d 83       	std	Y+5, r19	; 0x05
    2cde:	2c 83       	std	Y+4, r18	; 0x04
    2ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	59 f1       	breq	.+86     	; 0x2d40 <DIO_setPin_Direction+0x184>
    2cea:	2c 81       	ldd	r18, Y+4	; 0x04
    2cec:	3d 81       	ldd	r19, Y+5	; 0x05
    2cee:	22 30       	cpi	r18, 0x02	; 2
    2cf0:	31 05       	cpc	r19, r1
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <DIO_setPin_Direction+0x142>
    2cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f0       	breq	.+26     	; 0x2d16 <DIO_setPin_Direction+0x15a>
    2cfc:	60 c0       	rjmp	.+192    	; 0x2dbe <DIO_setPin_Direction+0x202>
    2cfe:	2c 81       	ldd	r18, Y+4	; 0x04
    2d00:	3d 81       	ldd	r19, Y+5	; 0x05
    2d02:	22 30       	cpi	r18, 0x02	; 2
    2d04:	31 05       	cpc	r19, r1
    2d06:	89 f1       	breq	.+98     	; 0x2d6a <DIO_setPin_Direction+0x1ae>
    2d08:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0c:	83 30       	cpi	r24, 0x03	; 3
    2d0e:	91 05       	cpc	r25, r1
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <DIO_setPin_Direction+0x158>
    2d12:	40 c0       	rjmp	.+128    	; 0x2d94 <DIO_setPin_Direction+0x1d8>
    2d14:	54 c0       	rjmp	.+168    	; 0x2dbe <DIO_setPin_Direction+0x202>
		{
			case DPORTA: CLEAR_BIT(DDRA, pin_ID); break;
    2d16:	aa e3       	ldi	r26, 0x3A	; 58
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ea e3       	ldi	r30, 0x3A	; 58
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	48 2f       	mov	r20, r24
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 2e       	mov	r0, r18
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <DIO_setPin_Direction+0x178>
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	0a 94       	dec	r0
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <DIO_setPin_Direction+0x174>
    2d38:	80 95       	com	r24
    2d3a:	84 23       	and	r24, r20
    2d3c:	8c 93       	st	X, r24
    2d3e:	45 c0       	rjmp	.+138    	; 0x2dca <DIO_setPin_Direction+0x20e>
			case DPORTB: CLEAR_BIT(DDRB, pin_ID); break;
    2d40:	a7 e3       	ldi	r26, 0x37	; 55
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e7 e3       	ldi	r30, 0x37	; 55
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	48 2f       	mov	r20, r24
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	02 2e       	mov	r0, r18
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <DIO_setPin_Direction+0x1a2>
    2d5a:	88 0f       	add	r24, r24
    2d5c:	99 1f       	adc	r25, r25
    2d5e:	0a 94       	dec	r0
    2d60:	e2 f7       	brpl	.-8      	; 0x2d5a <DIO_setPin_Direction+0x19e>
    2d62:	80 95       	com	r24
    2d64:	84 23       	and	r24, r20
    2d66:	8c 93       	st	X, r24
    2d68:	30 c0       	rjmp	.+96     	; 0x2dca <DIO_setPin_Direction+0x20e>
			case DPORTC: CLEAR_BIT(DDRC, pin_ID); break;
    2d6a:	a4 e3       	ldi	r26, 0x34	; 52
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e4 e3       	ldi	r30, 0x34	; 52
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	48 2f       	mov	r20, r24
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	02 2e       	mov	r0, r18
    2d82:	02 c0       	rjmp	.+4      	; 0x2d88 <DIO_setPin_Direction+0x1cc>
    2d84:	88 0f       	add	r24, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	0a 94       	dec	r0
    2d8a:	e2 f7       	brpl	.-8      	; 0x2d84 <DIO_setPin_Direction+0x1c8>
    2d8c:	80 95       	com	r24
    2d8e:	84 23       	and	r24, r20
    2d90:	8c 93       	st	X, r24
    2d92:	1b c0       	rjmp	.+54     	; 0x2dca <DIO_setPin_Direction+0x20e>
			case DPORTD: CLEAR_BIT(DDRD, pin_ID); break;
    2d94:	a1 e3       	ldi	r26, 0x31	; 49
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	e1 e3       	ldi	r30, 0x31	; 49
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	48 2f       	mov	r20, r24
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	28 2f       	mov	r18, r24
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	02 2e       	mov	r0, r18
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <DIO_setPin_Direction+0x1f6>
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	0a 94       	dec	r0
    2db4:	e2 f7       	brpl	.-8      	; 0x2dae <DIO_setPin_Direction+0x1f2>
    2db6:	80 95       	com	r24
    2db8:	84 23       	and	r24, r20
    2dba:	8c 93       	st	X, r24
    2dbc:	06 c0       	rjmp	.+12     	; 0x2dca <DIO_setPin_Direction+0x20e>
			default: return E_N_OK;
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	98 87       	std	Y+8, r25	; 0x08
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <DIO_setPin_Direction+0x210>
		}
	}
	else
	{
		return E_N_OK;
    2dc4:	21 e0       	ldi	r18, 0x01	; 1
    2dc6:	28 87       	std	Y+8, r18	; 0x08
    2dc8:	01 c0       	rjmp	.+2      	; 0x2dcc <DIO_setPin_Direction+0x210>
	}
	return E_OK;
    2dca:	18 86       	std	Y+8, r1	; 0x08
    2dcc:	88 85       	ldd	r24, Y+8	; 0x08
}
    2dce:	28 96       	adiw	r28, 0x08	; 8
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <DIO_setPin_Value>:

//set Pin Value

Error_t DIO_setPin_Value(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID, DIO_VALUE value)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	28 97       	sbiw	r28, 0x08	; 8
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	6a 83       	std	Y+2, r22	; 0x02
    2df8:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_ID > PIN7 || pin_ID < PIN0 ) //CHECKS IF THE PIN is WITHIN THE VALID RANGE
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	87 30       	cpi	r24, 0x07	; 7
    2dfe:	18 f0       	brcs	.+6      	; 0x2e06 <DIO_setPin_Value+0x26>
			return E_N_OK;
    2e00:	21 e0       	ldi	r18, 0x01	; 1
    2e02:	28 87       	std	Y+8, r18	; 0x08
    2e04:	f5 c0       	rjmp	.+490    	; 0x2ff0 <DIO_setPin_Value+0x210>

	if(value == HIGH)
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <DIO_setPin_Value+0x2e>
    2e0c:	72 c0       	rjmp	.+228    	; 0x2ef2 <DIO_setPin_Value+0x112>
	{
		switch(port_ID)
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	3f 83       	std	Y+7, r19	; 0x07
    2e16:	2e 83       	std	Y+6, r18	; 0x06
    2e18:	8e 81       	ldd	r24, Y+6	; 0x06
    2e1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e1c:	81 30       	cpi	r24, 0x01	; 1
    2e1e:	91 05       	cpc	r25, r1
    2e20:	49 f1       	breq	.+82     	; 0x2e74 <DIO_setPin_Value+0x94>
    2e22:	2e 81       	ldd	r18, Y+6	; 0x06
    2e24:	3f 81       	ldd	r19, Y+7	; 0x07
    2e26:	22 30       	cpi	r18, 0x02	; 2
    2e28:	31 05       	cpc	r19, r1
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <DIO_setPin_Value+0x56>
    2e2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	61 f0       	breq	.+24     	; 0x2e4c <DIO_setPin_Value+0x6c>
    2e34:	5b c0       	rjmp	.+182    	; 0x2eec <DIO_setPin_Value+0x10c>
    2e36:	2e 81       	ldd	r18, Y+6	; 0x06
    2e38:	3f 81       	ldd	r19, Y+7	; 0x07
    2e3a:	22 30       	cpi	r18, 0x02	; 2
    2e3c:	31 05       	cpc	r19, r1
    2e3e:	71 f1       	breq	.+92     	; 0x2e9c <DIO_setPin_Value+0xbc>
    2e40:	8e 81       	ldd	r24, Y+6	; 0x06
    2e42:	9f 81       	ldd	r25, Y+7	; 0x07
    2e44:	83 30       	cpi	r24, 0x03	; 3
    2e46:	91 05       	cpc	r25, r1
    2e48:	e9 f1       	breq	.+122    	; 0x2ec4 <DIO_setPin_Value+0xe4>
    2e4a:	50 c0       	rjmp	.+160    	; 0x2eec <DIO_setPin_Value+0x10c>
		{
			case DPORTA: SET_BIT(PORTA, pin_ID); break;
    2e4c:	ab e3       	ldi	r26, 0x3B	; 59
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	eb e3       	ldi	r30, 0x3B	; 59
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	48 2f       	mov	r20, r24
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 2e       	mov	r0, r18
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <DIO_setPin_Value+0x8a>
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	0a 94       	dec	r0
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <DIO_setPin_Value+0x86>
    2e6e:	84 2b       	or	r24, r20
    2e70:	8c 93       	st	X, r24
    2e72:	bd c0       	rjmp	.+378    	; 0x2fee <DIO_setPin_Value+0x20e>
			case DPORTB: SET_BIT(PORTB, pin_ID); break;
    2e74:	a8 e3       	ldi	r26, 0x38	; 56
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e8 e3       	ldi	r30, 0x38	; 56
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	48 2f       	mov	r20, r24
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	02 2e       	mov	r0, r18
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <DIO_setPin_Value+0xb2>
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	0a 94       	dec	r0
    2e94:	e2 f7       	brpl	.-8      	; 0x2e8e <DIO_setPin_Value+0xae>
    2e96:	84 2b       	or	r24, r20
    2e98:	8c 93       	st	X, r24
    2e9a:	a9 c0       	rjmp	.+338    	; 0x2fee <DIO_setPin_Value+0x20e>
			case DPORTC: SET_BIT(PORTC, pin_ID); break;
    2e9c:	a5 e3       	ldi	r26, 0x35	; 53
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e5 e3       	ldi	r30, 0x35	; 53
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	48 2f       	mov	r20, r24
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	02 2e       	mov	r0, r18
    2eb4:	02 c0       	rjmp	.+4      	; 0x2eba <DIO_setPin_Value+0xda>
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	0a 94       	dec	r0
    2ebc:	e2 f7       	brpl	.-8      	; 0x2eb6 <DIO_setPin_Value+0xd6>
    2ebe:	84 2b       	or	r24, r20
    2ec0:	8c 93       	st	X, r24
    2ec2:	95 c0       	rjmp	.+298    	; 0x2fee <DIO_setPin_Value+0x20e>
			case DPORTD: SET_BIT(PORTD, pin_ID); break;
    2ec4:	a2 e3       	ldi	r26, 0x32	; 50
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e2 e3       	ldi	r30, 0x32	; 50
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	48 2f       	mov	r20, r24
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 2e       	mov	r0, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <DIO_setPin_Value+0x102>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	0a 94       	dec	r0
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <DIO_setPin_Value+0xfe>
    2ee6:	84 2b       	or	r24, r20
    2ee8:	8c 93       	st	X, r24
    2eea:	81 c0       	rjmp	.+258    	; 0x2fee <DIO_setPin_Value+0x20e>
			default: return E_N_OK;
    2eec:	91 e0       	ldi	r25, 0x01	; 1
    2eee:	98 87       	std	Y+8, r25	; 0x08
    2ef0:	7f c0       	rjmp	.+254    	; 0x2ff0 <DIO_setPin_Value+0x210>
		}
	}
	else if(value == LOW)
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	88 23       	and	r24, r24
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <DIO_setPin_Value+0x11a>
    2ef8:	77 c0       	rjmp	.+238    	; 0x2fe8 <DIO_setPin_Value+0x208>
	{
		switch(port_ID)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	3d 83       	std	Y+5, r19	; 0x05
    2f02:	2c 83       	std	Y+4, r18	; 0x04
    2f04:	8c 81       	ldd	r24, Y+4	; 0x04
    2f06:	9d 81       	ldd	r25, Y+5	; 0x05
    2f08:	81 30       	cpi	r24, 0x01	; 1
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	59 f1       	breq	.+86     	; 0x2f64 <DIO_setPin_Value+0x184>
    2f0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f10:	3d 81       	ldd	r19, Y+5	; 0x05
    2f12:	22 30       	cpi	r18, 0x02	; 2
    2f14:	31 05       	cpc	r19, r1
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <DIO_setPin_Value+0x142>
    2f18:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f0       	breq	.+26     	; 0x2f3a <DIO_setPin_Value+0x15a>
    2f20:	60 c0       	rjmp	.+192    	; 0x2fe2 <DIO_setPin_Value+0x202>
    2f22:	2c 81       	ldd	r18, Y+4	; 0x04
    2f24:	3d 81       	ldd	r19, Y+5	; 0x05
    2f26:	22 30       	cpi	r18, 0x02	; 2
    2f28:	31 05       	cpc	r19, r1
    2f2a:	89 f1       	breq	.+98     	; 0x2f8e <DIO_setPin_Value+0x1ae>
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f30:	83 30       	cpi	r24, 0x03	; 3
    2f32:	91 05       	cpc	r25, r1
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <DIO_setPin_Value+0x158>
    2f36:	40 c0       	rjmp	.+128    	; 0x2fb8 <DIO_setPin_Value+0x1d8>
    2f38:	54 c0       	rjmp	.+168    	; 0x2fe2 <DIO_setPin_Value+0x202>
		{
			case DPORTA: CLEAR_BIT(PORTA, pin_ID); break;
    2f3a:	ab e3       	ldi	r26, 0x3B	; 59
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	eb e3       	ldi	r30, 0x3B	; 59
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	48 2f       	mov	r20, r24
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	02 2e       	mov	r0, r18
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <DIO_setPin_Value+0x178>
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	0a 94       	dec	r0
    2f5a:	e2 f7       	brpl	.-8      	; 0x2f54 <DIO_setPin_Value+0x174>
    2f5c:	80 95       	com	r24
    2f5e:	84 23       	and	r24, r20
    2f60:	8c 93       	st	X, r24
    2f62:	45 c0       	rjmp	.+138    	; 0x2fee <DIO_setPin_Value+0x20e>
			case DPORTB: CLEAR_BIT(PORTB, pin_ID); break;
    2f64:	a8 e3       	ldi	r26, 0x38	; 56
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e8 e3       	ldi	r30, 0x38	; 56
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	48 2f       	mov	r20, r24
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	28 2f       	mov	r18, r24
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	02 2e       	mov	r0, r18
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <DIO_setPin_Value+0x1a2>
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	0a 94       	dec	r0
    2f84:	e2 f7       	brpl	.-8      	; 0x2f7e <DIO_setPin_Value+0x19e>
    2f86:	80 95       	com	r24
    2f88:	84 23       	and	r24, r20
    2f8a:	8c 93       	st	X, r24
    2f8c:	30 c0       	rjmp	.+96     	; 0x2fee <DIO_setPin_Value+0x20e>
			case DPORTC: CLEAR_BIT(PORTC, pin_ID); break;
    2f8e:	a5 e3       	ldi	r26, 0x35	; 53
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e5 e3       	ldi	r30, 0x35	; 53
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	48 2f       	mov	r20, r24
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	02 2e       	mov	r0, r18
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <DIO_setPin_Value+0x1cc>
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	0a 94       	dec	r0
    2fae:	e2 f7       	brpl	.-8      	; 0x2fa8 <DIO_setPin_Value+0x1c8>
    2fb0:	80 95       	com	r24
    2fb2:	84 23       	and	r24, r20
    2fb4:	8c 93       	st	X, r24
    2fb6:	1b c0       	rjmp	.+54     	; 0x2fee <DIO_setPin_Value+0x20e>
			case DPORTD: CLEAR_BIT(PORTD, pin_ID); break;
    2fb8:	a2 e3       	ldi	r26, 0x32	; 50
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e2 e3       	ldi	r30, 0x32	; 50
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	48 2f       	mov	r20, r24
    2fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	02 2e       	mov	r0, r18
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <DIO_setPin_Value+0x1f6>
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	0a 94       	dec	r0
    2fd8:	e2 f7       	brpl	.-8      	; 0x2fd2 <DIO_setPin_Value+0x1f2>
    2fda:	80 95       	com	r24
    2fdc:	84 23       	and	r24, r20
    2fde:	8c 93       	st	X, r24
    2fe0:	06 c0       	rjmp	.+12     	; 0x2fee <DIO_setPin_Value+0x20e>
			default: return E_N_OK;
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	98 87       	std	Y+8, r25	; 0x08
    2fe6:	04 c0       	rjmp	.+8      	; 0x2ff0 <DIO_setPin_Value+0x210>
			}
	}
	else
	{
		return E_N_OK;
    2fe8:	21 e0       	ldi	r18, 0x01	; 1
    2fea:	28 87       	std	Y+8, r18	; 0x08
    2fec:	01 c0       	rjmp	.+2      	; 0x2ff0 <DIO_setPin_Value+0x210>
	}
	return E_OK;
    2fee:	18 86       	std	Y+8, r1	; 0x08
    2ff0:	88 85       	ldd	r24, Y+8	; 0x08
}
    2ff2:	28 96       	adiw	r28, 0x08	; 8
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <DIO_getPin_Value>:

//GET PIN VALUE

Error_t DIO_getPin_Value(DIO_PORT_ID port_ID , DIO_PIN_ID pin_ID, u8_t *PtrPinValue)
{
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	27 97       	sbiw	r28, 0x07	; 7
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	6a 83       	std	Y+2, r22	; 0x02
    301c:	5c 83       	std	Y+4, r21	; 0x04
    301e:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_ID > PIN7 || pin_ID < PIN0 ) //CHECKS IF THE PIN is WITHIN THE VALID RANGE
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	87 30       	cpi	r24, 0x07	; 7
    3024:	18 f0       	brcs	.+6      	; 0x302c <DIO_getPin_Value+0x28>
			return E_N_OK;
    3026:	21 e0       	ldi	r18, 0x01	; 1
    3028:	2f 83       	std	Y+7, r18	; 0x07
    302a:	a6 c0       	rjmp	.+332    	; 0x3178 <DIO_getPin_Value+0x174>

	switch(port_ID)
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	48 2f       	mov	r20, r24
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	5e 83       	std	Y+6, r21	; 0x06
    3034:	4d 83       	std	Y+5, r20	; 0x05
    3036:	8d 81       	ldd	r24, Y+5	; 0x05
    3038:	9e 81       	ldd	r25, Y+6	; 0x06
    303a:	81 30       	cpi	r24, 0x01	; 1
    303c:	91 05       	cpc	r25, r1
    303e:	c1 f1       	breq	.+112    	; 0x30b0 <DIO_getPin_Value+0xac>
    3040:	2d 81       	ldd	r18, Y+5	; 0x05
    3042:	3e 81       	ldd	r19, Y+6	; 0x06
    3044:	22 30       	cpi	r18, 0x02	; 2
    3046:	31 05       	cpc	r19, r1
    3048:	34 f4       	brge	.+12     	; 0x3056 <DIO_getPin_Value+0x52>
    304a:	4d 81       	ldd	r20, Y+5	; 0x05
    304c:	5e 81       	ldd	r21, Y+6	; 0x06
    304e:	41 15       	cp	r20, r1
    3050:	51 05       	cpc	r21, r1
    3052:	71 f0       	breq	.+28     	; 0x3070 <DIO_getPin_Value+0x6c>
    3054:	8d c0       	rjmp	.+282    	; 0x3170 <DIO_getPin_Value+0x16c>
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	82 30       	cpi	r24, 0x02	; 2
    305c:	91 05       	cpc	r25, r1
    305e:	09 f4       	brne	.+2      	; 0x3062 <DIO_getPin_Value+0x5e>
    3060:	47 c0       	rjmp	.+142    	; 0x30f0 <DIO_getPin_Value+0xec>
    3062:	2d 81       	ldd	r18, Y+5	; 0x05
    3064:	3e 81       	ldd	r19, Y+6	; 0x06
    3066:	23 30       	cpi	r18, 0x03	; 3
    3068:	31 05       	cpc	r19, r1
    306a:	09 f4       	brne	.+2      	; 0x306e <DIO_getPin_Value+0x6a>
    306c:	61 c0       	rjmp	.+194    	; 0x3130 <DIO_getPin_Value+0x12c>
    306e:	80 c0       	rjmp	.+256    	; 0x3170 <DIO_getPin_Value+0x16c>
	{
		case DPORTA: *PtrPinValue = GET_BIT(PINA, pin_ID); break;
    3070:	e9 e3       	ldi	r30, 0x39	; 57
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	48 2f       	mov	r20, r24
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	02 c0       	rjmp	.+4      	; 0x308a <DIO_getPin_Value+0x86>
    3086:	88 0f       	add	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	2a 95       	dec	r18
    308c:	e2 f7       	brpl	.-8      	; 0x3086 <DIO_getPin_Value+0x82>
    308e:	9a 01       	movw	r18, r20
    3090:	28 23       	and	r18, r24
    3092:	39 23       	and	r19, r25
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	88 2f       	mov	r24, r24
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a9 01       	movw	r20, r18
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <DIO_getPin_Value+0x9e>
    309e:	55 95       	asr	r21
    30a0:	47 95       	ror	r20
    30a2:	8a 95       	dec	r24
    30a4:	e2 f7       	brpl	.-8      	; 0x309e <DIO_getPin_Value+0x9a>
    30a6:	ca 01       	movw	r24, r20
    30a8:	eb 81       	ldd	r30, Y+3	; 0x03
    30aa:	fc 81       	ldd	r31, Y+4	; 0x04
    30ac:	80 83       	st	Z, r24
    30ae:	63 c0       	rjmp	.+198    	; 0x3176 <DIO_getPin_Value+0x172>
		case DPORTB: *PtrPinValue = GET_BIT(PINB, pin_ID); break;
    30b0:	e6 e3       	ldi	r30, 0x36	; 54
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	48 2f       	mov	r20, r24
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	28 2f       	mov	r18, r24
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <DIO_getPin_Value+0xc6>
    30c6:	88 0f       	add	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	2a 95       	dec	r18
    30cc:	e2 f7       	brpl	.-8      	; 0x30c6 <DIO_getPin_Value+0xc2>
    30ce:	9a 01       	movw	r18, r20
    30d0:	28 23       	and	r18, r24
    30d2:	39 23       	and	r19, r25
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	88 2f       	mov	r24, r24
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	a9 01       	movw	r20, r18
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <DIO_getPin_Value+0xde>
    30de:	55 95       	asr	r21
    30e0:	47 95       	ror	r20
    30e2:	8a 95       	dec	r24
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <DIO_getPin_Value+0xda>
    30e6:	ca 01       	movw	r24, r20
    30e8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ea:	fc 81       	ldd	r31, Y+4	; 0x04
    30ec:	80 83       	st	Z, r24
    30ee:	43 c0       	rjmp	.+134    	; 0x3176 <DIO_getPin_Value+0x172>
		case DPORTC: *PtrPinValue = GET_BIT(PINC, pin_ID); break;
    30f0:	e3 e3       	ldi	r30, 0x33	; 51
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	48 2f       	mov	r20, r24
    30f8:	50 e0       	ldi	r21, 0x00	; 0
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	02 c0       	rjmp	.+4      	; 0x310a <DIO_getPin_Value+0x106>
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	2a 95       	dec	r18
    310c:	e2 f7       	brpl	.-8      	; 0x3106 <DIO_getPin_Value+0x102>
    310e:	9a 01       	movw	r18, r20
    3110:	28 23       	and	r18, r24
    3112:	39 23       	and	r19, r25
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	88 2f       	mov	r24, r24
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a9 01       	movw	r20, r18
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <DIO_getPin_Value+0x11e>
    311e:	55 95       	asr	r21
    3120:	47 95       	ror	r20
    3122:	8a 95       	dec	r24
    3124:	e2 f7       	brpl	.-8      	; 0x311e <DIO_getPin_Value+0x11a>
    3126:	ca 01       	movw	r24, r20
    3128:	eb 81       	ldd	r30, Y+3	; 0x03
    312a:	fc 81       	ldd	r31, Y+4	; 0x04
    312c:	80 83       	st	Z, r24
    312e:	23 c0       	rjmp	.+70     	; 0x3176 <DIO_getPin_Value+0x172>
		case DPORTD: *PtrPinValue = GET_BIT(PIND, pin_ID); break;
    3130:	e0 e3       	ldi	r30, 0x30	; 48
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	48 2f       	mov	r20, r24
    3138:	50 e0       	ldi	r21, 0x00	; 0
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	02 c0       	rjmp	.+4      	; 0x314a <DIO_getPin_Value+0x146>
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	2a 95       	dec	r18
    314c:	e2 f7       	brpl	.-8      	; 0x3146 <DIO_getPin_Value+0x142>
    314e:	9a 01       	movw	r18, r20
    3150:	28 23       	and	r18, r24
    3152:	39 23       	and	r19, r25
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	88 2f       	mov	r24, r24
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	a9 01       	movw	r20, r18
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <DIO_getPin_Value+0x15e>
    315e:	55 95       	asr	r21
    3160:	47 95       	ror	r20
    3162:	8a 95       	dec	r24
    3164:	e2 f7       	brpl	.-8      	; 0x315e <DIO_getPin_Value+0x15a>
    3166:	ca 01       	movw	r24, r20
    3168:	eb 81       	ldd	r30, Y+3	; 0x03
    316a:	fc 81       	ldd	r31, Y+4	; 0x04
    316c:	80 83       	st	Z, r24
    316e:	03 c0       	rjmp	.+6      	; 0x3176 <DIO_getPin_Value+0x172>
		default: return E_N_OK;
    3170:	51 e0       	ldi	r21, 0x01	; 1
    3172:	5f 83       	std	Y+7, r21	; 0x07
    3174:	01 c0       	rjmp	.+2      	; 0x3178 <DIO_getPin_Value+0x174>
	}

	return E_OK;
    3176:	1f 82       	std	Y+7, r1	; 0x07
    3178:	8f 81       	ldd	r24, Y+7	; 0x07
}
    317a:	27 96       	adiw	r28, 0x07	; 7
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <ADC_Init>:
u8_t ADC_TriggerMode_Buffer;

u16_t* gu16_ADC_reading;

ADC_ERROR_t ADC_Init(str_ADC_config_t*confg_s)
{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	63 97       	sbiw	r28, 0x13	; 19
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
	switch(confg_s->u8_voltage)
    31a4:	ed 81       	ldd	r30, Y+5	; 0x05
    31a6:	fe 81       	ldd	r31, Y+6	; 0x06
    31a8:	80 81       	ld	r24, Z
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	3b 8b       	std	Y+19, r19	; 0x13
    31b0:	2a 8b       	std	Y+18, r18	; 0x12
    31b2:	8a 89       	ldd	r24, Y+18	; 0x12
    31b4:	9b 89       	ldd	r25, Y+19	; 0x13
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	91 05       	cpc	r25, r1
    31ba:	c1 f0       	breq	.+48     	; 0x31ec <ADC_Init+0x60>
    31bc:	2a 89       	ldd	r18, Y+18	; 0x12
    31be:	3b 89       	ldd	r19, Y+19	; 0x13
    31c0:	23 30       	cpi	r18, 0x03	; 3
    31c2:	31 05       	cpc	r19, r1
    31c4:	11 f1       	breq	.+68     	; 0x320a <ADC_Init+0x7e>
    31c6:	8a 89       	ldd	r24, Y+18	; 0x12
    31c8:	9b 89       	ldd	r25, Y+19	; 0x13
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	69 f5       	brne	.+90     	; 0x3228 <ADC_Init+0x9c>
	{
		case INTERNAL_VREF_OFF:
			CLEAR_BIT(ADMUX, REFS0);
    31ce:	a7 e2       	ldi	r26, 0x27	; 39
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e7 e2       	ldi	r30, 0x27	; 39
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	8f 7b       	andi	r24, 0xBF	; 191
    31da:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, REFS1);
    31dc:	a7 e2       	ldi	r26, 0x27	; 39
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e7 e2       	ldi	r30, 0x27	; 39
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	8f 77       	andi	r24, 0x7F	; 127
    31e8:	8c 93       	st	X, r24
    31ea:	20 c0       	rjmp	.+64     	; 0x322c <ADC_Init+0xa0>
			break;

		case AVCC_EXTERNAL_CAPACITOR_AREF_PIN:
			SET_BIT(ADMUX, REFS0);
    31ec:	a7 e2       	ldi	r26, 0x27	; 39
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e7 e2       	ldi	r30, 0x27	; 39
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	80 64       	ori	r24, 0x40	; 64
    31f8:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, REFS1);
    31fa:	a7 e2       	ldi	r26, 0x27	; 39
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e7 e2       	ldi	r30, 0x27	; 39
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8f 77       	andi	r24, 0x7F	; 127
    3206:	8c 93       	st	X, r24
    3208:	11 c0       	rjmp	.+34     	; 0x322c <ADC_Init+0xa0>
			break;

		case INTERNAL_VREF_2_56_EXTERNAL_INTERNAL:
			SET_BIT(ADMUX, REFS0);
    320a:	a7 e2       	ldi	r26, 0x27	; 39
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	e7 e2       	ldi	r30, 0x27	; 39
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	80 64       	ori	r24, 0x40	; 64
    3216:	8c 93       	st	X, r24
			SET_BIT(ADMUX, REFS1);
    3218:	a7 e2       	ldi	r26, 0x27	; 39
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	e7 e2       	ldi	r30, 0x27	; 39
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	80 68       	ori	r24, 0x80	; 128
    3224:	8c 93       	st	X, r24
    3226:	02 c0       	rjmp	.+4      	; 0x322c <ADC_Init+0xa0>
			break;

		default:
			return ADC_E_NOK;
    3228:	19 8a       	std	Y+17, r1	; 0x11
    322a:	7b c3       	rjmp	.+1782   	; 0x3922 <ADC_Init+0x796>
	}

	switch(confg_s->u8_ADC_Channel)
    322c:	ed 81       	ldd	r30, Y+5	; 0x05
    322e:	fe 81       	ldd	r31, Y+6	; 0x06
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	38 8b       	std	Y+16, r19	; 0x10
    3238:	2f 87       	std	Y+15, r18	; 0x0f
    323a:	8f 85       	ldd	r24, Y+15	; 0x0f
    323c:	98 89       	ldd	r25, Y+16	; 0x10
    323e:	83 30       	cpi	r24, 0x03	; 3
    3240:	91 05       	cpc	r25, r1
    3242:	09 f4       	brne	.+2      	; 0x3246 <ADC_Init+0xba>
    3244:	94 c0       	rjmp	.+296    	; 0x336e <ADC_Init+0x1e2>
    3246:	2f 85       	ldd	r18, Y+15	; 0x0f
    3248:	38 89       	ldd	r19, Y+16	; 0x10
    324a:	24 30       	cpi	r18, 0x04	; 4
    324c:	31 05       	cpc	r19, r1
    324e:	8c f4       	brge	.+34     	; 0x3272 <ADC_Init+0xe6>
    3250:	8f 85       	ldd	r24, Y+15	; 0x0f
    3252:	98 89       	ldd	r25, Y+16	; 0x10
    3254:	81 30       	cpi	r24, 0x01	; 1
    3256:	91 05       	cpc	r25, r1
    3258:	09 f4       	brne	.+2      	; 0x325c <ADC_Init+0xd0>
    325a:	48 c0       	rjmp	.+144    	; 0x32ec <ADC_Init+0x160>
    325c:	2f 85       	ldd	r18, Y+15	; 0x0f
    325e:	38 89       	ldd	r19, Y+16	; 0x10
    3260:	22 30       	cpi	r18, 0x02	; 2
    3262:	31 05       	cpc	r19, r1
    3264:	0c f0       	brlt	.+2      	; 0x3268 <ADC_Init+0xdc>
    3266:	66 c0       	rjmp	.+204    	; 0x3334 <ADC_Init+0x1a8>
    3268:	8f 85       	ldd	r24, Y+15	; 0x0f
    326a:	98 89       	ldd	r25, Y+16	; 0x10
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	d1 f0       	breq	.+52     	; 0x32a4 <ADC_Init+0x118>
    3270:	32 c1       	rjmp	.+612    	; 0x34d6 <ADC_Init+0x34a>
    3272:	2f 85       	ldd	r18, Y+15	; 0x0f
    3274:	38 89       	ldd	r19, Y+16	; 0x10
    3276:	25 30       	cpi	r18, 0x05	; 5
    3278:	31 05       	cpc	r19, r1
    327a:	09 f4       	brne	.+2      	; 0x327e <ADC_Init+0xf2>
    327c:	c0 c0       	rjmp	.+384    	; 0x33fe <ADC_Init+0x272>
    327e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3280:	98 89       	ldd	r25, Y+16	; 0x10
    3282:	85 30       	cpi	r24, 0x05	; 5
    3284:	91 05       	cpc	r25, r1
    3286:	0c f4       	brge	.+2      	; 0x328a <ADC_Init+0xfe>
    3288:	96 c0       	rjmp	.+300    	; 0x33b6 <ADC_Init+0x22a>
    328a:	2f 85       	ldd	r18, Y+15	; 0x0f
    328c:	38 89       	ldd	r19, Y+16	; 0x10
    328e:	26 30       	cpi	r18, 0x06	; 6
    3290:	31 05       	cpc	r19, r1
    3292:	09 f4       	brne	.+2      	; 0x3296 <ADC_Init+0x10a>
    3294:	d8 c0       	rjmp	.+432    	; 0x3446 <ADC_Init+0x2ba>
    3296:	8f 85       	ldd	r24, Y+15	; 0x0f
    3298:	98 89       	ldd	r25, Y+16	; 0x10
    329a:	87 30       	cpi	r24, 0x07	; 7
    329c:	91 05       	cpc	r25, r1
    329e:	09 f4       	brne	.+2      	; 0x32a2 <ADC_Init+0x116>
    32a0:	f6 c0       	rjmp	.+492    	; 0x348e <ADC_Init+0x302>
    32a2:	19 c1       	rjmp	.+562    	; 0x34d6 <ADC_Init+0x34a>
	{
		case CHANNEL_ADC0:
			CLEAR_BIT(ADMUX, MUX0);
    32a4:	a7 e2       	ldi	r26, 0x27	; 39
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e7 e2       	ldi	r30, 0x27	; 39
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	8e 7f       	andi	r24, 0xFE	; 254
    32b0:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX1);
    32b2:	a7 e2       	ldi	r26, 0x27	; 39
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e7 e2       	ldi	r30, 0x27	; 39
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	8d 7f       	andi	r24, 0xFD	; 253
    32be:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX2);
    32c0:	a7 e2       	ldi	r26, 0x27	; 39
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e7 e2       	ldi	r30, 0x27	; 39
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	8b 7f       	andi	r24, 0xFB	; 251
    32cc:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    32ce:	a7 e2       	ldi	r26, 0x27	; 39
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	e7 e2       	ldi	r30, 0x27	; 39
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	87 7f       	andi	r24, 0xF7	; 247
    32da:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX4);
    32dc:	a7 e2       	ldi	r26, 0x27	; 39
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e7 e2       	ldi	r30, 0x27	; 39
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	8f 7e       	andi	r24, 0xEF	; 239
    32e8:	8c 93       	st	X, r24
    32ea:	f7 c0       	rjmp	.+494    	; 0x34da <ADC_Init+0x34e>
			break;

		case CHANNEL_ADC1:
			SET_BIT(ADMUX, MUX0);
    32ec:	a7 e2       	ldi	r26, 0x27	; 39
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	e7 e2       	ldi	r30, 0x27	; 39
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	81 60       	ori	r24, 0x01	; 1
    32f8:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX1);
    32fa:	a7 e2       	ldi	r26, 0x27	; 39
    32fc:	b0 e0       	ldi	r27, 0x00	; 0
    32fe:	e7 e2       	ldi	r30, 0x27	; 39
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	80 81       	ld	r24, Z
    3304:	8d 7f       	andi	r24, 0xFD	; 253
    3306:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX2);
    3308:	a7 e2       	ldi	r26, 0x27	; 39
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	e7 e2       	ldi	r30, 0x27	; 39
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	8b 7f       	andi	r24, 0xFB	; 251
    3314:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    3316:	a7 e2       	ldi	r26, 0x27	; 39
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	e7 e2       	ldi	r30, 0x27	; 39
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	87 7f       	andi	r24, 0xF7	; 247
    3322:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX4);
    3324:	a7 e2       	ldi	r26, 0x27	; 39
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e7 e2       	ldi	r30, 0x27	; 39
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	8f 7e       	andi	r24, 0xEF	; 239
    3330:	8c 93       	st	X, r24
    3332:	d3 c0       	rjmp	.+422    	; 0x34da <ADC_Init+0x34e>
			break;

		case CHANNEL_ADC2:
			CLEAR_BIT(ADMUX, MUX0);
    3334:	a7 e2       	ldi	r26, 0x27	; 39
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e7 e2       	ldi	r30, 0x27	; 39
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	8e 7f       	andi	r24, 0xFE	; 254
    3340:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX1);
    3342:	a7 e2       	ldi	r26, 0x27	; 39
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	e7 e2       	ldi	r30, 0x27	; 39
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	80 81       	ld	r24, Z
    334c:	82 60       	ori	r24, 0x02	; 2
    334e:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX2);
    3350:	a7 e2       	ldi	r26, 0x27	; 39
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e7 e2       	ldi	r30, 0x27	; 39
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	8b 7f       	andi	r24, 0xFB	; 251
    335c:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    335e:	a7 e2       	ldi	r26, 0x27	; 39
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e7 e2       	ldi	r30, 0x27	; 39
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	87 7f       	andi	r24, 0xF7	; 247
    336a:	8c 93       	st	X, r24
    336c:	b6 c0       	rjmp	.+364    	; 0x34da <ADC_Init+0x34e>
			break;

		case CHANNEL_ADC3:
			SET_BIT(ADMUX, MUX0);
    336e:	a7 e2       	ldi	r26, 0x27	; 39
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e7 e2       	ldi	r30, 0x27	; 39
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	81 60       	ori	r24, 0x01	; 1
    337a:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX1);
    337c:	a7 e2       	ldi	r26, 0x27	; 39
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	e7 e2       	ldi	r30, 0x27	; 39
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	82 60       	ori	r24, 0x02	; 2
    3388:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX2);
    338a:	a7 e2       	ldi	r26, 0x27	; 39
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	e7 e2       	ldi	r30, 0x27	; 39
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	80 81       	ld	r24, Z
    3394:	8b 7f       	andi	r24, 0xFB	; 251
    3396:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    3398:	a7 e2       	ldi	r26, 0x27	; 39
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	e7 e2       	ldi	r30, 0x27	; 39
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	87 7f       	andi	r24, 0xF7	; 247
    33a4:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX4);
    33a6:	a7 e2       	ldi	r26, 0x27	; 39
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	e7 e2       	ldi	r30, 0x27	; 39
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	8f 7e       	andi	r24, 0xEF	; 239
    33b2:	8c 93       	st	X, r24
    33b4:	92 c0       	rjmp	.+292    	; 0x34da <ADC_Init+0x34e>
			break;

		case CHANNEL_ADC4:
			CLEAR_BIT(ADMUX, MUX0);
    33b6:	a7 e2       	ldi	r26, 0x27	; 39
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	e7 e2       	ldi	r30, 0x27	; 39
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	80 81       	ld	r24, Z
    33c0:	8e 7f       	andi	r24, 0xFE	; 254
    33c2:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX1);
    33c4:	a7 e2       	ldi	r26, 0x27	; 39
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	e7 e2       	ldi	r30, 0x27	; 39
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	8d 7f       	andi	r24, 0xFD	; 253
    33d0:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    33d2:	a7 e2       	ldi	r26, 0x27	; 39
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	e7 e2       	ldi	r30, 0x27	; 39
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	84 60       	ori	r24, 0x04	; 4
    33de:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    33e0:	a7 e2       	ldi	r26, 0x27	; 39
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	e7 e2       	ldi	r30, 0x27	; 39
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	87 7f       	andi	r24, 0xF7	; 247
    33ec:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX4);
    33ee:	a7 e2       	ldi	r26, 0x27	; 39
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	e7 e2       	ldi	r30, 0x27	; 39
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	8f 7e       	andi	r24, 0xEF	; 239
    33fa:	8c 93       	st	X, r24
    33fc:	6e c0       	rjmp	.+220    	; 0x34da <ADC_Init+0x34e>
			break;

		case CHANNEL_ADC5:
			SET_BIT(ADMUX, MUX0);
    33fe:	a7 e2       	ldi	r26, 0x27	; 39
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e7 e2       	ldi	r30, 0x27	; 39
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	81 60       	ori	r24, 0x01	; 1
    340a:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX1);
    340c:	a7 e2       	ldi	r26, 0x27	; 39
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	e7 e2       	ldi	r30, 0x27	; 39
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	8d 7f       	andi	r24, 0xFD	; 253
    3418:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    341a:	a7 e2       	ldi	r26, 0x27	; 39
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	e7 e2       	ldi	r30, 0x27	; 39
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	84 60       	ori	r24, 0x04	; 4
    3426:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    3428:	a7 e2       	ldi	r26, 0x27	; 39
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	e7 e2       	ldi	r30, 0x27	; 39
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	87 7f       	andi	r24, 0xF7	; 247
    3434:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX4);
    3436:	a7 e2       	ldi	r26, 0x27	; 39
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e7 e2       	ldi	r30, 0x27	; 39
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	8f 7e       	andi	r24, 0xEF	; 239
    3442:	8c 93       	st	X, r24
    3444:	4a c0       	rjmp	.+148    	; 0x34da <ADC_Init+0x34e>
			break;

		case CHANNEL_ADC6:
			CLEAR_BIT(ADMUX, MUX0);
    3446:	a7 e2       	ldi	r26, 0x27	; 39
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e7 e2       	ldi	r30, 0x27	; 39
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	8e 7f       	andi	r24, 0xFE	; 254
    3452:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX1);
    3454:	a7 e2       	ldi	r26, 0x27	; 39
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e7 e2       	ldi	r30, 0x27	; 39
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	82 60       	ori	r24, 0x02	; 2
    3460:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    3462:	a7 e2       	ldi	r26, 0x27	; 39
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	e7 e2       	ldi	r30, 0x27	; 39
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	84 60       	ori	r24, 0x04	; 4
    346e:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    3470:	a7 e2       	ldi	r26, 0x27	; 39
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e7 e2       	ldi	r30, 0x27	; 39
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	87 7f       	andi	r24, 0xF7	; 247
    347c:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX4);
    347e:	a7 e2       	ldi	r26, 0x27	; 39
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e7 e2       	ldi	r30, 0x27	; 39
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	8f 7e       	andi	r24, 0xEF	; 239
    348a:	8c 93       	st	X, r24
    348c:	26 c0       	rjmp	.+76     	; 0x34da <ADC_Init+0x34e>
			break;

		case CHANNEL_ADC7:
			SET_BIT(ADMUX, MUX0);
    348e:	a7 e2       	ldi	r26, 0x27	; 39
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	e7 e2       	ldi	r30, 0x27	; 39
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	81 60       	ori	r24, 0x01	; 1
    349a:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX1);
    349c:	a7 e2       	ldi	r26, 0x27	; 39
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e7 e2       	ldi	r30, 0x27	; 39
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	82 60       	ori	r24, 0x02	; 2
    34a8:	8c 93       	st	X, r24
			SET_BIT(ADMUX, MUX2);
    34aa:	a7 e2       	ldi	r26, 0x27	; 39
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	e7 e2       	ldi	r30, 0x27	; 39
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	84 60       	ori	r24, 0x04	; 4
    34b6:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX3);
    34b8:	a7 e2       	ldi	r26, 0x27	; 39
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e7 e2       	ldi	r30, 0x27	; 39
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	87 7f       	andi	r24, 0xF7	; 247
    34c4:	8c 93       	st	X, r24
			CLEAR_BIT(ADMUX, MUX4);
    34c6:	a7 e2       	ldi	r26, 0x27	; 39
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	e7 e2       	ldi	r30, 0x27	; 39
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	8f 7e       	andi	r24, 0xEF	; 239
    34d2:	8c 93       	st	X, r24
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <ADC_Init+0x34e>
			break;

		default:
			return ADC_E_NOK;
    34d6:	19 8a       	std	Y+17, r1	; 0x11
    34d8:	24 c2       	rjmp	.+1096   	; 0x3922 <ADC_Init+0x796>
	}

	switch(confg_s->u8_ADC_prescaler)
    34da:	ed 81       	ldd	r30, Y+5	; 0x05
    34dc:	fe 81       	ldd	r31, Y+6	; 0x06
    34de:	83 81       	ldd	r24, Z+3	; 0x03
    34e0:	28 2f       	mov	r18, r24
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	3e 87       	std	Y+14, r19	; 0x0e
    34e6:	2d 87       	std	Y+13, r18	; 0x0d
    34e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ec:	83 30       	cpi	r24, 0x03	; 3
    34ee:	91 05       	cpc	r25, r1
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <ADC_Init+0x368>
    34f2:	70 c0       	rjmp	.+224    	; 0x35d4 <ADC_Init+0x448>
    34f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    34f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    34f8:	24 30       	cpi	r18, 0x04	; 4
    34fa:	31 05       	cpc	r19, r1
    34fc:	84 f4       	brge	.+32     	; 0x351e <ADC_Init+0x392>
    34fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3500:	9e 85       	ldd	r25, Y+14	; 0x0e
    3502:	81 30       	cpi	r24, 0x01	; 1
    3504:	91 05       	cpc	r25, r1
    3506:	d1 f1       	breq	.+116    	; 0x357c <ADC_Init+0x3f0>
    3508:	2d 85       	ldd	r18, Y+13	; 0x0d
    350a:	3e 85       	ldd	r19, Y+14	; 0x0e
    350c:	22 30       	cpi	r18, 0x02	; 2
    350e:	31 05       	cpc	r19, r1
    3510:	0c f0       	brlt	.+2      	; 0x3514 <ADC_Init+0x388>
    3512:	4a c0       	rjmp	.+148    	; 0x35a8 <ADC_Init+0x41c>
    3514:	8d 85       	ldd	r24, Y+13	; 0x0d
    3516:	9e 85       	ldd	r25, Y+14	; 0x0e
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	d1 f0       	breq	.+52     	; 0x3550 <ADC_Init+0x3c4>
    351c:	c9 c0       	rjmp	.+402    	; 0x36b0 <ADC_Init+0x524>
    351e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3520:	3e 85       	ldd	r19, Y+14	; 0x0e
    3522:	25 30       	cpi	r18, 0x05	; 5
    3524:	31 05       	cpc	r19, r1
    3526:	09 f4       	brne	.+2      	; 0x352a <ADC_Init+0x39e>
    3528:	81 c0       	rjmp	.+258    	; 0x362c <ADC_Init+0x4a0>
    352a:	8d 85       	ldd	r24, Y+13	; 0x0d
    352c:	9e 85       	ldd	r25, Y+14	; 0x0e
    352e:	85 30       	cpi	r24, 0x05	; 5
    3530:	91 05       	cpc	r25, r1
    3532:	0c f4       	brge	.+2      	; 0x3536 <ADC_Init+0x3aa>
    3534:	65 c0       	rjmp	.+202    	; 0x3600 <ADC_Init+0x474>
    3536:	2d 85       	ldd	r18, Y+13	; 0x0d
    3538:	3e 85       	ldd	r19, Y+14	; 0x0e
    353a:	26 30       	cpi	r18, 0x06	; 6
    353c:	31 05       	cpc	r19, r1
    353e:	09 f4       	brne	.+2      	; 0x3542 <ADC_Init+0x3b6>
    3540:	8b c0       	rjmp	.+278    	; 0x3658 <ADC_Init+0x4cc>
    3542:	8d 85       	ldd	r24, Y+13	; 0x0d
    3544:	9e 85       	ldd	r25, Y+14	; 0x0e
    3546:	87 30       	cpi	r24, 0x07	; 7
    3548:	91 05       	cpc	r25, r1
    354a:	09 f4       	brne	.+2      	; 0x354e <ADC_Init+0x3c2>
    354c:	9b c0       	rjmp	.+310    	; 0x3684 <ADC_Init+0x4f8>
    354e:	b0 c0       	rjmp	.+352    	; 0x36b0 <ADC_Init+0x524>
	{
		case ADC_PRESCALER_0:
			CLEAR_BIT(ADCSRA, ADPS0);
    3550:	a6 e2       	ldi	r26, 0x26	; 38
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e6 e2       	ldi	r30, 0x26	; 38
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	8e 7f       	andi	r24, 0xFE	; 254
    355c:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS1);
    355e:	a6 e2       	ldi	r26, 0x26	; 38
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	e6 e2       	ldi	r30, 0x26	; 38
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	8d 7f       	andi	r24, 0xFD	; 253
    356a:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS2);
    356c:	a6 e2       	ldi	r26, 0x26	; 38
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	e6 e2       	ldi	r30, 0x26	; 38
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	8b 7f       	andi	r24, 0xFB	; 251
    3578:	8c 93       	st	X, r24
    357a:	9c c0       	rjmp	.+312    	; 0x36b4 <ADC_Init+0x528>
			break;

		case ADC_PRESCALER_2:
			SET_BIT(ADCSRA, ADPS0);
    357c:	a6 e2       	ldi	r26, 0x26	; 38
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	e6 e2       	ldi	r30, 0x26	; 38
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	81 60       	ori	r24, 0x01	; 1
    3588:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS1);
    358a:	a6 e2       	ldi	r26, 0x26	; 38
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	e6 e2       	ldi	r30, 0x26	; 38
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	8d 7f       	andi	r24, 0xFD	; 253
    3596:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS2);
    3598:	a6 e2       	ldi	r26, 0x26	; 38
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e6 e2       	ldi	r30, 0x26	; 38
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	8b 7f       	andi	r24, 0xFB	; 251
    35a4:	8c 93       	st	X, r24
    35a6:	86 c0       	rjmp	.+268    	; 0x36b4 <ADC_Init+0x528>
			break;

		case ADC_PRESCALER_4:
			CLEAR_BIT(ADCSRA, ADPS0);
    35a8:	a6 e2       	ldi	r26, 0x26	; 38
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e6 e2       	ldi	r30, 0x26	; 38
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	8e 7f       	andi	r24, 0xFE	; 254
    35b4:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS1);
    35b6:	a6 e2       	ldi	r26, 0x26	; 38
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	e6 e2       	ldi	r30, 0x26	; 38
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	82 60       	ori	r24, 0x02	; 2
    35c2:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS2);
    35c4:	a6 e2       	ldi	r26, 0x26	; 38
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e6 e2       	ldi	r30, 0x26	; 38
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	8b 7f       	andi	r24, 0xFB	; 251
    35d0:	8c 93       	st	X, r24
    35d2:	70 c0       	rjmp	.+224    	; 0x36b4 <ADC_Init+0x528>
			break;

		case ADC_PRESCALER_8:
			SET_BIT(ADCSRA, ADPS0);
    35d4:	a6 e2       	ldi	r26, 0x26	; 38
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	e6 e2       	ldi	r30, 0x26	; 38
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	81 60       	ori	r24, 0x01	; 1
    35e0:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS1);
    35e2:	a6 e2       	ldi	r26, 0x26	; 38
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e6 e2       	ldi	r30, 0x26	; 38
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	82 60       	ori	r24, 0x02	; 2
    35ee:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS2);
    35f0:	a6 e2       	ldi	r26, 0x26	; 38
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e6 e2       	ldi	r30, 0x26	; 38
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	8b 7f       	andi	r24, 0xFB	; 251
    35fc:	8c 93       	st	X, r24
    35fe:	5a c0       	rjmp	.+180    	; 0x36b4 <ADC_Init+0x528>
			break;

		case ADC_PRESCALER_16:
			CLEAR_BIT(ADCSRA, ADPS0);
    3600:	a6 e2       	ldi	r26, 0x26	; 38
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e6 e2       	ldi	r30, 0x26	; 38
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	8e 7f       	andi	r24, 0xFE	; 254
    360c:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS1);
    360e:	a6 e2       	ldi	r26, 0x26	; 38
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e6 e2       	ldi	r30, 0x26	; 38
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	8d 7f       	andi	r24, 0xFD	; 253
    361a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS2);
    361c:	a6 e2       	ldi	r26, 0x26	; 38
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e6 e2       	ldi	r30, 0x26	; 38
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	84 60       	ori	r24, 0x04	; 4
    3628:	8c 93       	st	X, r24
    362a:	44 c0       	rjmp	.+136    	; 0x36b4 <ADC_Init+0x528>
			break;

		case ADC_PRESCALER_32:
			SET_BIT(ADCSRA, ADPS0);
    362c:	a6 e2       	ldi	r26, 0x26	; 38
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e6 e2       	ldi	r30, 0x26	; 38
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	81 60       	ori	r24, 0x01	; 1
    3638:	8c 93       	st	X, r24
			CLEAR_BIT(ADCSRA, ADPS1);
    363a:	a6 e2       	ldi	r26, 0x26	; 38
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	e6 e2       	ldi	r30, 0x26	; 38
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	8d 7f       	andi	r24, 0xFD	; 253
    3646:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS2);
    3648:	a6 e2       	ldi	r26, 0x26	; 38
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	e6 e2       	ldi	r30, 0x26	; 38
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	84 60       	ori	r24, 0x04	; 4
    3654:	8c 93       	st	X, r24
    3656:	2e c0       	rjmp	.+92     	; 0x36b4 <ADC_Init+0x528>
			break;

		case ADC_PRESCALER_64:
			CLEAR_BIT(ADCSRA, ADPS0);
    3658:	a6 e2       	ldi	r26, 0x26	; 38
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	e6 e2       	ldi	r30, 0x26	; 38
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	8e 7f       	andi	r24, 0xFE	; 254
    3664:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS1);
    3666:	a6 e2       	ldi	r26, 0x26	; 38
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	e6 e2       	ldi	r30, 0x26	; 38
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	82 60       	ori	r24, 0x02	; 2
    3672:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS2);
    3674:	a6 e2       	ldi	r26, 0x26	; 38
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	e6 e2       	ldi	r30, 0x26	; 38
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	80 81       	ld	r24, Z
    367e:	84 60       	ori	r24, 0x04	; 4
    3680:	8c 93       	st	X, r24
    3682:	18 c0       	rjmp	.+48     	; 0x36b4 <ADC_Init+0x528>
			break;

		case ADC_PRESCALER_128:
			SET_BIT(ADCSRA, ADPS0);
    3684:	a6 e2       	ldi	r26, 0x26	; 38
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	e6 e2       	ldi	r30, 0x26	; 38
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	81 60       	ori	r24, 0x01	; 1
    3690:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS1);
    3692:	a6 e2       	ldi	r26, 0x26	; 38
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	e6 e2       	ldi	r30, 0x26	; 38
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	82 60       	ori	r24, 0x02	; 2
    369e:	8c 93       	st	X, r24
			SET_BIT(ADCSRA, ADPS2);
    36a0:	a6 e2       	ldi	r26, 0x26	; 38
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e6 e2       	ldi	r30, 0x26	; 38
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	84 60       	ori	r24, 0x04	; 4
    36ac:	8c 93       	st	X, r24
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <ADC_Init+0x528>
			break;

		default:
			return ADC_E_NOK;
    36b0:	19 8a       	std	Y+17, r1	; 0x11
    36b2:	37 c1       	rjmp	.+622    	; 0x3922 <ADC_Init+0x796>
	}

	switch(confg_s->u8_ADC_Adjustment)
    36b4:	ed 81       	ldd	r30, Y+5	; 0x05
    36b6:	fe 81       	ldd	r31, Y+6	; 0x06
    36b8:	81 81       	ldd	r24, Z+1	; 0x01
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	3c 87       	std	Y+12, r19	; 0x0c
    36c0:	2b 87       	std	Y+11, r18	; 0x0b
    36c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    36c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    36c6:	00 97       	sbiw	r24, 0x00	; 0
    36c8:	69 f0       	breq	.+26     	; 0x36e4 <ADC_Init+0x558>
    36ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    36cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    36ce:	21 30       	cpi	r18, 0x01	; 1
    36d0:	31 05       	cpc	r19, r1
    36d2:	81 f4       	brne	.+32     	; 0x36f4 <ADC_Init+0x568>
	{
		case LEFT_ADJUSTMENT:
			SET_BIT(ADMUX, ADLAR);
    36d4:	a7 e2       	ldi	r26, 0x27	; 39
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e7 e2       	ldi	r30, 0x27	; 39
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	80 62       	ori	r24, 0x20	; 32
    36e0:	8c 93       	st	X, r24
    36e2:	0a c0       	rjmp	.+20     	; 0x36f8 <ADC_Init+0x56c>
			break;

		case RIGHT_ADJUSTMENT:
			CLEAR_BIT(ADMUX, ADLAR);
    36e4:	a7 e2       	ldi	r26, 0x27	; 39
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	e7 e2       	ldi	r30, 0x27	; 39
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	8f 7d       	andi	r24, 0xDF	; 223
    36f0:	8c 93       	st	X, r24
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <ADC_Init+0x56c>
			break;

		default:
			return ADC_E_NOK;
    36f4:	19 8a       	std	Y+17, r1	; 0x11
    36f6:	15 c1       	rjmp	.+554    	; 0x3922 <ADC_Init+0x796>
	}

	switch(confg_s->u8_ADC_Mode)
    36f8:	ed 81       	ldd	r30, Y+5	; 0x05
    36fa:	fe 81       	ldd	r31, Y+6	; 0x06
    36fc:	84 81       	ldd	r24, Z+4	; 0x04
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	3a 87       	std	Y+10, r19	; 0x0a
    3704:	29 87       	std	Y+9, r18	; 0x09
    3706:	89 85       	ldd	r24, Y+9	; 0x09
    3708:	9a 85       	ldd	r25, Y+10	; 0x0a
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	31 f0       	breq	.+12     	; 0x371a <ADC_Init+0x58e>
    370e:	29 85       	ldd	r18, Y+9	; 0x09
    3710:	3a 85       	ldd	r19, Y+10	; 0x0a
    3712:	21 30       	cpi	r18, 0x01	; 1
    3714:	31 05       	cpc	r19, r1
    3716:	59 f0       	breq	.+22     	; 0x372e <ADC_Init+0x5a2>
    3718:	11 c0       	rjmp	.+34     	; 0x373c <ADC_Init+0x5b0>
	{
		case ADC_INTERRUPT_MODE:
			// Enable Global interrupt
			GLOBALInt_enable();
    371a:	0e 94 1e 12 	call	0x243c	; 0x243c <GLOBALInt_enable>
			// ADC Interrupt Enable
			SET_BIT(ADCSRA, ADIE);
    371e:	a6 e2       	ldi	r26, 0x26	; 38
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e6 e2       	ldi	r30, 0x26	; 38
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	88 60       	ori	r24, 0x08	; 8
    372a:	8c 93       	st	X, r24
    372c:	09 c0       	rjmp	.+18     	; 0x3740 <ADC_Init+0x5b4>
			break;

		case ADC_POLLING_MODE:
			if(confg_s->u8_ADC_trigger_mode != ADC_AUTO_TRIGGER_MODE_FREE_RUNNING)
    372e:	ed 81       	ldd	r30, Y+5	; 0x05
    3730:	fe 81       	ldd	r31, Y+6	; 0x06
    3732:	85 81       	ldd	r24, Z+5	; 0x05
    3734:	88 23       	and	r24, r24
    3736:	21 f0       	breq	.+8      	; 0x3740 <ADC_Init+0x5b4>
				return ADC_E_NOK;
    3738:	19 8a       	std	Y+17, r1	; 0x11
    373a:	f3 c0       	rjmp	.+486    	; 0x3922 <ADC_Init+0x796>
			break;

		default:
			return ADC_E_NOK;
    373c:	19 8a       	std	Y+17, r1	; 0x11
    373e:	f1 c0       	rjmp	.+482    	; 0x3922 <ADC_Init+0x796>
	}

	switch(confg_s->u8_ADC_trigger_mode)
    3740:	ed 81       	ldd	r30, Y+5	; 0x05
    3742:	fe 81       	ldd	r31, Y+6	; 0x06
    3744:	85 81       	ldd	r24, Z+5	; 0x05
    3746:	28 2f       	mov	r18, r24
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	38 87       	std	Y+8, r19	; 0x08
    374c:	2f 83       	std	Y+7, r18	; 0x07
    374e:	8f 81       	ldd	r24, Y+7	; 0x07
    3750:	98 85       	ldd	r25, Y+8	; 0x08
    3752:	82 30       	cpi	r24, 0x02	; 2
    3754:	91 05       	cpc	r25, r1
    3756:	69 f1       	breq	.+90     	; 0x37b2 <ADC_Init+0x626>
    3758:	2f 81       	ldd	r18, Y+7	; 0x07
    375a:	38 85       	ldd	r19, Y+8	; 0x08
    375c:	23 30       	cpi	r18, 0x03	; 3
    375e:	31 05       	cpc	r19, r1
    3760:	2c f4       	brge	.+10     	; 0x376c <ADC_Init+0x5e0>
    3762:	8f 81       	ldd	r24, Y+7	; 0x07
    3764:	98 85       	ldd	r25, Y+8	; 0x08
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	71 f0       	breq	.+28     	; 0x3786 <ADC_Init+0x5fa>
    376a:	ba c0       	rjmp	.+372    	; 0x38e0 <ADC_Init+0x754>
    376c:	2f 81       	ldd	r18, Y+7	; 0x07
    376e:	38 85       	ldd	r19, Y+8	; 0x08
    3770:	23 30       	cpi	r18, 0x03	; 3
    3772:	31 05       	cpc	r19, r1
    3774:	09 f4       	brne	.+2      	; 0x3778 <ADC_Init+0x5ec>
    3776:	48 c0       	rjmp	.+144    	; 0x3808 <ADC_Init+0x67c>
    3778:	8f 81       	ldd	r24, Y+7	; 0x07
    377a:	98 85       	ldd	r25, Y+8	; 0x08
    377c:	84 30       	cpi	r24, 0x04	; 4
    377e:	91 05       	cpc	r25, r1
    3780:	09 f4       	brne	.+2      	; 0x3784 <ADC_Init+0x5f8>
    3782:	89 c0       	rjmp	.+274    	; 0x3896 <ADC_Init+0x70a>
    3784:	ad c0       	rjmp	.+346    	; 0x38e0 <ADC_Init+0x754>
	{
		case ADC_AUTO_TRIGGER_MODE_FREE_RUNNING:
			CLEAR_BIT(SFIOR, ADTS0);
    3786:	a0 e5       	ldi	r26, 0x50	; 80
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	e0 e5       	ldi	r30, 0x50	; 80
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	8f 7d       	andi	r24, 0xDF	; 223
    3792:	8c 93       	st	X, r24
			CLEAR_BIT(SFIOR, ADTS1);
    3794:	a0 e5       	ldi	r26, 0x50	; 80
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e0 e5       	ldi	r30, 0x50	; 80
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	8f 7b       	andi	r24, 0xBF	; 191
    37a0:	8c 93       	st	X, r24
			CLEAR_BIT(SFIOR, ADTS2);
    37a2:	a0 e5       	ldi	r26, 0x50	; 80
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e0 e5       	ldi	r30, 0x50	; 80
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	8f 77       	andi	r24, 0x7F	; 127
    37ae:	8c 93       	st	X, r24
    37b0:	99 c0       	rjmp	.+306    	; 0x38e4 <ADC_Init+0x758>
			break;

		case ADC_AUTO_TRIGGER_MODE_EXT_INT0:
			CLEAR_BIT(SFIOR, ADTS0);
    37b2:	a0 e5       	ldi	r26, 0x50	; 80
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e0 e5       	ldi	r30, 0x50	; 80
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	8f 7d       	andi	r24, 0xDF	; 223
    37be:	8c 93       	st	X, r24
			SET_BIT(SFIOR, ADTS1);
    37c0:	a0 e5       	ldi	r26, 0x50	; 80
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e0 e5       	ldi	r30, 0x50	; 80
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	80 64       	ori	r24, 0x40	; 64
    37cc:	8c 93       	st	X, r24
			CLEAR_BIT(SFIOR, ADTS2);
    37ce:	a0 e5       	ldi	r26, 0x50	; 80
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	e0 e5       	ldi	r30, 0x50	; 80
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	8f 77       	andi	r24, 0x7F	; 127
    37da:	8c 93       	st	X, r24

			// enable EXT INT0
			EXTInt_enable(EXT_INT0); // The ADC conversion will start at the rising edge of EXT INT0
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	0e 94 3a 12 	call	0x2474	; 0x2474 <EXTInt_enable>

			// Set the external interrupt as rising edge
			EXTInt_Mode(EXT_INT0, RISING_EDGE);
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	63 e0       	ldi	r22, 0x03	; 3
    37e6:	0e 94 b6 12 	call	0x256c	; 0x256c <EXTInt_Mode>

			// Setting PIND2 as input
			CLEAR_BIT(DDRD, 2);
    37ea:	a1 e3       	ldi	r26, 0x31	; 49
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	e1 e3       	ldi	r30, 0x31	; 49
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	80 81       	ld	r24, Z
    37f4:	8b 7f       	andi	r24, 0xFB	; 251
    37f6:	8c 93       	st	X, r24
			// Setting the internal resistor as pull down
			CLEAR_BIT(PORTD, 2);
    37f8:	a2 e3       	ldi	r26, 0x32	; 50
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	e2 e3       	ldi	r30, 0x32	; 50
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	80 81       	ld	r24, Z
    3802:	8b 7f       	andi	r24, 0xFB	; 251
    3804:	8c 93       	st	X, r24
    3806:	6e c0       	rjmp	.+220    	; 0x38e4 <ADC_Init+0x758>
			break;

		// what should i do here ? should i initialize the timer? on which pre-scaler? and how to to configure timer compare while my timer supports overflow only?
		// this case is not working, use ovf timer instead
		case ADC_AUTO_TRIGGER_MODE_TIMER0_CMP:
			SET_BIT(SFIOR, ADTS0);
    3808:	a0 e5       	ldi	r26, 0x50	; 80
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e0 e5       	ldi	r30, 0x50	; 80
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	80 62       	ori	r24, 0x20	; 32
    3814:	8c 93       	st	X, r24
			SET_BIT(SFIOR, ADTS1);
    3816:	a0 e5       	ldi	r26, 0x50	; 80
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	e0 e5       	ldi	r30, 0x50	; 80
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	80 81       	ld	r24, Z
    3820:	80 64       	ori	r24, 0x40	; 64
    3822:	8c 93       	st	X, r24
			CLEAR_BIT(SFIOR, ADTS2);
    3824:	a0 e5       	ldi	r26, 0x50	; 80
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e0 e5       	ldi	r30, 0x50	; 80
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	8f 77       	andi	r24, 0x7F	; 127
    3830:	8c 93       	st	X, r24

			// TIMER0 AS CTC MODE
			CLEAR_BIT(TCCR0, WGM00);
    3832:	a3 e5       	ldi	r26, 0x53	; 83
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e3 e5       	ldi	r30, 0x53	; 83
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	8f 7b       	andi	r24, 0xBF	; 191
    383e:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM01);
    3840:	a3 e5       	ldi	r26, 0x53	; 83
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	e3 e5       	ldi	r30, 0x53	; 83
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	88 60       	ori	r24, 0x08	; 8
    384c:	8c 93       	st	X, r24

			// TIMER0 CTC Interrupt enable
			SET_BIT(TIMSK, OCIE0);
    384e:	a9 e5       	ldi	r26, 0x59	; 89
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	e9 e5       	ldi	r30, 0x59	; 89
    3854:	f0 e0       	ldi	r31, 0x00	; 0
    3856:	80 81       	ld	r24, Z
    3858:	82 60       	ori	r24, 0x02	; 2
    385a:	8c 93       	st	X, r24

			// INIT TIMER COUNTER REGISTER
			TCNT0 = 0;
    385c:	e2 e5       	ldi	r30, 0x52	; 82
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	10 82       	st	Z, r1
			// compare match at the overflow
			OCR0 = 128;
    3862:	ec e5       	ldi	r30, 0x5C	; 92
    3864:	f0 e0       	ldi	r31, 0x00	; 0
    3866:	80 e8       	ldi	r24, 0x80	; 128
    3868:	80 83       	st	Z, r24

			// Starting timer0
			// TIMER0 CTC PRE-SCALER F_CPU
			SET_BIT(TCCR0, CS00);
    386a:	a3 e5       	ldi	r26, 0x53	; 83
    386c:	b0 e0       	ldi	r27, 0x00	; 0
    386e:	e3 e5       	ldi	r30, 0x53	; 83
    3870:	f0 e0       	ldi	r31, 0x00	; 0
    3872:	80 81       	ld	r24, Z
    3874:	81 60       	ori	r24, 0x01	; 1
    3876:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS01);
    3878:	a3 e5       	ldi	r26, 0x53	; 83
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	e3 e5       	ldi	r30, 0x53	; 83
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	80 81       	ld	r24, Z
    3882:	8d 7f       	andi	r24, 0xFD	; 253
    3884:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS02);
    3886:	a3 e5       	ldi	r26, 0x53	; 83
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e3 e5       	ldi	r30, 0x53	; 83
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	80 81       	ld	r24, Z
    3890:	8b 7f       	andi	r24, 0xFB	; 251
    3892:	8c 93       	st	X, r24
    3894:	27 c0       	rjmp	.+78     	; 0x38e4 <ADC_Init+0x758>
			break;

		case ADC_AUTO_TRIGGER_MODE_TIMER0_OVF:
			CLEAR_BIT(SFIOR, ADTS0);
    3896:	a0 e5       	ldi	r26, 0x50	; 80
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e0 e5       	ldi	r30, 0x50	; 80
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	8f 7d       	andi	r24, 0xDF	; 223
    38a2:	8c 93       	st	X, r24
			CLEAR_BIT(SFIOR, ADTS1);
    38a4:	a0 e5       	ldi	r26, 0x50	; 80
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e0 e5       	ldi	r30, 0x50	; 80
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	8f 7b       	andi	r24, 0xBF	; 191
    38b0:	8c 93       	st	X, r24
			SET_BIT(SFIOR, ADTS2);
    38b2:	a0 e5       	ldi	r26, 0x50	; 80
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e0 e5       	ldi	r30, 0x50	; 80
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	80 68       	ori	r24, 0x80	; 128
    38be:	8c 93       	st	X, r24

			Str_TimerConfiguration_t confg;
			confg.Interrupt_Mode = INTERRUPT;
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	8c 83       	std	Y+4, r24	; 0x04
			confg.Timer_Channel = TIMER0;
    38c4:	19 82       	std	Y+1, r1	; 0x01
			confg.Timer_Mode = TIMER_MODE;
    38c6:	1b 82       	std	Y+3, r1	; 0x03
			confg.Timer_Psc = F_CPU_CLOCK_TIMER_0;
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	8a 83       	std	Y+2, r24	; 0x02

			Timer_Init(&confg);
    38cc:	ce 01       	movw	r24, r28
    38ce:	01 96       	adiw	r24, 0x01	; 1
    38d0:	0e 94 fe 09 	call	0x13fc	; 0x13fc <Timer_Init>
			Timer_Start(TIMER0, TIMER0_OVERFLOW);
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	6f ef       	ldi	r22, 0xFF	; 255
    38d8:	70 e0       	ldi	r23, 0x00	; 0
    38da:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Timer_Start>
    38de:	02 c0       	rjmp	.+4      	; 0x38e4 <ADC_Init+0x758>
			break;

		default:
			return ADC_E_NOK;
    38e0:	19 8a       	std	Y+17, r1	; 0x11
    38e2:	1f c0       	rjmp	.+62     	; 0x3922 <ADC_Init+0x796>
	}

	if(confg_s->u8_ADC_trigger_mode != ADC_AUTO_TRIGGER_MODE_FREE_RUNNING)
    38e4:	ed 81       	ldd	r30, Y+5	; 0x05
    38e6:	fe 81       	ldd	r31, Y+6	; 0x06
    38e8:	85 81       	ldd	r24, Z+5	; 0x05
    38ea:	88 23       	and	r24, r24
    38ec:	39 f0       	breq	.+14     	; 0x38fc <ADC_Init+0x770>
		SET_BIT(ADCSRA, ADATE);
    38ee:	a6 e2       	ldi	r26, 0x26	; 38
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	e6 e2       	ldi	r30, 0x26	; 38
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 81       	ld	r24, Z
    38f8:	80 62       	ori	r24, 0x20	; 32
    38fa:	8c 93       	st	X, r24

	// Everything is fine then enable the ADC
	SET_BIT(ADCSRA, ADEN);
    38fc:	a6 e2       	ldi	r26, 0x26	; 38
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	e6 e2       	ldi	r30, 0x26	; 38
    3902:	f0 e0       	ldi	r31, 0x00	; 0
    3904:	80 81       	ld	r24, Z
    3906:	80 68       	ori	r24, 0x80	; 128
    3908:	8c 93       	st	X, r24
	// internal buffer for adc mode (polling, interrupt)
	ADC_Mode_Buffer = confg_s->u8_ADC_Mode;
    390a:	ed 81       	ldd	r30, Y+5	; 0x05
    390c:	fe 81       	ldd	r31, Y+6	; 0x06
    390e:	84 81       	ldd	r24, Z+4	; 0x04
    3910:	80 93 a1 01 	sts	0x01A1, r24
	// internal buffer for ADC Trigger Mode
	ADC_TriggerMode_Buffer = confg_s->u8_ADC_trigger_mode;
    3914:	ed 81       	ldd	r30, Y+5	; 0x05
    3916:	fe 81       	ldd	r31, Y+6	; 0x06
    3918:	85 81       	ldd	r24, Z+5	; 0x05
    391a:	80 93 a4 01 	sts	0x01A4, r24

	return ADC_E_OK;
    391e:	91 e0       	ldi	r25, 0x01	; 1
    3920:	99 8b       	std	Y+17, r25	; 0x11
    3922:	89 89       	ldd	r24, Y+17	; 0x11
}
    3924:	63 96       	adiw	r28, 0x13	; 19
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	08 95       	ret

00003936 <ADC_startConversion>:


ADC_ERROR_t ADC_startConversion()
{
    3936:	df 93       	push	r29
    3938:	cf 93       	push	r28
    393a:	0f 92       	push	r0
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
	switch(ADC_TriggerMode_Buffer)
    3940:	80 91 a4 01 	lds	r24, 0x01A4
    3944:	88 2f       	mov	r24, r24
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	00 97       	sbiw	r24, 0x00	; 0
    394a:	49 f5       	brne	.+82     	; 0x399e <ADC_startConversion+0x68>
	{
		case ADC_AUTO_TRIGGER_MODE_FREE_RUNNING:
			// starting conversion
			SET_BIT(ADCSRA, ADSC);
    394c:	a6 e2       	ldi	r26, 0x26	; 38
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	e6 e2       	ldi	r30, 0x26	; 38
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	80 64       	ori	r24, 0x40	; 64
    3958:	8c 93       	st	X, r24
			switch(ADC_Mode_Buffer)
    395a:	80 91 a1 01 	lds	r24, 0x01A1
    395e:	88 2f       	mov	r24, r24
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	81 30       	cpi	r24, 0x01	; 1
    3964:	91 05       	cpc	r25, r1
    3966:	c1 f4       	brne	.+48     	; 0x3998 <ADC_startConversion+0x62>
			{
				case ADC_POLLING_MODE:
					// wait until conversion is completed
					while(!GET_BIT(ADCSRA, ADIF));	// polling on conversion to be completed
    3968:	e6 e2       	ldi	r30, 0x26	; 38
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	88 2f       	mov	r24, r24
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	80 71       	andi	r24, 0x10	; 16
    3974:	90 70       	andi	r25, 0x00	; 0
    3976:	95 95       	asr	r25
    3978:	87 95       	ror	r24
    397a:	95 95       	asr	r25
    397c:	87 95       	ror	r24
    397e:	95 95       	asr	r25
    3980:	87 95       	ror	r24
    3982:	95 95       	asr	r25
    3984:	87 95       	ror	r24
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	79 f3       	breq	.-34     	; 0x3968 <ADC_startConversion+0x32>
					SET_BIT(ADCSRA, ADIF); // Clearing the ADC interrupt flag by setting logical one to it
    398a:	a6 e2       	ldi	r26, 0x26	; 38
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	e6 e2       	ldi	r30, 0x26	; 38
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	80 61       	ori	r24, 0x10	; 16
    3996:	8c 93       	st	X, r24
			break;

		default:
			return ADC_E_NOK;
	}
	return ADC_E_OK;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	89 83       	std	Y+1, r24	; 0x01
    399c:	01 c0       	rjmp	.+2      	; 0x39a0 <ADC_startConversion+0x6a>
					break;
			}
			break;

		default:
			return ADC_E_NOK;
    399e:	19 82       	std	Y+1, r1	; 0x01
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
	}
	return ADC_E_OK;
}
    39a2:	0f 90       	pop	r0
    39a4:	cf 91       	pop	r28
    39a6:	df 91       	pop	r29
    39a8:	08 95       	ret

000039aa <ADC_readChannel>:

void ADC_readChannel(u16_t* reading)
{
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	00 d0       	rcall	.+0      	; 0x39b0 <ADC_readChannel+0x6>
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
    39b4:	9a 83       	std	Y+2, r25	; 0x02
    39b6:	89 83       	std	Y+1, r24	; 0x01
	*reading = ADC; // reading the ADC value
    39b8:	e4 e2       	ldi	r30, 0x24	; 36
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	91 81       	ldd	r25, Z+1	; 0x01
    39c0:	e9 81       	ldd	r30, Y+1	; 0x01
    39c2:	fa 81       	ldd	r31, Y+2	; 0x02
    39c4:	91 83       	std	Z+1, r25	; 0x01
    39c6:	80 83       	st	Z, r24
}
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	cf 91       	pop	r28
    39ce:	df 91       	pop	r29
    39d0:	08 95       	ret

000039d2 <ULTRASONIC_Init>:
// Includes
#include "ultrasonic.h"


US_ERROR_t ULTRASONIC_Init(str_US_config_t *confg_s)
{
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <ULTRASONIC_Init+0x6>
    39d8:	0f 92       	push	r0
    39da:	cd b7       	in	r28, 0x3d	; 61
    39dc:	de b7       	in	r29, 0x3e	; 62
    39de:	9a 83       	std	Y+2, r25	; 0x02
    39e0:	89 83       	std	Y+1, r24	; 0x01
	// ERROR CHECKING (GUARDS)
	if(confg_s->Trigger_Port < DPORTA || confg_s->Trigger_Port > DPORTD)
    39e2:	e9 81       	ldd	r30, Y+1	; 0x01
    39e4:	fa 81       	ldd	r31, Y+2	; 0x02
    39e6:	80 81       	ld	r24, Z
    39e8:	84 30       	cpi	r24, 0x04	; 4
    39ea:	10 f0       	brcs	.+4      	; 0x39f0 <ULTRASONIC_Init+0x1e>
		return US_E_NOK;
    39ec:	1b 82       	std	Y+3, r1	; 0x03
    39ee:	1f c0       	rjmp	.+62     	; 0x3a2e <ULTRASONIC_Init+0x5c>

	if(confg_s->Trigger_Pin < PIN0 || confg_s->Trigger_Pin > PIN7)
    39f0:	e9 81       	ldd	r30, Y+1	; 0x01
    39f2:	fa 81       	ldd	r31, Y+2	; 0x02
    39f4:	81 81       	ldd	r24, Z+1	; 0x01
    39f6:	87 30       	cpi	r24, 0x07	; 7
    39f8:	10 f0       	brcs	.+4      	; 0x39fe <ULTRASONIC_Init+0x2c>
		return US_E_NOK;
    39fa:	1b 82       	std	Y+3, r1	; 0x03
    39fc:	18 c0       	rjmp	.+48     	; 0x3a2e <ULTRASONIC_Init+0x5c>

	if(confg_s->Echo_Channel < US_CHANNEL_0 || confg_s->Echo_Channel > US_CHANNEL_2)
    39fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3a00:	fa 81       	ldd	r31, Y+2	; 0x02
    3a02:	82 81       	ldd	r24, Z+2	; 0x02
    3a04:	83 30       	cpi	r24, 0x03	; 3
    3a06:	10 f0       	brcs	.+4      	; 0x3a0c <ULTRASONIC_Init+0x3a>
		return US_E_NOK;
    3a08:	1b 82       	std	Y+3, r1	; 0x03
    3a0a:	11 c0       	rjmp	.+34     	; 0x3a2e <ULTRASONIC_Init+0x5c>

	// Trigger pin as output
	DIO_setPin_Direction(confg_s->Trigger_Port, confg_s->Trigger_Pin, OUTPUT);
    3a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    3a10:	80 81       	ld	r24, Z
    3a12:	e9 81       	ldd	r30, Y+1	; 0x01
    3a14:	fa 81       	ldd	r31, Y+2	; 0x02
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	69 2f       	mov	r22, r25
    3a1a:	41 e0       	ldi	r20, 0x01	; 1
    3a1c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <DIO_setPin_Direction>

	// ECHO INIT (ICU INIT)
	ICU_Init(confg_s->Echo_Channel);
    3a20:	e9 81       	ldd	r30, Y+1	; 0x01
    3a22:	fa 81       	ldd	r31, Y+2	; 0x02
    3a24:	82 81       	ldd	r24, Z+2	; 0x02
    3a26:	0e 94 17 07 	call	0xe2e	; 0xe2e <ICU_Init>

	return US_E_OK;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	8b 83       	std	Y+3, r24	; 0x03
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	08 95       	ret

00003a3c <ULTRASONIC_readDistance>:

US_ERROR_t ULTRASONIC_readDistance(str_US_config_t *confg_s)
{
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	6d 97       	sbiw	r28, 0x1d	; 29
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	9c 8f       	std	Y+28, r25	; 0x1c
    3a52:	8b 8f       	std	Y+27, r24	; 0x1b
	// ERROR CHECKING (GUARDS)
	if(confg_s->Trigger_Port < DPORTA || confg_s->Trigger_Port > DPORTD)
    3a54:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3a56:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3a58:	80 81       	ld	r24, Z
    3a5a:	84 30       	cpi	r24, 0x04	; 4
    3a5c:	10 f0       	brcs	.+4      	; 0x3a62 <ULTRASONIC_readDistance+0x26>
		return US_E_NOK;
    3a5e:	1d 8e       	std	Y+29, r1	; 0x1d
    3a60:	04 c1       	rjmp	.+520    	; 0x3c6a <ULTRASONIC_readDistance+0x22e>

	if(confg_s->Trigger_Pin < PIN0 || confg_s->Trigger_Pin > PIN7)
    3a62:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3a64:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3a66:	81 81       	ldd	r24, Z+1	; 0x01
    3a68:	87 30       	cpi	r24, 0x07	; 7
    3a6a:	10 f0       	brcs	.+4      	; 0x3a70 <ULTRASONIC_readDistance+0x34>
		return US_E_NOK;
    3a6c:	1d 8e       	std	Y+29, r1	; 0x1d
    3a6e:	fd c0       	rjmp	.+506    	; 0x3c6a <ULTRASONIC_readDistance+0x22e>

	if(confg_s->Echo_Channel < US_CHANNEL_0 || confg_s->Echo_Channel > US_CHANNEL_2)
    3a70:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3a72:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3a74:	82 81       	ldd	r24, Z+2	; 0x02
    3a76:	83 30       	cpi	r24, 0x03	; 3
    3a78:	10 f0       	brcs	.+4      	; 0x3a7e <ULTRASONIC_readDistance+0x42>
		return US_E_NOK;
    3a7a:	1d 8e       	std	Y+29, r1	; 0x1d
    3a7c:	f6 c0       	rjmp	.+492    	; 0x3c6a <ULTRASONIC_readDistance+0x22e>

	// Triggering the ultrasonic to start sending sound waves (10+ microSec wave)
	DIO_setPin_Value(confg_s->Trigger_Port, confg_s->Trigger_Pin, HIGH);
    3a7e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3a80:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3a82:	80 81       	ld	r24, Z
    3a84:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3a86:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3a88:	91 81       	ldd	r25, Z+1	; 0x01
    3a8a:	69 2f       	mov	r22, r25
    3a8c:	41 e0       	ldi	r20, 0x01	; 1
    3a8e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <DIO_setPin_Value>
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	a0 e3       	ldi	r26, 0x30	; 48
    3a98:	b1 e4       	ldi	r27, 0x41	; 65
    3a9a:	8d 8b       	std	Y+21, r24	; 0x15
    3a9c:	9e 8b       	std	Y+22, r25	; 0x16
    3a9e:	af 8b       	std	Y+23, r26	; 0x17
    3aa0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aaa:	2b ea       	ldi	r18, 0xAB	; 171
    3aac:	3a ea       	ldi	r19, 0xAA	; 170
    3aae:	4a ea       	ldi	r20, 0xAA	; 170
    3ab0:	5e e3       	ldi	r21, 0x3E	; 62
    3ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	89 8b       	std	Y+17, r24	; 0x11
    3abc:	9a 8b       	std	Y+18, r25	; 0x12
    3abe:	ab 8b       	std	Y+19, r26	; 0x13
    3ac0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3ac2:	69 89       	ldd	r22, Y+17	; 0x11
    3ac4:	7a 89       	ldd	r23, Y+18	; 0x12
    3ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	40 e8       	ldi	r20, 0x80	; 128
    3ad0:	5f e3       	ldi	r21, 0x3F	; 63
    3ad2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ad6:	88 23       	and	r24, r24
    3ad8:	1c f4       	brge	.+6      	; 0x3ae0 <ULTRASONIC_readDistance+0xa4>
		__ticks = 1;
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	88 8b       	std	Y+16, r24	; 0x10
    3ade:	91 c0       	rjmp	.+290    	; 0x3c02 <ULTRASONIC_readDistance+0x1c6>
	else if (__tmp > 255)
    3ae0:	69 89       	ldd	r22, Y+17	; 0x11
    3ae2:	7a 89       	ldd	r23, Y+18	; 0x12
    3ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	4f e7       	ldi	r20, 0x7F	; 127
    3aee:	53 e4       	ldi	r21, 0x43	; 67
    3af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3af4:	18 16       	cp	r1, r24
    3af6:	0c f0       	brlt	.+2      	; 0x3afa <ULTRASONIC_readDistance+0xbe>
    3af8:	7b c0       	rjmp	.+246    	; 0x3bf0 <ULTRASONIC_readDistance+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    3afa:	6d 89       	ldd	r22, Y+21	; 0x15
    3afc:	7e 89       	ldd	r23, Y+22	; 0x16
    3afe:	8f 89       	ldd	r24, Y+23	; 0x17
    3b00:	98 8d       	ldd	r25, Y+24	; 0x18
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	4a e7       	ldi	r20, 0x7A	; 122
    3b08:	54 e4       	ldi	r21, 0x44	; 68
    3b0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	8c 87       	std	Y+12, r24	; 0x0c
    3b14:	9d 87       	std	Y+13, r25	; 0x0d
    3b16:	ae 87       	std	Y+14, r26	; 0x0e
    3b18:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b1a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b1c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b20:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	4a e7       	ldi	r20, 0x7A	; 122
    3b28:	53 e4       	ldi	r21, 0x43	; 67
    3b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	88 87       	std	Y+8, r24	; 0x08
    3b34:	99 87       	std	Y+9, r25	; 0x09
    3b36:	aa 87       	std	Y+10, r26	; 0x0a
    3b38:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b3a:	68 85       	ldd	r22, Y+8	; 0x08
    3b3c:	79 85       	ldd	r23, Y+9	; 0x09
    3b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b40:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	40 e8       	ldi	r20, 0x80	; 128
    3b48:	5f e3       	ldi	r21, 0x3F	; 63
    3b4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b4e:	88 23       	and	r24, r24
    3b50:	2c f4       	brge	.+10     	; 0x3b5c <ULTRASONIC_readDistance+0x120>
		__ticks = 1;
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	9f 83       	std	Y+7, r25	; 0x07
    3b58:	8e 83       	std	Y+6, r24	; 0x06
    3b5a:	3f c0       	rjmp	.+126    	; 0x3bda <ULTRASONIC_readDistance+0x19e>
	else if (__tmp > 65535)
    3b5c:	68 85       	ldd	r22, Y+8	; 0x08
    3b5e:	79 85       	ldd	r23, Y+9	; 0x09
    3b60:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b62:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	3f ef       	ldi	r19, 0xFF	; 255
    3b68:	4f e7       	ldi	r20, 0x7F	; 127
    3b6a:	57 e4       	ldi	r21, 0x47	; 71
    3b6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b70:	18 16       	cp	r1, r24
    3b72:	4c f5       	brge	.+82     	; 0x3bc6 <ULTRASONIC_readDistance+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b74:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b76:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b78:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e2       	ldi	r20, 0x20	; 32
    3b82:	51 e4       	ldi	r21, 0x41	; 65
    3b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	bc 01       	movw	r22, r24
    3b8e:	cd 01       	movw	r24, r26
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	9f 83       	std	Y+7, r25	; 0x07
    3b9a:	8e 83       	std	Y+6, r24	; 0x06
    3b9c:	0f c0       	rjmp	.+30     	; 0x3bbc <ULTRASONIC_readDistance+0x180>
    3b9e:	89 e1       	ldi	r24, 0x19	; 25
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	9d 83       	std	Y+5, r25	; 0x05
    3ba4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <ULTRASONIC_readDistance+0x16e>
    3bae:	9d 83       	std	Y+5, r25	; 0x05
    3bb0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	9f 83       	std	Y+7, r25	; 0x07
    3bba:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	69 f7       	brne	.-38     	; 0x3b9e <ULTRASONIC_readDistance+0x162>
    3bc4:	24 c0       	rjmp	.+72     	; 0x3c0e <ULTRASONIC_readDistance+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc6:	68 85       	ldd	r22, Y+8	; 0x08
    3bc8:	79 85       	ldd	r23, Y+9	; 0x09
    3bca:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	9f 83       	std	Y+7, r25	; 0x07
    3bd8:	8e 83       	std	Y+6, r24	; 0x06
    3bda:	8e 81       	ldd	r24, Y+6	; 0x06
    3bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    3bde:	9b 83       	std	Y+3, r25	; 0x03
    3be0:	8a 83       	std	Y+2, r24	; 0x02
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	9b 81       	ldd	r25, Y+3	; 0x03
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <ULTRASONIC_readDistance+0x1aa>
    3bea:	9b 83       	std	Y+3, r25	; 0x03
    3bec:	8a 83       	std	Y+2, r24	; 0x02
    3bee:	0f c0       	rjmp	.+30     	; 0x3c0e <ULTRASONIC_readDistance+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bf0:	69 89       	ldd	r22, Y+17	; 0x11
    3bf2:	7a 89       	ldd	r23, Y+18	; 0x12
    3bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	88 8b       	std	Y+16, r24	; 0x10
    3c02:	88 89       	ldd	r24, Y+16	; 0x10
    3c04:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	8a 95       	dec	r24
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <ULTRASONIC_readDistance+0x1cc>
    3c0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(11);
	DIO_setPin_Value(confg_s->Trigger_Port, confg_s->Trigger_Pin, LOW);
    3c0e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3c10:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3c12:	80 81       	ld	r24, Z
    3c14:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3c16:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	69 2f       	mov	r22, r25
    3c1c:	40 e0       	ldi	r20, 0x00	; 0
    3c1e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <DIO_setPin_Value>

	// Temp variable to store captured time
	u16_t time;
	// Reading the time captured by ICU
	ICU_readCapturedTime(&time);
    3c22:	ce 01       	movw	r24, r28
    3c24:	49 96       	adiw	r24, 0x19	; 25
    3c26:	0e 94 7b 07 	call	0xef6	; 0xef6 <ICU_readCapturedTime>

	// Returning the calculated distance
	confg_s->distance = (float)time/(float)US_CALIBRATION_FACTOR;
    3c2a:	89 8d       	ldd	r24, Y+25	; 0x19
    3c2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3c2e:	cc 01       	movw	r24, r24
    3c30:	a0 e0       	ldi	r26, 0x00	; 0
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	bc 01       	movw	r22, r24
    3c36:	cd 01       	movw	r24, r26
    3c38:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	bc 01       	movw	r22, r24
    3c42:	cd 01       	movw	r24, r26
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	48 e6       	ldi	r20, 0x68	; 104
    3c4a:	52 e4       	ldi	r21, 0x42	; 66
    3c4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	bc 01       	movw	r22, r24
    3c56:	cd 01       	movw	r24, r26
    3c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3c62:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3c64:	83 83       	std	Z+3, r24	; 0x03

	return US_E_OK;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	8d 8f       	std	Y+29, r24	; 0x1d
    3c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3c6c:	6d 96       	adiw	r28, 0x1d	; 29
    3c6e:	0f b6       	in	r0, 0x3f	; 63
    3c70:	f8 94       	cli
    3c72:	de bf       	out	0x3e, r29	; 62
    3c74:	0f be       	out	0x3f, r0	; 63
    3c76:	cd bf       	out	0x3d, r28	; 61
    3c78:	cf 91       	pop	r28
    3c7a:	df 91       	pop	r29
    3c7c:	08 95       	ret

00003c7e <motor1_on>:
#include "motor.h"

extern u8_t motor_speed;

void motor1_on(void)
{
    3c7e:	df 93       	push	r29
    3c80:	cf 93       	push	r28
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MOTOR1_PORT, MOTOR1_PIN); //PORTID PIN ID
    3c86:	ab e3       	ldi	r26, 0x3B	; 59
    3c88:	b0 e0       	ldi	r27, 0x00	; 0
    3c8a:	eb e3       	ldi	r30, 0x3B	; 59
    3c8c:	f0 e0       	ldi	r31, 0x00	; 0
    3c8e:	80 81       	ld	r24, Z
    3c90:	81 60       	ori	r24, 0x01	; 1
    3c92:	8c 93       	st	X, r24
}
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <motor1_off>:

void motor1_off(void)
{
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR1_PORT, MOTOR1_PIN); //PORTID PINID
    3ca2:	ab e3       	ldi	r26, 0x3B	; 59
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	eb e3       	ldi	r30, 0x3B	; 59
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	8e 7f       	andi	r24, 0xFE	; 254
    3cae:	8c 93       	st	X, r24
}
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <motor_init>:


void motor_init(motor_config* config)
{
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <motor_init+0x6>
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	9a 83       	std	Y+2, r25	; 0x02
    3cc2:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPin_Direction(config->PORT, config->PIN, OUTPUT);
    3cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc8:	81 81       	ldd	r24, Z+1	; 0x01
    3cca:	e9 81       	ldd	r30, Y+1	; 0x01
    3ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cce:	92 81       	ldd	r25, Z+2	; 0x02
    3cd0:	69 2f       	mov	r22, r25
    3cd2:	41 e0       	ldi	r20, 0x01	; 1
    3cd4:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <DIO_setPin_Direction>
	DIO_setPin_Value(config->PORT, config->PIN, LOW);
    3cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    3cda:	fa 81       	ldd	r31, Y+2	; 0x02
    3cdc:	81 81       	ldd	r24, Z+1	; 0x01
    3cde:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce2:	92 81       	ldd	r25, Z+2	; 0x02
    3ce4:	69 2f       	mov	r22, r25
    3ce6:	40 e0       	ldi	r20, 0x00	; 0
    3ce8:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <DIO_setPin_Value>

	//PWM Configs
	FPWM_TIMER2_INT_Init(F_CPU_CLOCK_256_FPWM2);
    3cec:	86 e0       	ldi	r24, 0x06	; 6
    3cee:	0e 94 4d 10 	call	0x209a	; 0x209a <FPWM_TIMER2_INT_Init>
	FPWM_TIMER2_INT_setCallBack(&motor1_on, &motor1_off);
    3cf2:	8f e3       	ldi	r24, 0x3F	; 63
    3cf4:	9e e1       	ldi	r25, 0x1E	; 30
    3cf6:	2d e4       	ldi	r18, 0x4D	; 77
    3cf8:	3e e1       	ldi	r19, 0x1E	; 30
    3cfa:	b9 01       	movw	r22, r18
    3cfc:	0e 94 ce 11 	call	0x239c	; 0x239c <FPWM_TIMER2_INT_setCallBack>

}
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	cf 91       	pop	r28
    3d06:	df 91       	pop	r29
    3d08:	08 95       	ret

00003d0a <motor_set_state>:

void motor_set_state(motor_config* config)
{
    3d0a:	df 93       	push	r29
    3d0c:	cf 93       	push	r28
    3d0e:	00 d0       	rcall	.+0      	; 0x3d10 <motor_set_state+0x6>
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	9a 83       	std	Y+2, r25	; 0x02
    3d16:	89 83       	std	Y+1, r24	; 0x01
	if(config->motorstate == ON)
    3d18:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d1c:	80 81       	ld	r24, Z
    3d1e:	88 23       	and	r24, r24
    3d20:	21 f4       	brne	.+8      	; 0x3d2a <motor_set_state+0x20>
	{
		FPWM_TIMER2_INT_setDutyCycle(10);
    3d22:	8a e0       	ldi	r24, 0x0A	; 10
    3d24:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FPWM_TIMER2_INT_setDutyCycle>
    3d28:	03 c0       	rjmp	.+6      	; 0x3d30 <motor_set_state+0x26>
	}
	else
	{
		FPWM_TIMER2_INT_setDutyCycle(0);
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FPWM_TIMER2_INT_setDutyCycle>
	}
}
    3d30:	0f 90       	pop	r0
    3d32:	0f 90       	pop	r0
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	08 95       	ret

00003d3a <motor_increase_speed>:

void motor_increase_speed()
{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62

	motor_speed += 25;
    3d42:	80 91 ba 01 	lds	r24, 0x01BA
    3d46:	87 5e       	subi	r24, 0xE7	; 231
    3d48:	80 93 ba 01 	sts	0x01BA, r24

	if(motor_speed > 100)
    3d4c:	80 91 ba 01 	lds	r24, 0x01BA
    3d50:	85 36       	cpi	r24, 0x65	; 101
    3d52:	18 f0       	brcs	.+6      	; 0x3d5a <motor_increase_speed+0x20>
	{
		motor_speed = 100;
    3d54:	84 e6       	ldi	r24, 0x64	; 100
    3d56:	80 93 ba 01 	sts	0x01BA, r24

	}

	FPWM_TIMER2_INT_setDutyCycle(motor_speed);
    3d5a:	80 91 ba 01 	lds	r24, 0x01BA
    3d5e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FPWM_TIMER2_INT_setDutyCycle>
}
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <motor_decrease_speed>:

void motor_decrease_speed()
{
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62

	motor_speed -= 25;
    3d70:	80 91 ba 01 	lds	r24, 0x01BA
    3d74:	89 51       	subi	r24, 0x19	; 25
    3d76:	80 93 ba 01 	sts	0x01BA, r24
	if(motor_speed < 0)
	{
		motor_speed = 0;
	}

	FPWM_TIMER2_INT_setDutyCycle(motor_speed);
    3d7a:	80 91 ba 01 	lds	r24, 0x01BA
    3d7e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FPWM_TIMER2_INT_setDutyCycle>

}
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <motor_increase_speed_by>:

void motor_increase_speed_by(u8_t percentage)
{
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	0f 92       	push	r0
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	89 83       	std	Y+1, r24	; 0x01
	if(percentage < 0 || percentage > 100)
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	85 36       	cpi	r24, 0x65	; 101
    3d98:	88 f4       	brcc	.+34     	; 0x3dbc <motor_increase_speed_by+0x34>
		return;

	motor_speed += percentage;
    3d9a:	90 91 ba 01 	lds	r25, 0x01BA
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	89 0f       	add	r24, r25
    3da2:	80 93 ba 01 	sts	0x01BA, r24

	if(motor_speed > 100)
    3da6:	80 91 ba 01 	lds	r24, 0x01BA
    3daa:	85 36       	cpi	r24, 0x65	; 101
    3dac:	18 f0       	brcs	.+6      	; 0x3db4 <motor_increase_speed_by+0x2c>
	{
		motor_speed = 100;
    3dae:	84 e6       	ldi	r24, 0x64	; 100
    3db0:	80 93 ba 01 	sts	0x01BA, r24

	}

	FPWM_TIMER2_INT_setDutyCycle(motor_speed);
    3db4:	80 91 ba 01 	lds	r24, 0x01BA
    3db8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FPWM_TIMER2_INT_setDutyCycle>
}
    3dbc:	0f 90       	pop	r0
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	08 95       	ret

00003dc4 <motor_decrease_speed_by>:

void motor_decrease_speed_by(u8_t percentage)
{
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	0f 92       	push	r0
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
    3dce:	89 83       	std	Y+1, r24	; 0x01
	if(percentage < 0 || percentage > 100)
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	85 36       	cpi	r24, 0x65	; 101
    3dd4:	60 f4       	brcc	.+24     	; 0x3dee <motor_decrease_speed_by+0x2a>
		return;

	motor_speed -= percentage;
    3dd6:	90 91 ba 01 	lds	r25, 0x01BA
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	29 2f       	mov	r18, r25
    3dde:	28 1b       	sub	r18, r24
    3de0:	82 2f       	mov	r24, r18
    3de2:	80 93 ba 01 	sts	0x01BA, r24
	if(motor_speed < 0)
	{
		motor_speed = 0;
	}

	FPWM_TIMER2_INT_setDutyCycle(motor_speed);
    3de6:	80 91 ba 01 	lds	r24, 0x01BA
    3dea:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FPWM_TIMER2_INT_setDutyCycle>
}
    3dee:	0f 90       	pop	r0
    3df0:	cf 91       	pop	r28
    3df2:	df 91       	pop	r29
    3df4:	08 95       	ret

00003df6 <motor_set_speed>:

void motor_set_speed(u8_t percentage)
{
    3df6:	df 93       	push	r29
    3df8:	cf 93       	push	r28
    3dfa:	0f 92       	push	r0
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	89 83       	std	Y+1, r24	; 0x01
	if(percentage < 0 || percentage > 100)
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	85 36       	cpi	r24, 0x65	; 101
    3e06:	18 f4       	brcc	.+6      	; 0x3e0e <motor_set_speed+0x18>
		return;

	FPWM_TIMER2_INT_setDutyCycle(percentage);
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <FPWM_TIMER2_INT_setDutyCycle>
}
    3e0e:	0f 90       	pop	r0
    3e10:	cf 91       	pop	r28
    3e12:	df 91       	pop	r29
    3e14:	08 95       	ret

00003e16 <DIO_vsetPINDir>:


#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	00 d0       	rcall	.+0      	; 0x3e1c <DIO_vsetPINDir+0x6>
    3e1c:	00 d0       	rcall	.+0      	; 0x3e1e <DIO_vsetPINDir+0x8>
    3e1e:	0f 92       	push	r0
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	6a 83       	std	Y+2, r22	; 0x02
    3e28:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	28 2f       	mov	r18, r24
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	3d 83       	std	Y+5, r19	; 0x05
    3e32:	2c 83       	std	Y+4, r18	; 0x04
    3e34:	8c 81       	ldd	r24, Y+4	; 0x04
    3e36:	9d 81       	ldd	r25, Y+5	; 0x05
    3e38:	82 34       	cpi	r24, 0x42	; 66
    3e3a:	91 05       	cpc	r25, r1
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <DIO_vsetPINDir+0x2a>
    3e3e:	44 c0       	rjmp	.+136    	; 0x3ec8 <DIO_vsetPINDir+0xb2>
    3e40:	2c 81       	ldd	r18, Y+4	; 0x04
    3e42:	3d 81       	ldd	r19, Y+5	; 0x05
    3e44:	23 34       	cpi	r18, 0x43	; 67
    3e46:	31 05       	cpc	r19, r1
    3e48:	34 f4       	brge	.+12     	; 0x3e56 <DIO_vsetPINDir+0x40>
    3e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e4e:	81 34       	cpi	r24, 0x41	; 65
    3e50:	91 05       	cpc	r25, r1
    3e52:	71 f0       	breq	.+28     	; 0x3e70 <DIO_vsetPINDir+0x5a>
    3e54:	bc c0       	rjmp	.+376    	; 0x3fce <DIO_vsetPINDir+0x1b8>
    3e56:	2c 81       	ldd	r18, Y+4	; 0x04
    3e58:	3d 81       	ldd	r19, Y+5	; 0x05
    3e5a:	23 34       	cpi	r18, 0x43	; 67
    3e5c:	31 05       	cpc	r19, r1
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <DIO_vsetPINDir+0x4c>
    3e60:	5f c0       	rjmp	.+190    	; 0x3f20 <DIO_vsetPINDir+0x10a>
    3e62:	8c 81       	ldd	r24, Y+4	; 0x04
    3e64:	9d 81       	ldd	r25, Y+5	; 0x05
    3e66:	84 34       	cpi	r24, 0x44	; 68
    3e68:	91 05       	cpc	r25, r1
    3e6a:	09 f4       	brne	.+2      	; 0x3e6e <DIO_vsetPINDir+0x58>
    3e6c:	85 c0       	rjmp	.+266    	; 0x3f78 <DIO_vsetPINDir+0x162>
    3e6e:	af c0       	rjmp	.+350    	; 0x3fce <DIO_vsetPINDir+0x1b8>
	{


		case 'A':
		if(direction==1)
    3e70:	8b 81       	ldd	r24, Y+3	; 0x03
    3e72:	81 30       	cpi	r24, 0x01	; 1
    3e74:	a1 f4       	brne	.+40     	; 0x3e9e <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
    3e76:	aa e3       	ldi	r26, 0x3A	; 58
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	ea e3       	ldi	r30, 0x3A	; 58
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	48 2f       	mov	r20, r24
    3e82:	8a 81       	ldd	r24, Y+2	; 0x02
    3e84:	28 2f       	mov	r18, r24
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	02 2e       	mov	r0, r18
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <DIO_vsetPINDir+0x7e>
    3e90:	88 0f       	add	r24, r24
    3e92:	99 1f       	adc	r25, r25
    3e94:	0a 94       	dec	r0
    3e96:	e2 f7       	brpl	.-8      	; 0x3e90 <DIO_vsetPINDir+0x7a>
    3e98:	84 2b       	or	r24, r20
    3e9a:	8c 93       	st	X, r24
    3e9c:	98 c0       	rjmp	.+304    	; 0x3fce <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
    3e9e:	aa e3       	ldi	r26, 0x3A	; 58
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	ea e3       	ldi	r30, 0x3A	; 58
    3ea4:	f0 e0       	ldi	r31, 0x00	; 0
    3ea6:	80 81       	ld	r24, Z
    3ea8:	48 2f       	mov	r20, r24
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	02 2e       	mov	r0, r18
    3eb6:	02 c0       	rjmp	.+4      	; 0x3ebc <DIO_vsetPINDir+0xa6>
    3eb8:	88 0f       	add	r24, r24
    3eba:	99 1f       	adc	r25, r25
    3ebc:	0a 94       	dec	r0
    3ebe:	e2 f7       	brpl	.-8      	; 0x3eb8 <DIO_vsetPINDir+0xa2>
    3ec0:	80 95       	com	r24
    3ec2:	84 23       	and	r24, r20
    3ec4:	8c 93       	st	X, r24
    3ec6:	83 c0       	rjmp	.+262    	; 0x3fce <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
    3ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eca:	81 30       	cpi	r24, 0x01	; 1
    3ecc:	a1 f4       	brne	.+40     	; 0x3ef6 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
    3ece:	a7 e3       	ldi	r26, 0x37	; 55
    3ed0:	b0 e0       	ldi	r27, 0x00	; 0
    3ed2:	e7 e3       	ldi	r30, 0x37	; 55
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	80 81       	ld	r24, Z
    3ed8:	48 2f       	mov	r20, r24
    3eda:	8a 81       	ldd	r24, Y+2	; 0x02
    3edc:	28 2f       	mov	r18, r24
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	02 2e       	mov	r0, r18
    3ee6:	02 c0       	rjmp	.+4      	; 0x3eec <DIO_vsetPINDir+0xd6>
    3ee8:	88 0f       	add	r24, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	0a 94       	dec	r0
    3eee:	e2 f7       	brpl	.-8      	; 0x3ee8 <DIO_vsetPINDir+0xd2>
    3ef0:	84 2b       	or	r24, r20
    3ef2:	8c 93       	st	X, r24
    3ef4:	6c c0       	rjmp	.+216    	; 0x3fce <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
    3ef6:	a7 e3       	ldi	r26, 0x37	; 55
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	e7 e3       	ldi	r30, 0x37	; 55
    3efc:	f0 e0       	ldi	r31, 0x00	; 0
    3efe:	80 81       	ld	r24, Z
    3f00:	48 2f       	mov	r20, r24
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	02 2e       	mov	r0, r18
    3f0e:	02 c0       	rjmp	.+4      	; 0x3f14 <DIO_vsetPINDir+0xfe>
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	0a 94       	dec	r0
    3f16:	e2 f7       	brpl	.-8      	; 0x3f10 <DIO_vsetPINDir+0xfa>
    3f18:	80 95       	com	r24
    3f1a:	84 23       	and	r24, r20
    3f1c:	8c 93       	st	X, r24
    3f1e:	57 c0       	rjmp	.+174    	; 0x3fce <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
    3f20:	8b 81       	ldd	r24, Y+3	; 0x03
    3f22:	81 30       	cpi	r24, 0x01	; 1
    3f24:	a1 f4       	brne	.+40     	; 0x3f4e <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
    3f26:	a4 e3       	ldi	r26, 0x34	; 52
    3f28:	b0 e0       	ldi	r27, 0x00	; 0
    3f2a:	e4 e3       	ldi	r30, 0x34	; 52
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	80 81       	ld	r24, Z
    3f30:	48 2f       	mov	r20, r24
    3f32:	8a 81       	ldd	r24, Y+2	; 0x02
    3f34:	28 2f       	mov	r18, r24
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	02 2e       	mov	r0, r18
    3f3e:	02 c0       	rjmp	.+4      	; 0x3f44 <DIO_vsetPINDir+0x12e>
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	0a 94       	dec	r0
    3f46:	e2 f7       	brpl	.-8      	; 0x3f40 <DIO_vsetPINDir+0x12a>
    3f48:	84 2b       	or	r24, r20
    3f4a:	8c 93       	st	X, r24
    3f4c:	40 c0       	rjmp	.+128    	; 0x3fce <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
    3f4e:	a4 e3       	ldi	r26, 0x34	; 52
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	e4 e3       	ldi	r30, 0x34	; 52
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	48 2f       	mov	r20, r24
    3f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	02 2e       	mov	r0, r18
    3f66:	02 c0       	rjmp	.+4      	; 0x3f6c <DIO_vsetPINDir+0x156>
    3f68:	88 0f       	add	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	0a 94       	dec	r0
    3f6e:	e2 f7       	brpl	.-8      	; 0x3f68 <DIO_vsetPINDir+0x152>
    3f70:	80 95       	com	r24
    3f72:	84 23       	and	r24, r20
    3f74:	8c 93       	st	X, r24
    3f76:	2b c0       	rjmp	.+86     	; 0x3fce <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
    3f78:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7a:	81 30       	cpi	r24, 0x01	; 1
    3f7c:	a1 f4       	brne	.+40     	; 0x3fa6 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
    3f7e:	a1 e3       	ldi	r26, 0x31	; 49
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	e1 e3       	ldi	r30, 0x31	; 49
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	80 81       	ld	r24, Z
    3f88:	48 2f       	mov	r20, r24
    3f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8c:	28 2f       	mov	r18, r24
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	02 2e       	mov	r0, r18
    3f96:	02 c0       	rjmp	.+4      	; 0x3f9c <DIO_vsetPINDir+0x186>
    3f98:	88 0f       	add	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	0a 94       	dec	r0
    3f9e:	e2 f7       	brpl	.-8      	; 0x3f98 <DIO_vsetPINDir+0x182>
    3fa0:	84 2b       	or	r24, r20
    3fa2:	8c 93       	st	X, r24
    3fa4:	14 c0       	rjmp	.+40     	; 0x3fce <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
    3fa6:	a1 e3       	ldi	r26, 0x31	; 49
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	e1 e3       	ldi	r30, 0x31	; 49
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	80 81       	ld	r24, Z
    3fb0:	48 2f       	mov	r20, r24
    3fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb4:	28 2f       	mov	r18, r24
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	02 2e       	mov	r0, r18
    3fbe:	02 c0       	rjmp	.+4      	; 0x3fc4 <DIO_vsetPINDir+0x1ae>
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	0a 94       	dec	r0
    3fc6:	e2 f7       	brpl	.-8      	; 0x3fc0 <DIO_vsetPINDir+0x1aa>
    3fc8:	80 95       	com	r24
    3fca:	84 23       	and	r24, r20
    3fcc:	8c 93       	st	X, r24
		}
		break;
		default:
		break;
	}
}
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	0f 90       	pop	r0
    3fd8:	cf 91       	pop	r28
    3fda:	df 91       	pop	r29
    3fdc:	08 95       	ret

00003fde <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
    3fde:	df 93       	push	r29
    3fe0:	cf 93       	push	r28
    3fe2:	00 d0       	rcall	.+0      	; 0x3fe4 <DIO_write+0x6>
    3fe4:	00 d0       	rcall	.+0      	; 0x3fe6 <DIO_write+0x8>
    3fe6:	0f 92       	push	r0
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
    3fec:	89 83       	std	Y+1, r24	; 0x01
    3fee:	6a 83       	std	Y+2, r22	; 0x02
    3ff0:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	28 2f       	mov	r18, r24
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	3d 83       	std	Y+5, r19	; 0x05
    3ffa:	2c 83       	std	Y+4, r18	; 0x04
    3ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    4000:	82 34       	cpi	r24, 0x42	; 66
    4002:	91 05       	cpc	r25, r1
    4004:	09 f4       	brne	.+2      	; 0x4008 <DIO_write+0x2a>
    4006:	44 c0       	rjmp	.+136    	; 0x4090 <DIO_write+0xb2>
    4008:	2c 81       	ldd	r18, Y+4	; 0x04
    400a:	3d 81       	ldd	r19, Y+5	; 0x05
    400c:	23 34       	cpi	r18, 0x43	; 67
    400e:	31 05       	cpc	r19, r1
    4010:	34 f4       	brge	.+12     	; 0x401e <DIO_write+0x40>
    4012:	8c 81       	ldd	r24, Y+4	; 0x04
    4014:	9d 81       	ldd	r25, Y+5	; 0x05
    4016:	81 34       	cpi	r24, 0x41	; 65
    4018:	91 05       	cpc	r25, r1
    401a:	71 f0       	breq	.+28     	; 0x4038 <DIO_write+0x5a>
    401c:	bc c0       	rjmp	.+376    	; 0x4196 <DIO_write+0x1b8>
    401e:	2c 81       	ldd	r18, Y+4	; 0x04
    4020:	3d 81       	ldd	r19, Y+5	; 0x05
    4022:	23 34       	cpi	r18, 0x43	; 67
    4024:	31 05       	cpc	r19, r1
    4026:	09 f4       	brne	.+2      	; 0x402a <DIO_write+0x4c>
    4028:	5f c0       	rjmp	.+190    	; 0x40e8 <DIO_write+0x10a>
    402a:	8c 81       	ldd	r24, Y+4	; 0x04
    402c:	9d 81       	ldd	r25, Y+5	; 0x05
    402e:	84 34       	cpi	r24, 0x44	; 68
    4030:	91 05       	cpc	r25, r1
    4032:	09 f4       	brne	.+2      	; 0x4036 <DIO_write+0x58>
    4034:	85 c0       	rjmp	.+266    	; 0x4140 <DIO_write+0x162>
    4036:	af c0       	rjmp	.+350    	; 0x4196 <DIO_write+0x1b8>
	{
		case 'A' :

		if(outputvalue==1)
    4038:	8b 81       	ldd	r24, Y+3	; 0x03
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	a1 f4       	brne	.+40     	; 0x4066 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    403e:	ab e3       	ldi	r26, 0x3B	; 59
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	eb e3       	ldi	r30, 0x3B	; 59
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	80 81       	ld	r24, Z
    4048:	48 2f       	mov	r20, r24
    404a:	8a 81       	ldd	r24, Y+2	; 0x02
    404c:	28 2f       	mov	r18, r24
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	02 2e       	mov	r0, r18
    4056:	02 c0       	rjmp	.+4      	; 0x405c <DIO_write+0x7e>
    4058:	88 0f       	add	r24, r24
    405a:	99 1f       	adc	r25, r25
    405c:	0a 94       	dec	r0
    405e:	e2 f7       	brpl	.-8      	; 0x4058 <DIO_write+0x7a>
    4060:	84 2b       	or	r24, r20
    4062:	8c 93       	st	X, r24
    4064:	98 c0       	rjmp	.+304    	; 0x4196 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    4066:	ab e3       	ldi	r26, 0x3B	; 59
    4068:	b0 e0       	ldi	r27, 0x00	; 0
    406a:	eb e3       	ldi	r30, 0x3B	; 59
    406c:	f0 e0       	ldi	r31, 0x00	; 0
    406e:	80 81       	ld	r24, Z
    4070:	48 2f       	mov	r20, r24
    4072:	8a 81       	ldd	r24, Y+2	; 0x02
    4074:	28 2f       	mov	r18, r24
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	02 2e       	mov	r0, r18
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <DIO_write+0xa6>
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	0a 94       	dec	r0
    4086:	e2 f7       	brpl	.-8      	; 0x4080 <DIO_write+0xa2>
    4088:	80 95       	com	r24
    408a:	84 23       	and	r24, r20
    408c:	8c 93       	st	X, r24
    408e:	83 c0       	rjmp	.+262    	; 0x4196 <DIO_write+0x1b8>
		}
		break ;
		case 'B':

		if(outputvalue==1)
    4090:	8b 81       	ldd	r24, Y+3	; 0x03
    4092:	81 30       	cpi	r24, 0x01	; 1
    4094:	a1 f4       	brne	.+40     	; 0x40be <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    4096:	a8 e3       	ldi	r26, 0x38	; 56
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	e8 e3       	ldi	r30, 0x38	; 56
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	48 2f       	mov	r20, r24
    40a2:	8a 81       	ldd	r24, Y+2	; 0x02
    40a4:	28 2f       	mov	r18, r24
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	02 2e       	mov	r0, r18
    40ae:	02 c0       	rjmp	.+4      	; 0x40b4 <DIO_write+0xd6>
    40b0:	88 0f       	add	r24, r24
    40b2:	99 1f       	adc	r25, r25
    40b4:	0a 94       	dec	r0
    40b6:	e2 f7       	brpl	.-8      	; 0x40b0 <DIO_write+0xd2>
    40b8:	84 2b       	or	r24, r20
    40ba:	8c 93       	st	X, r24
    40bc:	6c c0       	rjmp	.+216    	; 0x4196 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    40be:	a8 e3       	ldi	r26, 0x38	; 56
    40c0:	b0 e0       	ldi	r27, 0x00	; 0
    40c2:	e8 e3       	ldi	r30, 0x38	; 56
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	80 81       	ld	r24, Z
    40c8:	48 2f       	mov	r20, r24
    40ca:	8a 81       	ldd	r24, Y+2	; 0x02
    40cc:	28 2f       	mov	r18, r24
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	02 2e       	mov	r0, r18
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <DIO_write+0xfe>
    40d8:	88 0f       	add	r24, r24
    40da:	99 1f       	adc	r25, r25
    40dc:	0a 94       	dec	r0
    40de:	e2 f7       	brpl	.-8      	; 0x40d8 <DIO_write+0xfa>
    40e0:	80 95       	com	r24
    40e2:	84 23       	and	r24, r20
    40e4:	8c 93       	st	X, r24
    40e6:	57 c0       	rjmp	.+174    	; 0x4196 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :

		if(outputvalue==1)
    40e8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ea:	81 30       	cpi	r24, 0x01	; 1
    40ec:	a1 f4       	brne	.+40     	; 0x4116 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    40ee:	a5 e3       	ldi	r26, 0x35	; 53
    40f0:	b0 e0       	ldi	r27, 0x00	; 0
    40f2:	e5 e3       	ldi	r30, 0x35	; 53
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	80 81       	ld	r24, Z
    40f8:	48 2f       	mov	r20, r24
    40fa:	8a 81       	ldd	r24, Y+2	; 0x02
    40fc:	28 2f       	mov	r18, r24
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	02 2e       	mov	r0, r18
    4106:	02 c0       	rjmp	.+4      	; 0x410c <DIO_write+0x12e>
    4108:	88 0f       	add	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	0a 94       	dec	r0
    410e:	e2 f7       	brpl	.-8      	; 0x4108 <DIO_write+0x12a>
    4110:	84 2b       	or	r24, r20
    4112:	8c 93       	st	X, r24
    4114:	40 c0       	rjmp	.+128    	; 0x4196 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    4116:	a5 e3       	ldi	r26, 0x35	; 53
    4118:	b0 e0       	ldi	r27, 0x00	; 0
    411a:	e5 e3       	ldi	r30, 0x35	; 53
    411c:	f0 e0       	ldi	r31, 0x00	; 0
    411e:	80 81       	ld	r24, Z
    4120:	48 2f       	mov	r20, r24
    4122:	8a 81       	ldd	r24, Y+2	; 0x02
    4124:	28 2f       	mov	r18, r24
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	02 2e       	mov	r0, r18
    412e:	02 c0       	rjmp	.+4      	; 0x4134 <DIO_write+0x156>
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	0a 94       	dec	r0
    4136:	e2 f7       	brpl	.-8      	; 0x4130 <DIO_write+0x152>
    4138:	80 95       	com	r24
    413a:	84 23       	and	r24, r20
    413c:	8c 93       	st	X, r24
    413e:	2b c0       	rjmp	.+86     	; 0x4196 <DIO_write+0x1b8>
		}
		break ;
		case 'D':

		if(outputvalue==1)
    4140:	8b 81       	ldd	r24, Y+3	; 0x03
    4142:	81 30       	cpi	r24, 0x01	; 1
    4144:	a1 f4       	brne	.+40     	; 0x416e <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    4146:	a2 e3       	ldi	r26, 0x32	; 50
    4148:	b0 e0       	ldi	r27, 0x00	; 0
    414a:	e2 e3       	ldi	r30, 0x32	; 50
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	80 81       	ld	r24, Z
    4150:	48 2f       	mov	r20, r24
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	28 2f       	mov	r18, r24
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	02 2e       	mov	r0, r18
    415e:	02 c0       	rjmp	.+4      	; 0x4164 <DIO_write+0x186>
    4160:	88 0f       	add	r24, r24
    4162:	99 1f       	adc	r25, r25
    4164:	0a 94       	dec	r0
    4166:	e2 f7       	brpl	.-8      	; 0x4160 <DIO_write+0x182>
    4168:	84 2b       	or	r24, r20
    416a:	8c 93       	st	X, r24
    416c:	14 c0       	rjmp	.+40     	; 0x4196 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    416e:	a2 e3       	ldi	r26, 0x32	; 50
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	e2 e3       	ldi	r30, 0x32	; 50
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	80 81       	ld	r24, Z
    4178:	48 2f       	mov	r20, r24
    417a:	8a 81       	ldd	r24, Y+2	; 0x02
    417c:	28 2f       	mov	r18, r24
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	02 2e       	mov	r0, r18
    4186:	02 c0       	rjmp	.+4      	; 0x418c <DIO_write+0x1ae>
    4188:	88 0f       	add	r24, r24
    418a:	99 1f       	adc	r25, r25
    418c:	0a 94       	dec	r0
    418e:	e2 f7       	brpl	.-8      	; 0x4188 <DIO_write+0x1aa>
    4190:	80 95       	com	r24
    4192:	84 23       	and	r24, r20
    4194:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	cf 91       	pop	r28
    41a2:	df 91       	pop	r29
    41a4:	08 95       	ret

000041a6 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
    41a6:	df 93       	push	r29
    41a8:	cf 93       	push	r28
    41aa:	00 d0       	rcall	.+0      	; 0x41ac <DIO_u8read+0x6>
    41ac:	00 d0       	rcall	.+0      	; 0x41ae <DIO_u8read+0x8>
    41ae:	0f 92       	push	r0
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
    41b4:	8a 83       	std	Y+2, r24	; 0x02
    41b6:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
    41b8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	28 2f       	mov	r18, r24
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	3d 83       	std	Y+5, r19	; 0x05
    41c2:	2c 83       	std	Y+4, r18	; 0x04
    41c4:	4c 81       	ldd	r20, Y+4	; 0x04
    41c6:	5d 81       	ldd	r21, Y+5	; 0x05
    41c8:	42 34       	cpi	r20, 0x42	; 66
    41ca:	51 05       	cpc	r21, r1
    41cc:	b1 f1       	breq	.+108    	; 0x423a <DIO_u8read+0x94>
    41ce:	8c 81       	ldd	r24, Y+4	; 0x04
    41d0:	9d 81       	ldd	r25, Y+5	; 0x05
    41d2:	83 34       	cpi	r24, 0x43	; 67
    41d4:	91 05       	cpc	r25, r1
    41d6:	34 f4       	brge	.+12     	; 0x41e4 <DIO_u8read+0x3e>
    41d8:	2c 81       	ldd	r18, Y+4	; 0x04
    41da:	3d 81       	ldd	r19, Y+5	; 0x05
    41dc:	21 34       	cpi	r18, 0x41	; 65
    41de:	31 05       	cpc	r19, r1
    41e0:	71 f0       	breq	.+28     	; 0x41fe <DIO_u8read+0x58>
    41e2:	84 c0       	rjmp	.+264    	; 0x42ec <DIO_u8read+0x146>
    41e4:	4c 81       	ldd	r20, Y+4	; 0x04
    41e6:	5d 81       	ldd	r21, Y+5	; 0x05
    41e8:	43 34       	cpi	r20, 0x43	; 67
    41ea:	51 05       	cpc	r21, r1
    41ec:	09 f4       	brne	.+2      	; 0x41f0 <DIO_u8read+0x4a>
    41ee:	43 c0       	rjmp	.+134    	; 0x4276 <DIO_u8read+0xd0>
    41f0:	8c 81       	ldd	r24, Y+4	; 0x04
    41f2:	9d 81       	ldd	r25, Y+5	; 0x05
    41f4:	84 34       	cpi	r24, 0x44	; 68
    41f6:	91 05       	cpc	r25, r1
    41f8:	09 f4       	brne	.+2      	; 0x41fc <DIO_u8read+0x56>
    41fa:	5b c0       	rjmp	.+182    	; 0x42b2 <DIO_u8read+0x10c>
    41fc:	77 c0       	rjmp	.+238    	; 0x42ec <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
    41fe:	e9 e3       	ldi	r30, 0x39	; 57
    4200:	f0 e0       	ldi	r31, 0x00	; 0
    4202:	80 81       	ld	r24, Z
    4204:	48 2f       	mov	r20, r24
    4206:	50 e0       	ldi	r21, 0x00	; 0
    4208:	8b 81       	ldd	r24, Y+3	; 0x03
    420a:	28 2f       	mov	r18, r24
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	02 c0       	rjmp	.+4      	; 0x4218 <DIO_u8read+0x72>
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	2a 95       	dec	r18
    421a:	e2 f7       	brpl	.-8      	; 0x4214 <DIO_u8read+0x6e>
    421c:	9a 01       	movw	r18, r20
    421e:	28 23       	and	r18, r24
    4220:	39 23       	and	r19, r25
    4222:	8b 81       	ldd	r24, Y+3	; 0x03
    4224:	88 2f       	mov	r24, r24
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	a9 01       	movw	r20, r18
    422a:	02 c0       	rjmp	.+4      	; 0x4230 <DIO_u8read+0x8a>
    422c:	55 95       	asr	r21
    422e:	47 95       	ror	r20
    4230:	8a 95       	dec	r24
    4232:	e2 f7       	brpl	.-8      	; 0x422c <DIO_u8read+0x86>
    4234:	ca 01       	movw	r24, r20
    4236:	89 83       	std	Y+1, r24	; 0x01
    4238:	59 c0       	rjmp	.+178    	; 0x42ec <DIO_u8read+0x146>
		break;

		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
    423a:	e6 e3       	ldi	r30, 0x36	; 54
    423c:	f0 e0       	ldi	r31, 0x00	; 0
    423e:	80 81       	ld	r24, Z
    4240:	48 2f       	mov	r20, r24
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	8b 81       	ldd	r24, Y+3	; 0x03
    4246:	28 2f       	mov	r18, r24
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	02 c0       	rjmp	.+4      	; 0x4254 <DIO_u8read+0xae>
    4250:	88 0f       	add	r24, r24
    4252:	99 1f       	adc	r25, r25
    4254:	2a 95       	dec	r18
    4256:	e2 f7       	brpl	.-8      	; 0x4250 <DIO_u8read+0xaa>
    4258:	9a 01       	movw	r18, r20
    425a:	28 23       	and	r18, r24
    425c:	39 23       	and	r19, r25
    425e:	8b 81       	ldd	r24, Y+3	; 0x03
    4260:	88 2f       	mov	r24, r24
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	a9 01       	movw	r20, r18
    4266:	02 c0       	rjmp	.+4      	; 0x426c <DIO_u8read+0xc6>
    4268:	55 95       	asr	r21
    426a:	47 95       	ror	r20
    426c:	8a 95       	dec	r24
    426e:	e2 f7       	brpl	.-8      	; 0x4268 <DIO_u8read+0xc2>
    4270:	ca 01       	movw	r24, r20
    4272:	89 83       	std	Y+1, r24	; 0x01
    4274:	3b c0       	rjmp	.+118    	; 0x42ec <DIO_u8read+0x146>
		break;

		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
    4276:	e3 e3       	ldi	r30, 0x33	; 51
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	80 81       	ld	r24, Z
    427c:	48 2f       	mov	r20, r24
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	8b 81       	ldd	r24, Y+3	; 0x03
    4282:	28 2f       	mov	r18, r24
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <DIO_u8read+0xea>
    428c:	88 0f       	add	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	2a 95       	dec	r18
    4292:	e2 f7       	brpl	.-8      	; 0x428c <DIO_u8read+0xe6>
    4294:	9a 01       	movw	r18, r20
    4296:	28 23       	and	r18, r24
    4298:	39 23       	and	r19, r25
    429a:	8b 81       	ldd	r24, Y+3	; 0x03
    429c:	88 2f       	mov	r24, r24
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	a9 01       	movw	r20, r18
    42a2:	02 c0       	rjmp	.+4      	; 0x42a8 <DIO_u8read+0x102>
    42a4:	55 95       	asr	r21
    42a6:	47 95       	ror	r20
    42a8:	8a 95       	dec	r24
    42aa:	e2 f7       	brpl	.-8      	; 0x42a4 <DIO_u8read+0xfe>
    42ac:	ca 01       	movw	r24, r20
    42ae:	89 83       	std	Y+1, r24	; 0x01
    42b0:	1d c0       	rjmp	.+58     	; 0x42ec <DIO_u8read+0x146>
		break;

		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
    42b2:	e0 e3       	ldi	r30, 0x30	; 48
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	80 81       	ld	r24, Z
    42b8:	48 2f       	mov	r20, r24
    42ba:	50 e0       	ldi	r21, 0x00	; 0
    42bc:	8b 81       	ldd	r24, Y+3	; 0x03
    42be:	28 2f       	mov	r18, r24
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	02 c0       	rjmp	.+4      	; 0x42cc <DIO_u8read+0x126>
    42c8:	88 0f       	add	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	2a 95       	dec	r18
    42ce:	e2 f7       	brpl	.-8      	; 0x42c8 <DIO_u8read+0x122>
    42d0:	9a 01       	movw	r18, r20
    42d2:	28 23       	and	r18, r24
    42d4:	39 23       	and	r19, r25
    42d6:	8b 81       	ldd	r24, Y+3	; 0x03
    42d8:	88 2f       	mov	r24, r24
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	a9 01       	movw	r20, r18
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <DIO_u8read+0x13e>
    42e0:	55 95       	asr	r21
    42e2:	47 95       	ror	r20
    42e4:	8a 95       	dec	r24
    42e6:	e2 f7       	brpl	.-8      	; 0x42e0 <DIO_u8read+0x13a>
    42e8:	ca 01       	movw	r24, r20
    42ea:	89 83       	std	Y+1, r24	; 0x01
		break;
		default:
		break;
	}
	return return_value ;
    42ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	0f 90       	pop	r0
    42f4:	0f 90       	pop	r0
    42f6:	0f 90       	pop	r0
    42f8:	cf 91       	pop	r28
    42fa:	df 91       	pop	r29
    42fc:	08 95       	ret

000042fe <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
    42fe:	df 93       	push	r29
    4300:	cf 93       	push	r28
    4302:	00 d0       	rcall	.+0      	; 0x4304 <DIO_toggle+0x6>
    4304:	00 d0       	rcall	.+0      	; 0x4306 <DIO_toggle+0x8>
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62
    430a:	89 83       	std	Y+1, r24	; 0x01
    430c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    430e:	89 81       	ldd	r24, Y+1	; 0x01
    4310:	28 2f       	mov	r18, r24
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	3c 83       	std	Y+4, r19	; 0x04
    4316:	2b 83       	std	Y+3, r18	; 0x03
    4318:	8b 81       	ldd	r24, Y+3	; 0x03
    431a:	9c 81       	ldd	r25, Y+4	; 0x04
    431c:	82 34       	cpi	r24, 0x42	; 66
    431e:	91 05       	cpc	r25, r1
    4320:	51 f1       	breq	.+84     	; 0x4376 <DIO_toggle+0x78>
    4322:	2b 81       	ldd	r18, Y+3	; 0x03
    4324:	3c 81       	ldd	r19, Y+4	; 0x04
    4326:	23 34       	cpi	r18, 0x43	; 67
    4328:	31 05       	cpc	r19, r1
    432a:	34 f4       	brge	.+12     	; 0x4338 <DIO_toggle+0x3a>
    432c:	8b 81       	ldd	r24, Y+3	; 0x03
    432e:	9c 81       	ldd	r25, Y+4	; 0x04
    4330:	81 34       	cpi	r24, 0x41	; 65
    4332:	91 05       	cpc	r25, r1
    4334:	61 f0       	breq	.+24     	; 0x434e <DIO_toggle+0x50>
    4336:	5a c0       	rjmp	.+180    	; 0x43ec <DIO_toggle+0xee>
    4338:	2b 81       	ldd	r18, Y+3	; 0x03
    433a:	3c 81       	ldd	r19, Y+4	; 0x04
    433c:	23 34       	cpi	r18, 0x43	; 67
    433e:	31 05       	cpc	r19, r1
    4340:	71 f1       	breq	.+92     	; 0x439e <DIO_toggle+0xa0>
    4342:	8b 81       	ldd	r24, Y+3	; 0x03
    4344:	9c 81       	ldd	r25, Y+4	; 0x04
    4346:	84 34       	cpi	r24, 0x44	; 68
    4348:	91 05       	cpc	r25, r1
    434a:	e9 f1       	breq	.+122    	; 0x43c6 <DIO_toggle+0xc8>
    434c:	4f c0       	rjmp	.+158    	; 0x43ec <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    434e:	ab e3       	ldi	r26, 0x3B	; 59
    4350:	b0 e0       	ldi	r27, 0x00	; 0
    4352:	eb e3       	ldi	r30, 0x3B	; 59
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	80 81       	ld	r24, Z
    4358:	48 2f       	mov	r20, r24
    435a:	8a 81       	ldd	r24, Y+2	; 0x02
    435c:	28 2f       	mov	r18, r24
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	02 2e       	mov	r0, r18
    4366:	02 c0       	rjmp	.+4      	; 0x436c <DIO_toggle+0x6e>
    4368:	88 0f       	add	r24, r24
    436a:	99 1f       	adc	r25, r25
    436c:	0a 94       	dec	r0
    436e:	e2 f7       	brpl	.-8      	; 0x4368 <DIO_toggle+0x6a>
    4370:	84 27       	eor	r24, r20
    4372:	8c 93       	st	X, r24
    4374:	3b c0       	rjmp	.+118    	; 0x43ec <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    4376:	a8 e3       	ldi	r26, 0x38	; 56
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e8 e3       	ldi	r30, 0x38	; 56
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	48 2f       	mov	r20, r24
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
    4384:	28 2f       	mov	r18, r24
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	02 2e       	mov	r0, r18
    438e:	02 c0       	rjmp	.+4      	; 0x4394 <DIO_toggle+0x96>
    4390:	88 0f       	add	r24, r24
    4392:	99 1f       	adc	r25, r25
    4394:	0a 94       	dec	r0
    4396:	e2 f7       	brpl	.-8      	; 0x4390 <DIO_toggle+0x92>
    4398:	84 27       	eor	r24, r20
    439a:	8c 93       	st	X, r24
    439c:	27 c0       	rjmp	.+78     	; 0x43ec <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    439e:	a5 e3       	ldi	r26, 0x35	; 53
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	e5 e3       	ldi	r30, 0x35	; 53
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	80 81       	ld	r24, Z
    43a8:	48 2f       	mov	r20, r24
    43aa:	8a 81       	ldd	r24, Y+2	; 0x02
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	02 2e       	mov	r0, r18
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <DIO_toggle+0xbe>
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	0a 94       	dec	r0
    43be:	e2 f7       	brpl	.-8      	; 0x43b8 <DIO_toggle+0xba>
    43c0:	84 27       	eor	r24, r20
    43c2:	8c 93       	st	X, r24
    43c4:	13 c0       	rjmp	.+38     	; 0x43ec <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    43c6:	a2 e3       	ldi	r26, 0x32	; 50
    43c8:	b0 e0       	ldi	r27, 0x00	; 0
    43ca:	e2 e3       	ldi	r30, 0x32	; 50
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	80 81       	ld	r24, Z
    43d0:	48 2f       	mov	r20, r24
    43d2:	8a 81       	ldd	r24, Y+2	; 0x02
    43d4:	28 2f       	mov	r18, r24
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	02 2e       	mov	r0, r18
    43de:	02 c0       	rjmp	.+4      	; 0x43e4 <DIO_toggle+0xe6>
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	0a 94       	dec	r0
    43e6:	e2 f7       	brpl	.-8      	; 0x43e0 <DIO_toggle+0xe2>
    43e8:	84 27       	eor	r24, r20
    43ea:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
    43f4:	cf 91       	pop	r28
    43f6:	df 91       	pop	r29
    43f8:	08 95       	ret

000043fa <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
    43fa:	df 93       	push	r29
    43fc:	cf 93       	push	r28
    43fe:	00 d0       	rcall	.+0      	; 0x4400 <DIO_set_port_direction+0x6>
    4400:	00 d0       	rcall	.+0      	; 0x4402 <DIO_set_port_direction+0x8>
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	89 83       	std	Y+1, r24	; 0x01
    4408:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    440a:	89 81       	ldd	r24, Y+1	; 0x01
    440c:	28 2f       	mov	r18, r24
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	3c 83       	std	Y+4, r19	; 0x04
    4412:	2b 83       	std	Y+3, r18	; 0x03
    4414:	8b 81       	ldd	r24, Y+3	; 0x03
    4416:	9c 81       	ldd	r25, Y+4	; 0x04
    4418:	82 34       	cpi	r24, 0x42	; 66
    441a:	91 05       	cpc	r25, r1
    441c:	d9 f0       	breq	.+54     	; 0x4454 <DIO_set_port_direction+0x5a>
    441e:	2b 81       	ldd	r18, Y+3	; 0x03
    4420:	3c 81       	ldd	r19, Y+4	; 0x04
    4422:	23 34       	cpi	r18, 0x43	; 67
    4424:	31 05       	cpc	r19, r1
    4426:	34 f4       	brge	.+12     	; 0x4434 <DIO_set_port_direction+0x3a>
    4428:	8b 81       	ldd	r24, Y+3	; 0x03
    442a:	9c 81       	ldd	r25, Y+4	; 0x04
    442c:	81 34       	cpi	r24, 0x41	; 65
    442e:	91 05       	cpc	r25, r1
    4430:	61 f0       	breq	.+24     	; 0x444a <DIO_set_port_direction+0x50>
    4432:	1e c0       	rjmp	.+60     	; 0x4470 <DIO_set_port_direction+0x76>
    4434:	2b 81       	ldd	r18, Y+3	; 0x03
    4436:	3c 81       	ldd	r19, Y+4	; 0x04
    4438:	23 34       	cpi	r18, 0x43	; 67
    443a:	31 05       	cpc	r19, r1
    443c:	81 f0       	breq	.+32     	; 0x445e <DIO_set_port_direction+0x64>
    443e:	8b 81       	ldd	r24, Y+3	; 0x03
    4440:	9c 81       	ldd	r25, Y+4	; 0x04
    4442:	84 34       	cpi	r24, 0x44	; 68
    4444:	91 05       	cpc	r25, r1
    4446:	81 f0       	breq	.+32     	; 0x4468 <DIO_set_port_direction+0x6e>
    4448:	13 c0       	rjmp	.+38     	; 0x4470 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    444a:	ea e3       	ldi	r30, 0x3A	; 58
    444c:	f0 e0       	ldi	r31, 0x00	; 0
    444e:	8a 81       	ldd	r24, Y+2	; 0x02
    4450:	80 83       	st	Z, r24
    4452:	0e c0       	rjmp	.+28     	; 0x4470 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    4454:	e7 e3       	ldi	r30, 0x37	; 55
    4456:	f0 e0       	ldi	r31, 0x00	; 0
    4458:	8a 81       	ldd	r24, Y+2	; 0x02
    445a:	80 83       	st	Z, r24
    445c:	09 c0       	rjmp	.+18     	; 0x4470 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    445e:	e4 e3       	ldi	r30, 0x34	; 52
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	8a 81       	ldd	r24, Y+2	; 0x02
    4464:	80 83       	st	Z, r24
    4466:	04 c0       	rjmp	.+8      	; 0x4470 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    4468:	e1 e3       	ldi	r30, 0x31	; 49
    446a:	f0 e0       	ldi	r31, 0x00	; 0
    446c:	8a 81       	ldd	r24, Y+2	; 0x02
    446e:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}

}
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	cf 91       	pop	r28
    447a:	df 91       	pop	r29
    447c:	08 95       	ret

0000447e <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
    447e:	df 93       	push	r29
    4480:	cf 93       	push	r28
    4482:	00 d0       	rcall	.+0      	; 0x4484 <DIO_write_port+0x6>
    4484:	00 d0       	rcall	.+0      	; 0x4486 <DIO_write_port+0x8>
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	89 83       	std	Y+1, r24	; 0x01
    448c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	28 2f       	mov	r18, r24
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	3c 83       	std	Y+4, r19	; 0x04
    4496:	2b 83       	std	Y+3, r18	; 0x03
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	9c 81       	ldd	r25, Y+4	; 0x04
    449c:	82 34       	cpi	r24, 0x42	; 66
    449e:	91 05       	cpc	r25, r1
    44a0:	d9 f0       	breq	.+54     	; 0x44d8 <DIO_write_port+0x5a>
    44a2:	2b 81       	ldd	r18, Y+3	; 0x03
    44a4:	3c 81       	ldd	r19, Y+4	; 0x04
    44a6:	23 34       	cpi	r18, 0x43	; 67
    44a8:	31 05       	cpc	r19, r1
    44aa:	34 f4       	brge	.+12     	; 0x44b8 <DIO_write_port+0x3a>
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	9c 81       	ldd	r25, Y+4	; 0x04
    44b0:	81 34       	cpi	r24, 0x41	; 65
    44b2:	91 05       	cpc	r25, r1
    44b4:	61 f0       	breq	.+24     	; 0x44ce <DIO_write_port+0x50>
    44b6:	1e c0       	rjmp	.+60     	; 0x44f4 <DIO_write_port+0x76>
    44b8:	2b 81       	ldd	r18, Y+3	; 0x03
    44ba:	3c 81       	ldd	r19, Y+4	; 0x04
    44bc:	23 34       	cpi	r18, 0x43	; 67
    44be:	31 05       	cpc	r19, r1
    44c0:	81 f0       	breq	.+32     	; 0x44e2 <DIO_write_port+0x64>
    44c2:	8b 81       	ldd	r24, Y+3	; 0x03
    44c4:	9c 81       	ldd	r25, Y+4	; 0x04
    44c6:	84 34       	cpi	r24, 0x44	; 68
    44c8:	91 05       	cpc	r25, r1
    44ca:	81 f0       	breq	.+32     	; 0x44ec <DIO_write_port+0x6e>
    44cc:	13 c0       	rjmp	.+38     	; 0x44f4 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    44ce:	eb e3       	ldi	r30, 0x3B	; 59
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	8a 81       	ldd	r24, Y+2	; 0x02
    44d4:	80 83       	st	Z, r24
    44d6:	0e c0       	rjmp	.+28     	; 0x44f4 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    44d8:	e8 e3       	ldi	r30, 0x38	; 56
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	8a 81       	ldd	r24, Y+2	; 0x02
    44de:	80 83       	st	Z, r24
    44e0:	09 c0       	rjmp	.+18     	; 0x44f4 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    44e2:	e5 e3       	ldi	r30, 0x35	; 53
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	8a 81       	ldd	r24, Y+2	; 0x02
    44e8:	80 83       	st	Z, r24
    44ea:	04 c0       	rjmp	.+8      	; 0x44f4 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    44ec:	e2 e3       	ldi	r30, 0x32	; 50
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	8a 81       	ldd	r24, Y+2	; 0x02
    44f2:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    44f4:	0f 90       	pop	r0
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	cf 91       	pop	r28
    44fe:	df 91       	pop	r29
    4500:	08 95       	ret

00004502 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
    4502:	df 93       	push	r29
    4504:	cf 93       	push	r28
    4506:	00 d0       	rcall	.+0      	; 0x4508 <DIO_read_port+0x6>
    4508:	00 d0       	rcall	.+0      	; 0x450a <DIO_read_port+0x8>
    450a:	cd b7       	in	r28, 0x3d	; 61
    450c:	de b7       	in	r29, 0x3e	; 62
    450e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    4510:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    4512:	8a 81       	ldd	r24, Y+2	; 0x02
    4514:	28 2f       	mov	r18, r24
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	3c 83       	std	Y+4, r19	; 0x04
    451a:	2b 83       	std	Y+3, r18	; 0x03
    451c:	8b 81       	ldd	r24, Y+3	; 0x03
    451e:	9c 81       	ldd	r25, Y+4	; 0x04
    4520:	82 34       	cpi	r24, 0x42	; 66
    4522:	91 05       	cpc	r25, r1
    4524:	d9 f0       	breq	.+54     	; 0x455c <DIO_read_port+0x5a>
    4526:	2b 81       	ldd	r18, Y+3	; 0x03
    4528:	3c 81       	ldd	r19, Y+4	; 0x04
    452a:	23 34       	cpi	r18, 0x43	; 67
    452c:	31 05       	cpc	r19, r1
    452e:	34 f4       	brge	.+12     	; 0x453c <DIO_read_port+0x3a>
    4530:	8b 81       	ldd	r24, Y+3	; 0x03
    4532:	9c 81       	ldd	r25, Y+4	; 0x04
    4534:	81 34       	cpi	r24, 0x41	; 65
    4536:	91 05       	cpc	r25, r1
    4538:	61 f0       	breq	.+24     	; 0x4552 <DIO_read_port+0x50>
    453a:	1e c0       	rjmp	.+60     	; 0x4578 <DIO_read_port+0x76>
    453c:	2b 81       	ldd	r18, Y+3	; 0x03
    453e:	3c 81       	ldd	r19, Y+4	; 0x04
    4540:	23 34       	cpi	r18, 0x43	; 67
    4542:	31 05       	cpc	r19, r1
    4544:	81 f0       	breq	.+32     	; 0x4566 <DIO_read_port+0x64>
    4546:	8b 81       	ldd	r24, Y+3	; 0x03
    4548:	9c 81       	ldd	r25, Y+4	; 0x04
    454a:	84 34       	cpi	r24, 0x44	; 68
    454c:	91 05       	cpc	r25, r1
    454e:	81 f0       	breq	.+32     	; 0x4570 <DIO_read_port+0x6e>
    4550:	13 c0       	rjmp	.+38     	; 0x4578 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A
    4552:	e9 e3       	ldi	r30, 0x39	; 57
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	80 81       	ld	r24, Z
    4558:	89 83       	std	Y+1, r24	; 0x01
    455a:	0e c0       	rjmp	.+28     	; 0x4578 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B
    455c:	e6 e3       	ldi	r30, 0x36	; 54
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	89 83       	std	Y+1, r24	; 0x01
    4564:	09 c0       	rjmp	.+18     	; 0x4578 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C
    4566:	e3 e3       	ldi	r30, 0x33	; 51
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	80 81       	ld	r24, Z
    456c:	89 83       	std	Y+1, r24	; 0x01
    456e:	04 c0       	rjmp	.+8      	; 0x4578 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D
    4570:	e0 e3       	ldi	r30, 0x30	; 48
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    4578:	89 81       	ldd	r24, Y+1	; 0x01
}
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	cf 91       	pop	r28
    4584:	df 91       	pop	r29
    4586:	08 95       	ret

00004588 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    4588:	df 93       	push	r29
    458a:	cf 93       	push	r28
    458c:	00 d0       	rcall	.+0      	; 0x458e <DIO_vconnectpullup+0x6>
    458e:	00 d0       	rcall	.+0      	; 0x4590 <DIO_vconnectpullup+0x8>
    4590:	0f 92       	push	r0
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	89 83       	std	Y+1, r24	; 0x01
    4598:	6a 83       	std	Y+2, r22	; 0x02
    459a:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    459c:	89 81       	ldd	r24, Y+1	; 0x01
    459e:	28 2f       	mov	r18, r24
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	3d 83       	std	Y+5, r19	; 0x05
    45a4:	2c 83       	std	Y+4, r18	; 0x04
    45a6:	8c 81       	ldd	r24, Y+4	; 0x04
    45a8:	9d 81       	ldd	r25, Y+5	; 0x05
    45aa:	82 34       	cpi	r24, 0x42	; 66
    45ac:	91 05       	cpc	r25, r1
    45ae:	09 f4       	brne	.+2      	; 0x45b2 <DIO_vconnectpullup+0x2a>
    45b0:	44 c0       	rjmp	.+136    	; 0x463a <DIO_vconnectpullup+0xb2>
    45b2:	2c 81       	ldd	r18, Y+4	; 0x04
    45b4:	3d 81       	ldd	r19, Y+5	; 0x05
    45b6:	23 34       	cpi	r18, 0x43	; 67
    45b8:	31 05       	cpc	r19, r1
    45ba:	34 f4       	brge	.+12     	; 0x45c8 <DIO_vconnectpullup+0x40>
    45bc:	8c 81       	ldd	r24, Y+4	; 0x04
    45be:	9d 81       	ldd	r25, Y+5	; 0x05
    45c0:	81 34       	cpi	r24, 0x41	; 65
    45c2:	91 05       	cpc	r25, r1
    45c4:	71 f0       	breq	.+28     	; 0x45e2 <DIO_vconnectpullup+0x5a>
    45c6:	bc c0       	rjmp	.+376    	; 0x4740 <DIO_vconnectpullup+0x1b8>
    45c8:	2c 81       	ldd	r18, Y+4	; 0x04
    45ca:	3d 81       	ldd	r19, Y+5	; 0x05
    45cc:	23 34       	cpi	r18, 0x43	; 67
    45ce:	31 05       	cpc	r19, r1
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <DIO_vconnectpullup+0x4c>
    45d2:	5f c0       	rjmp	.+190    	; 0x4692 <DIO_vconnectpullup+0x10a>
    45d4:	8c 81       	ldd	r24, Y+4	; 0x04
    45d6:	9d 81       	ldd	r25, Y+5	; 0x05
    45d8:	84 34       	cpi	r24, 0x44	; 68
    45da:	91 05       	cpc	r25, r1
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <DIO_vconnectpullup+0x58>
    45de:	85 c0       	rjmp	.+266    	; 0x46ea <DIO_vconnectpullup+0x162>
    45e0:	af c0       	rjmp	.+350    	; 0x4740 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    45e2:	8b 81       	ldd	r24, Y+3	; 0x03
    45e4:	81 30       	cpi	r24, 0x01	; 1
    45e6:	a1 f4       	brne	.+40     	; 0x4610 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    45e8:	ab e3       	ldi	r26, 0x3B	; 59
    45ea:	b0 e0       	ldi	r27, 0x00	; 0
    45ec:	eb e3       	ldi	r30, 0x3B	; 59
    45ee:	f0 e0       	ldi	r31, 0x00	; 0
    45f0:	80 81       	ld	r24, Z
    45f2:	48 2f       	mov	r20, r24
    45f4:	8a 81       	ldd	r24, Y+2	; 0x02
    45f6:	28 2f       	mov	r18, r24
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	02 2e       	mov	r0, r18
    4600:	02 c0       	rjmp	.+4      	; 0x4606 <DIO_vconnectpullup+0x7e>
    4602:	88 0f       	add	r24, r24
    4604:	99 1f       	adc	r25, r25
    4606:	0a 94       	dec	r0
    4608:	e2 f7       	brpl	.-8      	; 0x4602 <DIO_vconnectpullup+0x7a>
    460a:	84 2b       	or	r24, r20
    460c:	8c 93       	st	X, r24
    460e:	98 c0       	rjmp	.+304    	; 0x4740 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    4610:	ab e3       	ldi	r26, 0x3B	; 59
    4612:	b0 e0       	ldi	r27, 0x00	; 0
    4614:	eb e3       	ldi	r30, 0x3B	; 59
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	80 81       	ld	r24, Z
    461a:	48 2f       	mov	r20, r24
    461c:	8a 81       	ldd	r24, Y+2	; 0x02
    461e:	28 2f       	mov	r18, r24
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	02 2e       	mov	r0, r18
    4628:	02 c0       	rjmp	.+4      	; 0x462e <DIO_vconnectpullup+0xa6>
    462a:	88 0f       	add	r24, r24
    462c:	99 1f       	adc	r25, r25
    462e:	0a 94       	dec	r0
    4630:	e2 f7       	brpl	.-8      	; 0x462a <DIO_vconnectpullup+0xa2>
    4632:	80 95       	com	r24
    4634:	84 23       	and	r24, r20
    4636:	8c 93       	st	X, r24
    4638:	83 c0       	rjmp	.+262    	; 0x4740 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    463a:	8b 81       	ldd	r24, Y+3	; 0x03
    463c:	81 30       	cpi	r24, 0x01	; 1
    463e:	a1 f4       	brne	.+40     	; 0x4668 <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    4640:	a8 e3       	ldi	r26, 0x38	; 56
    4642:	b0 e0       	ldi	r27, 0x00	; 0
    4644:	e8 e3       	ldi	r30, 0x38	; 56
    4646:	f0 e0       	ldi	r31, 0x00	; 0
    4648:	80 81       	ld	r24, Z
    464a:	48 2f       	mov	r20, r24
    464c:	8a 81       	ldd	r24, Y+2	; 0x02
    464e:	28 2f       	mov	r18, r24
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	02 2e       	mov	r0, r18
    4658:	02 c0       	rjmp	.+4      	; 0x465e <DIO_vconnectpullup+0xd6>
    465a:	88 0f       	add	r24, r24
    465c:	99 1f       	adc	r25, r25
    465e:	0a 94       	dec	r0
    4660:	e2 f7       	brpl	.-8      	; 0x465a <DIO_vconnectpullup+0xd2>
    4662:	84 2b       	or	r24, r20
    4664:	8c 93       	st	X, r24
    4666:	6c c0       	rjmp	.+216    	; 0x4740 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    4668:	a8 e3       	ldi	r26, 0x38	; 56
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	e8 e3       	ldi	r30, 0x38	; 56
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	80 81       	ld	r24, Z
    4672:	48 2f       	mov	r20, r24
    4674:	8a 81       	ldd	r24, Y+2	; 0x02
    4676:	28 2f       	mov	r18, r24
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	02 2e       	mov	r0, r18
    4680:	02 c0       	rjmp	.+4      	; 0x4686 <DIO_vconnectpullup+0xfe>
    4682:	88 0f       	add	r24, r24
    4684:	99 1f       	adc	r25, r25
    4686:	0a 94       	dec	r0
    4688:	e2 f7       	brpl	.-8      	; 0x4682 <DIO_vconnectpullup+0xfa>
    468a:	80 95       	com	r24
    468c:	84 23       	and	r24, r20
    468e:	8c 93       	st	X, r24
    4690:	57 c0       	rjmp	.+174    	; 0x4740 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    4692:	8b 81       	ldd	r24, Y+3	; 0x03
    4694:	81 30       	cpi	r24, 0x01	; 1
    4696:	a1 f4       	brne	.+40     	; 0x46c0 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    4698:	a5 e3       	ldi	r26, 0x35	; 53
    469a:	b0 e0       	ldi	r27, 0x00	; 0
    469c:	e5 e3       	ldi	r30, 0x35	; 53
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	80 81       	ld	r24, Z
    46a2:	48 2f       	mov	r20, r24
    46a4:	8a 81       	ldd	r24, Y+2	; 0x02
    46a6:	28 2f       	mov	r18, r24
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	02 2e       	mov	r0, r18
    46b0:	02 c0       	rjmp	.+4      	; 0x46b6 <DIO_vconnectpullup+0x12e>
    46b2:	88 0f       	add	r24, r24
    46b4:	99 1f       	adc	r25, r25
    46b6:	0a 94       	dec	r0
    46b8:	e2 f7       	brpl	.-8      	; 0x46b2 <DIO_vconnectpullup+0x12a>
    46ba:	84 2b       	or	r24, r20
    46bc:	8c 93       	st	X, r24
    46be:	40 c0       	rjmp	.+128    	; 0x4740 <DIO_vconnectpullup+0x1b8>

		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    46c0:	a5 e3       	ldi	r26, 0x35	; 53
    46c2:	b0 e0       	ldi	r27, 0x00	; 0
    46c4:	e5 e3       	ldi	r30, 0x35	; 53
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	80 81       	ld	r24, Z
    46ca:	48 2f       	mov	r20, r24
    46cc:	8a 81       	ldd	r24, Y+2	; 0x02
    46ce:	28 2f       	mov	r18, r24
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	02 2e       	mov	r0, r18
    46d8:	02 c0       	rjmp	.+4      	; 0x46de <DIO_vconnectpullup+0x156>
    46da:	88 0f       	add	r24, r24
    46dc:	99 1f       	adc	r25, r25
    46de:	0a 94       	dec	r0
    46e0:	e2 f7       	brpl	.-8      	; 0x46da <DIO_vconnectpullup+0x152>
    46e2:	80 95       	com	r24
    46e4:	84 23       	and	r24, r20
    46e6:	8c 93       	st	X, r24
    46e8:	2b c0       	rjmp	.+86     	; 0x4740 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    46ea:	8b 81       	ldd	r24, Y+3	; 0x03
    46ec:	81 30       	cpi	r24, 0x01	; 1
    46ee:	a1 f4       	brne	.+40     	; 0x4718 <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    46f0:	a2 e3       	ldi	r26, 0x32	; 50
    46f2:	b0 e0       	ldi	r27, 0x00	; 0
    46f4:	e2 e3       	ldi	r30, 0x32	; 50
    46f6:	f0 e0       	ldi	r31, 0x00	; 0
    46f8:	80 81       	ld	r24, Z
    46fa:	48 2f       	mov	r20, r24
    46fc:	8a 81       	ldd	r24, Y+2	; 0x02
    46fe:	28 2f       	mov	r18, r24
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	81 e0       	ldi	r24, 0x01	; 1
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	02 2e       	mov	r0, r18
    4708:	02 c0       	rjmp	.+4      	; 0x470e <DIO_vconnectpullup+0x186>
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	0a 94       	dec	r0
    4710:	e2 f7       	brpl	.-8      	; 0x470a <DIO_vconnectpullup+0x182>
    4712:	84 2b       	or	r24, r20
    4714:	8c 93       	st	X, r24
    4716:	14 c0       	rjmp	.+40     	; 0x4740 <DIO_vconnectpullup+0x1b8>

		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    4718:	a2 e3       	ldi	r26, 0x32	; 50
    471a:	b0 e0       	ldi	r27, 0x00	; 0
    471c:	e2 e3       	ldi	r30, 0x32	; 50
    471e:	f0 e0       	ldi	r31, 0x00	; 0
    4720:	80 81       	ld	r24, Z
    4722:	48 2f       	mov	r20, r24
    4724:	8a 81       	ldd	r24, Y+2	; 0x02
    4726:	28 2f       	mov	r18, r24
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	02 2e       	mov	r0, r18
    4730:	02 c0       	rjmp	.+4      	; 0x4736 <DIO_vconnectpullup+0x1ae>
    4732:	88 0f       	add	r24, r24
    4734:	99 1f       	adc	r25, r25
    4736:	0a 94       	dec	r0
    4738:	e2 f7       	brpl	.-8      	; 0x4732 <DIO_vconnectpullup+0x1aa>
    473a:	80 95       	com	r24
    473c:	84 23       	and	r24, r20
    473e:	8c 93       	st	X, r24
		}
		break;

	}
}
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	0f 90       	pop	r0
    4748:	0f 90       	pop	r0
    474a:	cf 91       	pop	r28
    474c:	df 91       	pop	r29
    474e:	08 95       	ret

00004750 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
    4750:	df 93       	push	r29
    4752:	cf 93       	push	r28
    4754:	00 d0       	rcall	.+0      	; 0x4756 <write_low_nibble+0x6>
    4756:	00 d0       	rcall	.+0      	; 0x4758 <write_low_nibble+0x8>
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	89 83       	std	Y+1, r24	; 0x01
    475e:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    4760:	8a 81       	ldd	r24, Y+2	; 0x02
    4762:	8f 70       	andi	r24, 0x0F	; 15
    4764:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    4766:	89 81       	ldd	r24, Y+1	; 0x01
    4768:	28 2f       	mov	r18, r24
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	3c 83       	std	Y+4, r19	; 0x04
    476e:	2b 83       	std	Y+3, r18	; 0x03
    4770:	8b 81       	ldd	r24, Y+3	; 0x03
    4772:	9c 81       	ldd	r25, Y+4	; 0x04
    4774:	82 34       	cpi	r24, 0x42	; 66
    4776:	91 05       	cpc	r25, r1
    4778:	29 f1       	breq	.+74     	; 0x47c4 <write_low_nibble+0x74>
    477a:	2b 81       	ldd	r18, Y+3	; 0x03
    477c:	3c 81       	ldd	r19, Y+4	; 0x04
    477e:	23 34       	cpi	r18, 0x43	; 67
    4780:	31 05       	cpc	r19, r1
    4782:	34 f4       	brge	.+12     	; 0x4790 <write_low_nibble+0x40>
    4784:	8b 81       	ldd	r24, Y+3	; 0x03
    4786:	9c 81       	ldd	r25, Y+4	; 0x04
    4788:	81 34       	cpi	r24, 0x41	; 65
    478a:	91 05       	cpc	r25, r1
    478c:	61 f0       	breq	.+24     	; 0x47a6 <write_low_nibble+0x56>
    478e:	47 c0       	rjmp	.+142    	; 0x481e <write_low_nibble+0xce>
    4790:	2b 81       	ldd	r18, Y+3	; 0x03
    4792:	3c 81       	ldd	r19, Y+4	; 0x04
    4794:	23 34       	cpi	r18, 0x43	; 67
    4796:	31 05       	cpc	r19, r1
    4798:	21 f1       	breq	.+72     	; 0x47e2 <write_low_nibble+0x92>
    479a:	8b 81       	ldd	r24, Y+3	; 0x03
    479c:	9c 81       	ldd	r25, Y+4	; 0x04
    479e:	84 34       	cpi	r24, 0x44	; 68
    47a0:	91 05       	cpc	r25, r1
    47a2:	71 f1       	breq	.+92     	; 0x4800 <write_low_nibble+0xb0>
    47a4:	3c c0       	rjmp	.+120    	; 0x481e <write_low_nibble+0xce>
	{
		case 'A':
		PORTA&=0xf0;
    47a6:	ab e3       	ldi	r26, 0x3B	; 59
    47a8:	b0 e0       	ldi	r27, 0x00	; 0
    47aa:	eb e3       	ldi	r30, 0x3B	; 59
    47ac:	f0 e0       	ldi	r31, 0x00	; 0
    47ae:	80 81       	ld	r24, Z
    47b0:	80 7f       	andi	r24, 0xF0	; 240
    47b2:	8c 93       	st	X, r24
		PORTA|=value;
    47b4:	ab e3       	ldi	r26, 0x3B	; 59
    47b6:	b0 e0       	ldi	r27, 0x00	; 0
    47b8:	eb e3       	ldi	r30, 0x3B	; 59
    47ba:	f0 e0       	ldi	r31, 0x00	; 0
    47bc:	90 81       	ld	r25, Z
    47be:	8a 81       	ldd	r24, Y+2	; 0x02
    47c0:	89 2b       	or	r24, r25
    47c2:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0xf0;
    47c4:	a8 e3       	ldi	r26, 0x38	; 56
    47c6:	b0 e0       	ldi	r27, 0x00	; 0
    47c8:	e8 e3       	ldi	r30, 0x38	; 56
    47ca:	f0 e0       	ldi	r31, 0x00	; 0
    47cc:	80 81       	ld	r24, Z
    47ce:	80 7f       	andi	r24, 0xF0	; 240
    47d0:	8c 93       	st	X, r24
		PORTB|=value;
    47d2:	a8 e3       	ldi	r26, 0x38	; 56
    47d4:	b0 e0       	ldi	r27, 0x00	; 0
    47d6:	e8 e3       	ldi	r30, 0x38	; 56
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	90 81       	ld	r25, Z
    47dc:	8a 81       	ldd	r24, Y+2	; 0x02
    47de:	89 2b       	or	r24, r25
    47e0:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0xf0;
    47e2:	a5 e3       	ldi	r26, 0x35	; 53
    47e4:	b0 e0       	ldi	r27, 0x00	; 0
    47e6:	e5 e3       	ldi	r30, 0x35	; 53
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 81       	ld	r24, Z
    47ec:	80 7f       	andi	r24, 0xF0	; 240
    47ee:	8c 93       	st	X, r24
		PORTC|=value;
    47f0:	a5 e3       	ldi	r26, 0x35	; 53
    47f2:	b0 e0       	ldi	r27, 0x00	; 0
    47f4:	e5 e3       	ldi	r30, 0x35	; 53
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	90 81       	ld	r25, Z
    47fa:	8a 81       	ldd	r24, Y+2	; 0x02
    47fc:	89 2b       	or	r24, r25
    47fe:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0xf0;
    4800:	a2 e3       	ldi	r26, 0x32	; 50
    4802:	b0 e0       	ldi	r27, 0x00	; 0
    4804:	e2 e3       	ldi	r30, 0x32	; 50
    4806:	f0 e0       	ldi	r31, 0x00	; 0
    4808:	80 81       	ld	r24, Z
    480a:	80 7f       	andi	r24, 0xF0	; 240
    480c:	8c 93       	st	X, r24
		PORTD|=value;
    480e:	a2 e3       	ldi	r26, 0x32	; 50
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	e2 e3       	ldi	r30, 0x32	; 50
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	90 81       	ld	r25, Z
    4818:	8a 81       	ldd	r24, Y+2	; 0x02
    481a:	89 2b       	or	r24, r25
    481c:	8c 93       	st	X, r24
	}
}
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	0f 90       	pop	r0
    4824:	0f 90       	pop	r0
    4826:	cf 91       	pop	r28
    4828:	df 91       	pop	r29
    482a:	08 95       	ret

0000482c <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    482c:	df 93       	push	r29
    482e:	cf 93       	push	r28
    4830:	00 d0       	rcall	.+0      	; 0x4832 <write_high_nibble+0x6>
    4832:	00 d0       	rcall	.+0      	; 0x4834 <write_high_nibble+0x8>
    4834:	cd b7       	in	r28, 0x3d	; 61
    4836:	de b7       	in	r29, 0x3e	; 62
    4838:	89 83       	std	Y+1, r24	; 0x01
    483a:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    483c:	8a 81       	ldd	r24, Y+2	; 0x02
    483e:	82 95       	swap	r24
    4840:	80 7f       	andi	r24, 0xF0	; 240
    4842:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	28 2f       	mov	r18, r24
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	3c 83       	std	Y+4, r19	; 0x04
    484c:	2b 83       	std	Y+3, r18	; 0x03
    484e:	8b 81       	ldd	r24, Y+3	; 0x03
    4850:	9c 81       	ldd	r25, Y+4	; 0x04
    4852:	82 34       	cpi	r24, 0x42	; 66
    4854:	91 05       	cpc	r25, r1
    4856:	29 f1       	breq	.+74     	; 0x48a2 <write_high_nibble+0x76>
    4858:	2b 81       	ldd	r18, Y+3	; 0x03
    485a:	3c 81       	ldd	r19, Y+4	; 0x04
    485c:	23 34       	cpi	r18, 0x43	; 67
    485e:	31 05       	cpc	r19, r1
    4860:	34 f4       	brge	.+12     	; 0x486e <write_high_nibble+0x42>
    4862:	8b 81       	ldd	r24, Y+3	; 0x03
    4864:	9c 81       	ldd	r25, Y+4	; 0x04
    4866:	81 34       	cpi	r24, 0x41	; 65
    4868:	91 05       	cpc	r25, r1
    486a:	61 f0       	breq	.+24     	; 0x4884 <write_high_nibble+0x58>
    486c:	47 c0       	rjmp	.+142    	; 0x48fc <write_high_nibble+0xd0>
    486e:	2b 81       	ldd	r18, Y+3	; 0x03
    4870:	3c 81       	ldd	r19, Y+4	; 0x04
    4872:	23 34       	cpi	r18, 0x43	; 67
    4874:	31 05       	cpc	r19, r1
    4876:	21 f1       	breq	.+72     	; 0x48c0 <write_high_nibble+0x94>
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	9c 81       	ldd	r25, Y+4	; 0x04
    487c:	84 34       	cpi	r24, 0x44	; 68
    487e:	91 05       	cpc	r25, r1
    4880:	71 f1       	breq	.+92     	; 0x48de <write_high_nibble+0xb2>
    4882:	3c c0       	rjmp	.+120    	; 0x48fc <write_high_nibble+0xd0>
	{
		case 'A':
		PORTA&=0x0f;
    4884:	ab e3       	ldi	r26, 0x3B	; 59
    4886:	b0 e0       	ldi	r27, 0x00	; 0
    4888:	eb e3       	ldi	r30, 0x3B	; 59
    488a:	f0 e0       	ldi	r31, 0x00	; 0
    488c:	80 81       	ld	r24, Z
    488e:	8f 70       	andi	r24, 0x0F	; 15
    4890:	8c 93       	st	X, r24
		PORTA|=value;
    4892:	ab e3       	ldi	r26, 0x3B	; 59
    4894:	b0 e0       	ldi	r27, 0x00	; 0
    4896:	eb e3       	ldi	r30, 0x3B	; 59
    4898:	f0 e0       	ldi	r31, 0x00	; 0
    489a:	90 81       	ld	r25, Z
    489c:	8a 81       	ldd	r24, Y+2	; 0x02
    489e:	89 2b       	or	r24, r25
    48a0:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0x0f;
    48a2:	a8 e3       	ldi	r26, 0x38	; 56
    48a4:	b0 e0       	ldi	r27, 0x00	; 0
    48a6:	e8 e3       	ldi	r30, 0x38	; 56
    48a8:	f0 e0       	ldi	r31, 0x00	; 0
    48aa:	80 81       	ld	r24, Z
    48ac:	8f 70       	andi	r24, 0x0F	; 15
    48ae:	8c 93       	st	X, r24
		PORTB|=value;
    48b0:	a8 e3       	ldi	r26, 0x38	; 56
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	e8 e3       	ldi	r30, 0x38	; 56
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	90 81       	ld	r25, Z
    48ba:	8a 81       	ldd	r24, Y+2	; 0x02
    48bc:	89 2b       	or	r24, r25
    48be:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0x0f;
    48c0:	a5 e3       	ldi	r26, 0x35	; 53
    48c2:	b0 e0       	ldi	r27, 0x00	; 0
    48c4:	e5 e3       	ldi	r30, 0x35	; 53
    48c6:	f0 e0       	ldi	r31, 0x00	; 0
    48c8:	80 81       	ld	r24, Z
    48ca:	8f 70       	andi	r24, 0x0F	; 15
    48cc:	8c 93       	st	X, r24
		PORTC|=value;
    48ce:	a5 e3       	ldi	r26, 0x35	; 53
    48d0:	b0 e0       	ldi	r27, 0x00	; 0
    48d2:	e5 e3       	ldi	r30, 0x35	; 53
    48d4:	f0 e0       	ldi	r31, 0x00	; 0
    48d6:	90 81       	ld	r25, Z
    48d8:	8a 81       	ldd	r24, Y+2	; 0x02
    48da:	89 2b       	or	r24, r25
    48dc:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0x0f;
    48de:	a2 e3       	ldi	r26, 0x32	; 50
    48e0:	b0 e0       	ldi	r27, 0x00	; 0
    48e2:	e2 e3       	ldi	r30, 0x32	; 50
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 81       	ld	r24, Z
    48e8:	8f 70       	andi	r24, 0x0F	; 15
    48ea:	8c 93       	st	X, r24
		PORTD|=value;
    48ec:	a2 e3       	ldi	r26, 0x32	; 50
    48ee:	b0 e0       	ldi	r27, 0x00	; 0
    48f0:	e2 e3       	ldi	r30, 0x32	; 50
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	90 81       	ld	r25, Z
    48f6:	8a 81       	ldd	r24, Y+2	; 0x02
    48f8:	89 2b       	or	r24, r25
    48fa:	8c 93       	st	X, r24
	}
}
    48fc:	0f 90       	pop	r0
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	cf 91       	pop	r28
    4906:	df 91       	pop	r29
    4908:	08 95       	ret

0000490a <LCD_vInit>:


static void send_falling_edge(void);

void LCD_vInit(void)
{
    490a:	0f 93       	push	r16
    490c:	1f 93       	push	r17
    490e:	df 93       	push	r29
    4910:	cf 93       	push	r28
    4912:	cd b7       	in	r28, 0x3d	; 61
    4914:	de b7       	in	r29, 0x3e	; 62
    4916:	c4 55       	subi	r28, 0x54	; 84
    4918:	d0 40       	sbci	r29, 0x00	; 0
    491a:	0f b6       	in	r0, 0x3f	; 63
    491c:	f8 94       	cli
    491e:	de bf       	out	0x3e, r29	; 62
    4920:	0f be       	out	0x3f, r0	; 63
    4922:	cd bf       	out	0x3d, r28	; 61
    4924:	fe 01       	movw	r30, r28
    4926:	ef 5a       	subi	r30, 0xAF	; 175
    4928:	ff 4f       	sbci	r31, 0xFF	; 255
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	a8 e4       	ldi	r26, 0x48	; 72
    4930:	b3 e4       	ldi	r27, 0x43	; 67
    4932:	80 83       	st	Z, r24
    4934:	91 83       	std	Z+1, r25	; 0x01
    4936:	a2 83       	std	Z+2, r26	; 0x02
    4938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    493a:	8e 01       	movw	r16, r28
    493c:	03 5b       	subi	r16, 0xB3	; 179
    493e:	1f 4f       	sbci	r17, 0xFF	; 255
    4940:	fe 01       	movw	r30, r28
    4942:	ef 5a       	subi	r30, 0xAF	; 175
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	60 81       	ld	r22, Z
    4948:	71 81       	ldd	r23, Z+1	; 0x01
    494a:	82 81       	ldd	r24, Z+2	; 0x02
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	4a e7       	ldi	r20, 0x7A	; 122
    4954:	53 e4       	ldi	r21, 0x43	; 67
    4956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	f8 01       	movw	r30, r16
    4960:	80 83       	st	Z, r24
    4962:	91 83       	std	Z+1, r25	; 0x01
    4964:	a2 83       	std	Z+2, r26	; 0x02
    4966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4968:	fe 01       	movw	r30, r28
    496a:	e3 5b       	subi	r30, 0xB3	; 179
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	60 81       	ld	r22, Z
    4970:	71 81       	ldd	r23, Z+1	; 0x01
    4972:	82 81       	ldd	r24, Z+2	; 0x02
    4974:	93 81       	ldd	r25, Z+3	; 0x03
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e8       	ldi	r20, 0x80	; 128
    497c:	5f e3       	ldi	r21, 0x3F	; 63
    497e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4982:	88 23       	and	r24, r24
    4984:	44 f4       	brge	.+16     	; 0x4996 <LCD_vInit+0x8c>
		__ticks = 1;
    4986:	fe 01       	movw	r30, r28
    4988:	e5 5b       	subi	r30, 0xB5	; 181
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	91 83       	std	Z+1, r25	; 0x01
    4992:	80 83       	st	Z, r24
    4994:	64 c0       	rjmp	.+200    	; 0x4a5e <LCD_vInit+0x154>
	else if (__tmp > 65535)
    4996:	fe 01       	movw	r30, r28
    4998:	e3 5b       	subi	r30, 0xB3	; 179
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	60 81       	ld	r22, Z
    499e:	71 81       	ldd	r23, Z+1	; 0x01
    49a0:	82 81       	ldd	r24, Z+2	; 0x02
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	3f ef       	ldi	r19, 0xFF	; 255
    49a8:	4f e7       	ldi	r20, 0x7F	; 127
    49aa:	57 e4       	ldi	r21, 0x47	; 71
    49ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49b0:	18 16       	cp	r1, r24
    49b2:	0c f0       	brlt	.+2      	; 0x49b6 <LCD_vInit+0xac>
    49b4:	43 c0       	rjmp	.+134    	; 0x4a3c <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b6:	fe 01       	movw	r30, r28
    49b8:	ef 5a       	subi	r30, 0xAF	; 175
    49ba:	ff 4f       	sbci	r31, 0xFF	; 255
    49bc:	60 81       	ld	r22, Z
    49be:	71 81       	ldd	r23, Z+1	; 0x01
    49c0:	82 81       	ldd	r24, Z+2	; 0x02
    49c2:	93 81       	ldd	r25, Z+3	; 0x03
    49c4:	20 e0       	ldi	r18, 0x00	; 0
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	40 e2       	ldi	r20, 0x20	; 32
    49ca:	51 e4       	ldi	r21, 0x41	; 65
    49cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	8e 01       	movw	r16, r28
    49d6:	05 5b       	subi	r16, 0xB5	; 181
    49d8:	1f 4f       	sbci	r17, 0xFF	; 255
    49da:	bc 01       	movw	r22, r24
    49dc:	cd 01       	movw	r24, r26
    49de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e2:	dc 01       	movw	r26, r24
    49e4:	cb 01       	movw	r24, r22
    49e6:	f8 01       	movw	r30, r16
    49e8:	91 83       	std	Z+1, r25	; 0x01
    49ea:	80 83       	st	Z, r24
    49ec:	1f c0       	rjmp	.+62     	; 0x4a2c <LCD_vInit+0x122>
    49ee:	fe 01       	movw	r30, r28
    49f0:	e7 5b       	subi	r30, 0xB7	; 183
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	89 e1       	ldi	r24, 0x19	; 25
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49fc:	fe 01       	movw	r30, r28
    49fe:	e7 5b       	subi	r30, 0xB7	; 183
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	80 81       	ld	r24, Z
    4a04:	91 81       	ldd	r25, Z+1	; 0x01
    4a06:	01 97       	sbiw	r24, 0x01	; 1
    4a08:	f1 f7       	brne	.-4      	; 0x4a06 <LCD_vInit+0xfc>
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e7 5b       	subi	r30, 0xB7	; 183
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	91 83       	std	Z+1, r25	; 0x01
    4a12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a14:	de 01       	movw	r26, r28
    4a16:	a5 5b       	subi	r26, 0xB5	; 181
    4a18:	bf 4f       	sbci	r27, 0xFF	; 255
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e5 5b       	subi	r30, 0xB5	; 181
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	80 81       	ld	r24, Z
    4a22:	91 81       	ldd	r25, Z+1	; 0x01
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	11 96       	adiw	r26, 0x01	; 1
    4a28:	9c 93       	st	X, r25
    4a2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e5 5b       	subi	r30, 0xB5	; 181
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 81       	ld	r24, Z
    4a34:	91 81       	ldd	r25, Z+1	; 0x01
    4a36:	00 97       	sbiw	r24, 0x00	; 0
    4a38:	d1 f6       	brne	.-76     	; 0x49ee <LCD_vInit+0xe4>
    4a3a:	27 c0       	rjmp	.+78     	; 0x4a8a <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a3c:	8e 01       	movw	r16, r28
    4a3e:	05 5b       	subi	r16, 0xB5	; 181
    4a40:	1f 4f       	sbci	r17, 0xFF	; 255
    4a42:	fe 01       	movw	r30, r28
    4a44:	e3 5b       	subi	r30, 0xB3	; 179
    4a46:	ff 4f       	sbci	r31, 0xFF	; 255
    4a48:	60 81       	ld	r22, Z
    4a4a:	71 81       	ldd	r23, Z+1	; 0x01
    4a4c:	82 81       	ldd	r24, Z+2	; 0x02
    4a4e:	93 81       	ldd	r25, Z+3	; 0x03
    4a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	f8 01       	movw	r30, r16
    4a5a:	91 83       	std	Z+1, r25	; 0x01
    4a5c:	80 83       	st	Z, r24
    4a5e:	de 01       	movw	r26, r28
    4a60:	a9 5b       	subi	r26, 0xB9	; 185
    4a62:	bf 4f       	sbci	r27, 0xFF	; 255
    4a64:	fe 01       	movw	r30, r28
    4a66:	e5 5b       	subi	r30, 0xB5	; 181
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	8d 93       	st	X+, r24
    4a70:	9c 93       	st	X, r25
    4a72:	fe 01       	movw	r30, r28
    4a74:	e9 5b       	subi	r30, 0xB9	; 185
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	80 81       	ld	r24, Z
    4a7a:	91 81       	ldd	r25, Z+1	; 0x01
    4a7c:	01 97       	sbiw	r24, 0x01	; 1
    4a7e:	f1 f7       	brne	.-4      	; 0x4a7c <LCD_vInit+0x172>
    4a80:	fe 01       	movw	r30, r28
    4a82:	e9 5b       	subi	r30, 0xB9	; 185
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	91 83       	std	Z+1, r25	; 0x01
    4a88:	80 83       	st	Z, r24
	DIO_vsetPINDir('A',RW,1);
	DIO_vsetPINDir('A',RS,1);
   	DIO_write('A',RW,0);
*/

	DIO_vsetPINDir('A',4,1);
    4a8a:	81 e4       	ldi	r24, 0x41	; 65
    4a8c:	64 e0       	ldi	r22, 0x04	; 4
    4a8e:	41 e0       	ldi	r20, 0x01	; 1
    4a90:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    4a94:	81 e4       	ldi	r24, 0x41	; 65
    4a96:	65 e0       	ldi	r22, 0x05	; 5
    4a98:	41 e0       	ldi	r20, 0x01	; 1
    4a9a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    4a9e:	81 e4       	ldi	r24, 0x41	; 65
    4aa0:	66 e0       	ldi	r22, 0x06	; 6
    4aa2:	41 e0       	ldi	r20, 0x01	; 1
    4aa4:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    4aa8:	81 e4       	ldi	r24, 0x41	; 65
    4aaa:	67 e0       	ldi	r22, 0x07	; 7
    4aac:	41 e0       	ldi	r20, 0x01	; 1
    4aae:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
    4ab2:	82 e4       	ldi	r24, 0x42	; 66
    4ab4:	60 e0       	ldi	r22, 0x00	; 0
    4ab6:	41 e0       	ldi	r20, 0x01	; 1
    4ab8:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
    4abc:	82 e4       	ldi	r24, 0x42	; 66
    4abe:	62 e0       	ldi	r22, 0x02	; 2
    4ac0:	41 e0       	ldi	r20, 0x01	; 1
    4ac2:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
    4ac6:	82 e4       	ldi	r24, 0x42	; 66
    4ac8:	61 e0       	ldi	r22, 0x01	; 1
    4aca:	41 e0       	ldi	r20, 0x01	; 1
    4acc:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
    4ad0:	82 e4       	ldi	r24, 0x42	; 66
    4ad2:	62 e0       	ldi	r22, 0x02	; 2
    4ad4:	40 e0       	ldi	r20, 0x00	; 0
    4ad6:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <DIO_write>

	LCD_vSend_cmd(RETURN_HOME); //return home
    4ada:	82 e0       	ldi	r24, 0x02	; 2
    4adc:	0e 94 d6 28 	call	0x51ac	; 0x51ac <LCD_vSend_cmd>
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	ed 5b       	subi	r30, 0xBD	; 189
    4ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	a0 e2       	ldi	r26, 0x20	; 32
    4aec:	b1 e4       	ldi	r27, 0x41	; 65
    4aee:	80 83       	st	Z, r24
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	a2 83       	std	Z+2, r26	; 0x02
    4af4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4af6:	8e 01       	movw	r16, r28
    4af8:	01 5c       	subi	r16, 0xC1	; 193
    4afa:	1f 4f       	sbci	r17, 0xFF	; 255
    4afc:	fe 01       	movw	r30, r28
    4afe:	ed 5b       	subi	r30, 0xBD	; 189
    4b00:	ff 4f       	sbci	r31, 0xFF	; 255
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	4a e7       	ldi	r20, 0x7A	; 122
    4b10:	53 e4       	ldi	r21, 0x43	; 67
    4b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	f8 01       	movw	r30, r16
    4b1c:	80 83       	st	Z, r24
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	a2 83       	std	Z+2, r26	; 0x02
    4b22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b24:	fe 01       	movw	r30, r28
    4b26:	ff 96       	adiw	r30, 0x3f	; 63
    4b28:	60 81       	ld	r22, Z
    4b2a:	71 81       	ldd	r23, Z+1	; 0x01
    4b2c:	82 81       	ldd	r24, Z+2	; 0x02
    4b2e:	93 81       	ldd	r25, Z+3	; 0x03
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	40 e8       	ldi	r20, 0x80	; 128
    4b36:	5f e3       	ldi	r21, 0x3F	; 63
    4b38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b3c:	88 23       	and	r24, r24
    4b3e:	2c f4       	brge	.+10     	; 0x4b4a <LCD_vInit+0x240>
		__ticks = 1;
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	9e af       	std	Y+62, r25	; 0x3e
    4b46:	8d af       	std	Y+61, r24	; 0x3d
    4b48:	46 c0       	rjmp	.+140    	; 0x4bd6 <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	ff 96       	adiw	r30, 0x3f	; 63
    4b4e:	60 81       	ld	r22, Z
    4b50:	71 81       	ldd	r23, Z+1	; 0x01
    4b52:	82 81       	ldd	r24, Z+2	; 0x02
    4b54:	93 81       	ldd	r25, Z+3	; 0x03
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	3f ef       	ldi	r19, 0xFF	; 255
    4b5a:	4f e7       	ldi	r20, 0x7F	; 127
    4b5c:	57 e4       	ldi	r21, 0x47	; 71
    4b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b62:	18 16       	cp	r1, r24
    4b64:	64 f5       	brge	.+88     	; 0x4bbe <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b66:	fe 01       	movw	r30, r28
    4b68:	ed 5b       	subi	r30, 0xBD	; 189
    4b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6c:	60 81       	ld	r22, Z
    4b6e:	71 81       	ldd	r23, Z+1	; 0x01
    4b70:	82 81       	ldd	r24, Z+2	; 0x02
    4b72:	93 81       	ldd	r25, Z+3	; 0x03
    4b74:	20 e0       	ldi	r18, 0x00	; 0
    4b76:	30 e0       	ldi	r19, 0x00	; 0
    4b78:	40 e2       	ldi	r20, 0x20	; 32
    4b7a:	51 e4       	ldi	r21, 0x41	; 65
    4b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	bc 01       	movw	r22, r24
    4b86:	cd 01       	movw	r24, r26
    4b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	9e af       	std	Y+62, r25	; 0x3e
    4b92:	8d af       	std	Y+61, r24	; 0x3d
    4b94:	0f c0       	rjmp	.+30     	; 0x4bb4 <LCD_vInit+0x2aa>
    4b96:	89 e1       	ldi	r24, 0x19	; 25
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	9c af       	std	Y+60, r25	; 0x3c
    4b9c:	8b af       	std	Y+59, r24	; 0x3b
    4b9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ba0:	9c ad       	ldd	r25, Y+60	; 0x3c
    4ba2:	01 97       	sbiw	r24, 0x01	; 1
    4ba4:	f1 f7       	brne	.-4      	; 0x4ba2 <LCD_vInit+0x298>
    4ba6:	9c af       	std	Y+60, r25	; 0x3c
    4ba8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4baa:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bac:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bae:	01 97       	sbiw	r24, 0x01	; 1
    4bb0:	9e af       	std	Y+62, r25	; 0x3e
    4bb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bb6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bb8:	00 97       	sbiw	r24, 0x00	; 0
    4bba:	69 f7       	brne	.-38     	; 0x4b96 <LCD_vInit+0x28c>
    4bbc:	16 c0       	rjmp	.+44     	; 0x4bea <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	ff 96       	adiw	r30, 0x3f	; 63
    4bc2:	60 81       	ld	r22, Z
    4bc4:	71 81       	ldd	r23, Z+1	; 0x01
    4bc6:	82 81       	ldd	r24, Z+2	; 0x02
    4bc8:	93 81       	ldd	r25, Z+3	; 0x03
    4bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	9e af       	std	Y+62, r25	; 0x3e
    4bd4:	8d af       	std	Y+61, r24	; 0x3d
    4bd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bda:	9a af       	std	Y+58, r25	; 0x3a
    4bdc:	89 af       	std	Y+57, r24	; 0x39
    4bde:	89 ad       	ldd	r24, Y+57	; 0x39
    4be0:	9a ad       	ldd	r25, Y+58	; 0x3a
    4be2:	01 97       	sbiw	r24, 0x01	; 1
    4be4:	f1 f7       	brne	.-4      	; 0x4be2 <LCD_vInit+0x2d8>
    4be6:	9a af       	std	Y+58, r25	; 0x3a
    4be8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    4bea:	88 e2       	ldi	r24, 0x28	; 40
    4bec:	0e 94 d6 28 	call	0x51ac	; 0x51ac <LCD_vSend_cmd>
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	a0 e8       	ldi	r26, 0x80	; 128
    4bf6:	bf e3       	ldi	r27, 0x3F	; 63
    4bf8:	8d ab       	std	Y+53, r24	; 0x35
    4bfa:	9e ab       	std	Y+54, r25	; 0x36
    4bfc:	af ab       	std	Y+55, r26	; 0x37
    4bfe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c00:	6d a9       	ldd	r22, Y+53	; 0x35
    4c02:	7e a9       	ldd	r23, Y+54	; 0x36
    4c04:	8f a9       	ldd	r24, Y+55	; 0x37
    4c06:	98 ad       	ldd	r25, Y+56	; 0x38
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	4a e7       	ldi	r20, 0x7A	; 122
    4c0e:	53 e4       	ldi	r21, 0x43	; 67
    4c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c14:	dc 01       	movw	r26, r24
    4c16:	cb 01       	movw	r24, r22
    4c18:	89 ab       	std	Y+49, r24	; 0x31
    4c1a:	9a ab       	std	Y+50, r25	; 0x32
    4c1c:	ab ab       	std	Y+51, r26	; 0x33
    4c1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c20:	69 a9       	ldd	r22, Y+49	; 0x31
    4c22:	7a a9       	ldd	r23, Y+50	; 0x32
    4c24:	8b a9       	ldd	r24, Y+51	; 0x33
    4c26:	9c a9       	ldd	r25, Y+52	; 0x34
    4c28:	20 e0       	ldi	r18, 0x00	; 0
    4c2a:	30 e0       	ldi	r19, 0x00	; 0
    4c2c:	40 e8       	ldi	r20, 0x80	; 128
    4c2e:	5f e3       	ldi	r21, 0x3F	; 63
    4c30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c34:	88 23       	and	r24, r24
    4c36:	2c f4       	brge	.+10     	; 0x4c42 <LCD_vInit+0x338>
		__ticks = 1;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	98 ab       	std	Y+48, r25	; 0x30
    4c3e:	8f a7       	std	Y+47, r24	; 0x2f
    4c40:	3f c0       	rjmp	.+126    	; 0x4cc0 <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    4c42:	69 a9       	ldd	r22, Y+49	; 0x31
    4c44:	7a a9       	ldd	r23, Y+50	; 0x32
    4c46:	8b a9       	ldd	r24, Y+51	; 0x33
    4c48:	9c a9       	ldd	r25, Y+52	; 0x34
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	3f ef       	ldi	r19, 0xFF	; 255
    4c4e:	4f e7       	ldi	r20, 0x7F	; 127
    4c50:	57 e4       	ldi	r21, 0x47	; 71
    4c52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c56:	18 16       	cp	r1, r24
    4c58:	4c f5       	brge	.+82     	; 0x4cac <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c5a:	6d a9       	ldd	r22, Y+53	; 0x35
    4c5c:	7e a9       	ldd	r23, Y+54	; 0x36
    4c5e:	8f a9       	ldd	r24, Y+55	; 0x37
    4c60:	98 ad       	ldd	r25, Y+56	; 0x38
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	40 e2       	ldi	r20, 0x20	; 32
    4c68:	51 e4       	ldi	r21, 0x41	; 65
    4c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	cb 01       	movw	r24, r22
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	98 ab       	std	Y+48, r25	; 0x30
    4c80:	8f a7       	std	Y+47, r24	; 0x2f
    4c82:	0f c0       	rjmp	.+30     	; 0x4ca2 <LCD_vInit+0x398>
    4c84:	89 e1       	ldi	r24, 0x19	; 25
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	9e a7       	std	Y+46, r25	; 0x2e
    4c8a:	8d a7       	std	Y+45, r24	; 0x2d
    4c8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c90:	01 97       	sbiw	r24, 0x01	; 1
    4c92:	f1 f7       	brne	.-4      	; 0x4c90 <LCD_vInit+0x386>
    4c94:	9e a7       	std	Y+46, r25	; 0x2e
    4c96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c98:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c9a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c9c:	01 97       	sbiw	r24, 0x01	; 1
    4c9e:	98 ab       	std	Y+48, r25	; 0x30
    4ca0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	69 f7       	brne	.-38     	; 0x4c84 <LCD_vInit+0x37a>
    4caa:	14 c0       	rjmp	.+40     	; 0x4cd4 <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cac:	69 a9       	ldd	r22, Y+49	; 0x31
    4cae:	7a a9       	ldd	r23, Y+50	; 0x32
    4cb0:	8b a9       	ldd	r24, Y+51	; 0x33
    4cb2:	9c a9       	ldd	r25, Y+52	; 0x34
    4cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	98 ab       	std	Y+48, r25	; 0x30
    4cbe:	8f a7       	std	Y+47, r24	; 0x2f
    4cc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cc2:	98 a9       	ldd	r25, Y+48	; 0x30
    4cc4:	9c a7       	std	Y+44, r25	; 0x2c
    4cc6:	8b a7       	std	Y+43, r24	; 0x2b
    4cc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cca:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	f1 f7       	brne	.-4      	; 0x4ccc <LCD_vInit+0x3c2>
    4cd0:	9c a7       	std	Y+44, r25	; 0x2c
    4cd2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    4cd4:	8e e0       	ldi	r24, 0x0E	; 14
    4cd6:	0e 94 d6 28 	call	0x51ac	; 0x51ac <LCD_vSend_cmd>
    4cda:	80 e0       	ldi	r24, 0x00	; 0
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	a0 e8       	ldi	r26, 0x80	; 128
    4ce0:	bf e3       	ldi	r27, 0x3F	; 63
    4ce2:	8f a3       	std	Y+39, r24	; 0x27
    4ce4:	98 a7       	std	Y+40, r25	; 0x28
    4ce6:	a9 a7       	std	Y+41, r26	; 0x29
    4ce8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cea:	6f a1       	ldd	r22, Y+39	; 0x27
    4cec:	78 a5       	ldd	r23, Y+40	; 0x28
    4cee:	89 a5       	ldd	r24, Y+41	; 0x29
    4cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	4a e7       	ldi	r20, 0x7A	; 122
    4cf8:	53 e4       	ldi	r21, 0x43	; 67
    4cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	8b a3       	std	Y+35, r24	; 0x23
    4d04:	9c a3       	std	Y+36, r25	; 0x24
    4d06:	ad a3       	std	Y+37, r26	; 0x25
    4d08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d0a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d0c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d0e:	8d a1       	ldd	r24, Y+37	; 0x25
    4d10:	9e a1       	ldd	r25, Y+38	; 0x26
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e8       	ldi	r20, 0x80	; 128
    4d18:	5f e3       	ldi	r21, 0x3F	; 63
    4d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d1e:	88 23       	and	r24, r24
    4d20:	2c f4       	brge	.+10     	; 0x4d2c <LCD_vInit+0x422>
		__ticks = 1;
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	9a a3       	std	Y+34, r25	; 0x22
    4d28:	89 a3       	std	Y+33, r24	; 0x21
    4d2a:	3f c0       	rjmp	.+126    	; 0x4daa <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    4d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    4d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    4d30:	8d a1       	ldd	r24, Y+37	; 0x25
    4d32:	9e a1       	ldd	r25, Y+38	; 0x26
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	3f ef       	ldi	r19, 0xFF	; 255
    4d38:	4f e7       	ldi	r20, 0x7F	; 127
    4d3a:	57 e4       	ldi	r21, 0x47	; 71
    4d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d40:	18 16       	cp	r1, r24
    4d42:	4c f5       	brge	.+82     	; 0x4d96 <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d44:	6f a1       	ldd	r22, Y+39	; 0x27
    4d46:	78 a5       	ldd	r23, Y+40	; 0x28
    4d48:	89 a5       	ldd	r24, Y+41	; 0x29
    4d4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e2       	ldi	r20, 0x20	; 32
    4d52:	51 e4       	ldi	r21, 0x41	; 65
    4d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	9a a3       	std	Y+34, r25	; 0x22
    4d6a:	89 a3       	std	Y+33, r24	; 0x21
    4d6c:	0f c0       	rjmp	.+30     	; 0x4d8c <LCD_vInit+0x482>
    4d6e:	89 e1       	ldi	r24, 0x19	; 25
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	98 a3       	std	Y+32, r25	; 0x20
    4d74:	8f 8f       	std	Y+31, r24	; 0x1f
    4d76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d78:	98 a1       	ldd	r25, Y+32	; 0x20
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	f1 f7       	brne	.-4      	; 0x4d7a <LCD_vInit+0x470>
    4d7e:	98 a3       	std	Y+32, r25	; 0x20
    4d80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d82:	89 a1       	ldd	r24, Y+33	; 0x21
    4d84:	9a a1       	ldd	r25, Y+34	; 0x22
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	9a a3       	std	Y+34, r25	; 0x22
    4d8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    4d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	69 f7       	brne	.-38     	; 0x4d6e <LCD_vInit+0x464>
    4d94:	14 c0       	rjmp	.+40     	; 0x4dbe <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d96:	6b a1       	ldd	r22, Y+35	; 0x23
    4d98:	7c a1       	ldd	r23, Y+36	; 0x24
    4d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	9a a3       	std	Y+34, r25	; 0x22
    4da8:	89 a3       	std	Y+33, r24	; 0x21
    4daa:	89 a1       	ldd	r24, Y+33	; 0x21
    4dac:	9a a1       	ldd	r25, Y+34	; 0x22
    4dae:	9e 8f       	std	Y+30, r25	; 0x1e
    4db0:	8d 8f       	std	Y+29, r24	; 0x1d
    4db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	f1 f7       	brne	.-4      	; 0x4db6 <LCD_vInit+0x4ac>
    4dba:	9e 8f       	std	Y+30, r25	; 0x1e
    4dbc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	0e 94 d6 28 	call	0x51ac	; 0x51ac <LCD_vSend_cmd>
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	a0 e2       	ldi	r26, 0x20	; 32
    4dca:	b1 e4       	ldi	r27, 0x41	; 65
    4dcc:	89 8f       	std	Y+25, r24	; 0x19
    4dce:	9a 8f       	std	Y+26, r25	; 0x1a
    4dd0:	ab 8f       	std	Y+27, r26	; 0x1b
    4dd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    4dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ddc:	20 e0       	ldi	r18, 0x00	; 0
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	4a e7       	ldi	r20, 0x7A	; 122
    4de2:	53 e4       	ldi	r21, 0x43	; 67
    4de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4de8:	dc 01       	movw	r26, r24
    4dea:	cb 01       	movw	r24, r22
    4dec:	8d 8b       	std	Y+21, r24	; 0x15
    4dee:	9e 8b       	std	Y+22, r25	; 0x16
    4df0:	af 8b       	std	Y+23, r26	; 0x17
    4df2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4df4:	6d 89       	ldd	r22, Y+21	; 0x15
    4df6:	7e 89       	ldd	r23, Y+22	; 0x16
    4df8:	8f 89       	ldd	r24, Y+23	; 0x17
    4dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    4dfc:	20 e0       	ldi	r18, 0x00	; 0
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	40 e8       	ldi	r20, 0x80	; 128
    4e02:	5f e3       	ldi	r21, 0x3F	; 63
    4e04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e08:	88 23       	and	r24, r24
    4e0a:	2c f4       	brge	.+10     	; 0x4e16 <LCD_vInit+0x50c>
		__ticks = 1;
    4e0c:	81 e0       	ldi	r24, 0x01	; 1
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	9c 8b       	std	Y+20, r25	; 0x14
    4e12:	8b 8b       	std	Y+19, r24	; 0x13
    4e14:	3f c0       	rjmp	.+126    	; 0x4e94 <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    4e16:	6d 89       	ldd	r22, Y+21	; 0x15
    4e18:	7e 89       	ldd	r23, Y+22	; 0x16
    4e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
    4e20:	3f ef       	ldi	r19, 0xFF	; 255
    4e22:	4f e7       	ldi	r20, 0x7F	; 127
    4e24:	57 e4       	ldi	r21, 0x47	; 71
    4e26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e2a:	18 16       	cp	r1, r24
    4e2c:	4c f5       	brge	.+82     	; 0x4e80 <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    4e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	40 e2       	ldi	r20, 0x20	; 32
    4e3c:	51 e4       	ldi	r21, 0x41	; 65
    4e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	bc 01       	movw	r22, r24
    4e48:	cd 01       	movw	r24, r26
    4e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e4e:	dc 01       	movw	r26, r24
    4e50:	cb 01       	movw	r24, r22
    4e52:	9c 8b       	std	Y+20, r25	; 0x14
    4e54:	8b 8b       	std	Y+19, r24	; 0x13
    4e56:	0f c0       	rjmp	.+30     	; 0x4e76 <LCD_vInit+0x56c>
    4e58:	89 e1       	ldi	r24, 0x19	; 25
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	9a 8b       	std	Y+18, r25	; 0x12
    4e5e:	89 8b       	std	Y+17, r24	; 0x11
    4e60:	89 89       	ldd	r24, Y+17	; 0x11
    4e62:	9a 89       	ldd	r25, Y+18	; 0x12
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	f1 f7       	brne	.-4      	; 0x4e64 <LCD_vInit+0x55a>
    4e68:	9a 8b       	std	Y+18, r25	; 0x12
    4e6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e70:	01 97       	sbiw	r24, 0x01	; 1
    4e72:	9c 8b       	std	Y+20, r25	; 0x14
    4e74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e76:	8b 89       	ldd	r24, Y+19	; 0x13
    4e78:	9c 89       	ldd	r25, Y+20	; 0x14
    4e7a:	00 97       	sbiw	r24, 0x00	; 0
    4e7c:	69 f7       	brne	.-38     	; 0x4e58 <LCD_vInit+0x54e>
    4e7e:	14 c0       	rjmp	.+40     	; 0x4ea8 <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e80:	6d 89       	ldd	r22, Y+21	; 0x15
    4e82:	7e 89       	ldd	r23, Y+22	; 0x16
    4e84:	8f 89       	ldd	r24, Y+23	; 0x17
    4e86:	98 8d       	ldd	r25, Y+24	; 0x18
    4e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	cb 01       	movw	r24, r22
    4e90:	9c 8b       	std	Y+20, r25	; 0x14
    4e92:	8b 8b       	std	Y+19, r24	; 0x13
    4e94:	8b 89       	ldd	r24, Y+19	; 0x13
    4e96:	9c 89       	ldd	r25, Y+20	; 0x14
    4e98:	98 8b       	std	Y+16, r25	; 0x10
    4e9a:	8f 87       	std	Y+15, r24	; 0x0f
    4e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e9e:	98 89       	ldd	r25, Y+16	; 0x10
    4ea0:	01 97       	sbiw	r24, 0x01	; 1
    4ea2:	f1 f7       	brne	.-4      	; 0x4ea0 <LCD_vInit+0x596>
    4ea4:	98 8b       	std	Y+16, r25	; 0x10
    4ea6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    4ea8:	86 e0       	ldi	r24, 0x06	; 6
    4eaa:	0e 94 d6 28 	call	0x51ac	; 0x51ac <LCD_vSend_cmd>
    4eae:	80 e0       	ldi	r24, 0x00	; 0
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	a0 e8       	ldi	r26, 0x80	; 128
    4eb4:	bf e3       	ldi	r27, 0x3F	; 63
    4eb6:	8b 87       	std	Y+11, r24	; 0x0b
    4eb8:	9c 87       	std	Y+12, r25	; 0x0c
    4eba:	ad 87       	std	Y+13, r26	; 0x0d
    4ebc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ebe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ec0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	4a e7       	ldi	r20, 0x7A	; 122
    4ecc:	53 e4       	ldi	r21, 0x43	; 67
    4ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	8f 83       	std	Y+7, r24	; 0x07
    4ed8:	98 87       	std	Y+8, r25	; 0x08
    4eda:	a9 87       	std	Y+9, r26	; 0x09
    4edc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ede:	6f 81       	ldd	r22, Y+7	; 0x07
    4ee0:	78 85       	ldd	r23, Y+8	; 0x08
    4ee2:	89 85       	ldd	r24, Y+9	; 0x09
    4ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	40 e8       	ldi	r20, 0x80	; 128
    4eec:	5f e3       	ldi	r21, 0x3F	; 63
    4eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ef2:	88 23       	and	r24, r24
    4ef4:	2c f4       	brge	.+10     	; 0x4f00 <LCD_vInit+0x5f6>
		__ticks = 1;
    4ef6:	81 e0       	ldi	r24, 0x01	; 1
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	9e 83       	std	Y+6, r25	; 0x06
    4efc:	8d 83       	std	Y+5, r24	; 0x05
    4efe:	3f c0       	rjmp	.+126    	; 0x4f7e <LCD_vInit+0x674>
	else if (__tmp > 65535)
    4f00:	6f 81       	ldd	r22, Y+7	; 0x07
    4f02:	78 85       	ldd	r23, Y+8	; 0x08
    4f04:	89 85       	ldd	r24, Y+9	; 0x09
    4f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f08:	20 e0       	ldi	r18, 0x00	; 0
    4f0a:	3f ef       	ldi	r19, 0xFF	; 255
    4f0c:	4f e7       	ldi	r20, 0x7F	; 127
    4f0e:	57 e4       	ldi	r21, 0x47	; 71
    4f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f14:	18 16       	cp	r1, r24
    4f16:	4c f5       	brge	.+82     	; 0x4f6a <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	40 e2       	ldi	r20, 0x20	; 32
    4f26:	51 e4       	ldi	r21, 0x41	; 65
    4f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	cb 01       	movw	r24, r22
    4f30:	bc 01       	movw	r22, r24
    4f32:	cd 01       	movw	r24, r26
    4f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f38:	dc 01       	movw	r26, r24
    4f3a:	cb 01       	movw	r24, r22
    4f3c:	9e 83       	std	Y+6, r25	; 0x06
    4f3e:	8d 83       	std	Y+5, r24	; 0x05
    4f40:	0f c0       	rjmp	.+30     	; 0x4f60 <LCD_vInit+0x656>
    4f42:	89 e1       	ldi	r24, 0x19	; 25
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	9c 83       	std	Y+4, r25	; 0x04
    4f48:	8b 83       	std	Y+3, r24	; 0x03
    4f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f4e:	01 97       	sbiw	r24, 0x01	; 1
    4f50:	f1 f7       	brne	.-4      	; 0x4f4e <LCD_vInit+0x644>
    4f52:	9c 83       	std	Y+4, r25	; 0x04
    4f54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f56:	8d 81       	ldd	r24, Y+5	; 0x05
    4f58:	9e 81       	ldd	r25, Y+6	; 0x06
    4f5a:	01 97       	sbiw	r24, 0x01	; 1
    4f5c:	9e 83       	std	Y+6, r25	; 0x06
    4f5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f60:	8d 81       	ldd	r24, Y+5	; 0x05
    4f62:	9e 81       	ldd	r25, Y+6	; 0x06
    4f64:	00 97       	sbiw	r24, 0x00	; 0
    4f66:	69 f7       	brne	.-38     	; 0x4f42 <LCD_vInit+0x638>
    4f68:	14 c0       	rjmp	.+40     	; 0x4f92 <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f6c:	78 85       	ldd	r23, Y+8	; 0x08
    4f6e:	89 85       	ldd	r24, Y+9	; 0x09
    4f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	9e 83       	std	Y+6, r25	; 0x06
    4f7c:	8d 83       	std	Y+5, r24	; 0x05
    4f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f80:	9e 81       	ldd	r25, Y+6	; 0x06
    4f82:	9a 83       	std	Y+2, r25	; 0x02
    4f84:	89 83       	std	Y+1, r24	; 0x01
    4f86:	89 81       	ldd	r24, Y+1	; 0x01
    4f88:	9a 81       	ldd	r25, Y+2	; 0x02
    4f8a:	01 97       	sbiw	r24, 0x01	; 1
    4f8c:	f1 f7       	brne	.-4      	; 0x4f8a <LCD_vInit+0x680>
    4f8e:	9a 83       	std	Y+2, r25	; 0x02
    4f90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    4f92:	cc 5a       	subi	r28, 0xAC	; 172
    4f94:	df 4f       	sbci	r29, 0xFF	; 255
    4f96:	0f b6       	in	r0, 0x3f	; 63
    4f98:	f8 94       	cli
    4f9a:	de bf       	out	0x3e, r29	; 62
    4f9c:	0f be       	out	0x3f, r0	; 63
    4f9e:	cd bf       	out	0x3d, r28	; 61
    4fa0:	cf 91       	pop	r28
    4fa2:	df 91       	pop	r29
    4fa4:	1f 91       	pop	r17
    4fa6:	0f 91       	pop	r16
    4fa8:	08 95       	ret

00004faa <send_falling_edge>:


static void send_falling_edge(void)
{
    4faa:	df 93       	push	r29
    4fac:	cf 93       	push	r28
    4fae:	cd b7       	in	r28, 0x3d	; 61
    4fb0:	de b7       	in	r29, 0x3e	; 62
    4fb2:	6c 97       	sbiw	r28, 0x1c	; 28
    4fb4:	0f b6       	in	r0, 0x3f	; 63
    4fb6:	f8 94       	cli
    4fb8:	de bf       	out	0x3e, r29	; 62
    4fba:	0f be       	out	0x3f, r0	; 63
    4fbc:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    4fbe:	82 e4       	ldi	r24, 0x42	; 66
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
    4fc2:	41 e0       	ldi	r20, 0x01	; 1
    4fc4:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <DIO_write>
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	a0 e0       	ldi	r26, 0x00	; 0
    4fce:	b0 e4       	ldi	r27, 0x40	; 64
    4fd0:	89 8f       	std	Y+25, r24	; 0x19
    4fd2:	9a 8f       	std	Y+26, r25	; 0x1a
    4fd4:	ab 8f       	std	Y+27, r26	; 0x1b
    4fd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    4fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	4a e7       	ldi	r20, 0x7A	; 122
    4fe6:	53 e4       	ldi	r21, 0x43	; 67
    4fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	8d 8b       	std	Y+21, r24	; 0x15
    4ff2:	9e 8b       	std	Y+22, r25	; 0x16
    4ff4:	af 8b       	std	Y+23, r26	; 0x17
    4ff6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    4ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    4ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	40 e8       	ldi	r20, 0x80	; 128
    5006:	5f e3       	ldi	r21, 0x3F	; 63
    5008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    500c:	88 23       	and	r24, r24
    500e:	2c f4       	brge	.+10     	; 0x501a <send_falling_edge+0x70>
		__ticks = 1;
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	9c 8b       	std	Y+20, r25	; 0x14
    5016:	8b 8b       	std	Y+19, r24	; 0x13
    5018:	3f c0       	rjmp	.+126    	; 0x5098 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    501a:	6d 89       	ldd	r22, Y+21	; 0x15
    501c:	7e 89       	ldd	r23, Y+22	; 0x16
    501e:	8f 89       	ldd	r24, Y+23	; 0x17
    5020:	98 8d       	ldd	r25, Y+24	; 0x18
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	3f ef       	ldi	r19, 0xFF	; 255
    5026:	4f e7       	ldi	r20, 0x7F	; 127
    5028:	57 e4       	ldi	r21, 0x47	; 71
    502a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    502e:	18 16       	cp	r1, r24
    5030:	4c f5       	brge	.+82     	; 0x5084 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5032:	69 8d       	ldd	r22, Y+25	; 0x19
    5034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	40 e2       	ldi	r20, 0x20	; 32
    5040:	51 e4       	ldi	r21, 0x41	; 65
    5042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	bc 01       	movw	r22, r24
    504c:	cd 01       	movw	r24, r26
    504e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5052:	dc 01       	movw	r26, r24
    5054:	cb 01       	movw	r24, r22
    5056:	9c 8b       	std	Y+20, r25	; 0x14
    5058:	8b 8b       	std	Y+19, r24	; 0x13
    505a:	0f c0       	rjmp	.+30     	; 0x507a <send_falling_edge+0xd0>
    505c:	89 e1       	ldi	r24, 0x19	; 25
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	9a 8b       	std	Y+18, r25	; 0x12
    5062:	89 8b       	std	Y+17, r24	; 0x11
    5064:	89 89       	ldd	r24, Y+17	; 0x11
    5066:	9a 89       	ldd	r25, Y+18	; 0x12
    5068:	01 97       	sbiw	r24, 0x01	; 1
    506a:	f1 f7       	brne	.-4      	; 0x5068 <send_falling_edge+0xbe>
    506c:	9a 8b       	std	Y+18, r25	; 0x12
    506e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5070:	8b 89       	ldd	r24, Y+19	; 0x13
    5072:	9c 89       	ldd	r25, Y+20	; 0x14
    5074:	01 97       	sbiw	r24, 0x01	; 1
    5076:	9c 8b       	std	Y+20, r25	; 0x14
    5078:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507a:	8b 89       	ldd	r24, Y+19	; 0x13
    507c:	9c 89       	ldd	r25, Y+20	; 0x14
    507e:	00 97       	sbiw	r24, 0x00	; 0
    5080:	69 f7       	brne	.-38     	; 0x505c <send_falling_edge+0xb2>
    5082:	14 c0       	rjmp	.+40     	; 0x50ac <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5084:	6d 89       	ldd	r22, Y+21	; 0x15
    5086:	7e 89       	ldd	r23, Y+22	; 0x16
    5088:	8f 89       	ldd	r24, Y+23	; 0x17
    508a:	98 8d       	ldd	r25, Y+24	; 0x18
    508c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	9c 8b       	std	Y+20, r25	; 0x14
    5096:	8b 8b       	std	Y+19, r24	; 0x13
    5098:	8b 89       	ldd	r24, Y+19	; 0x13
    509a:	9c 89       	ldd	r25, Y+20	; 0x14
    509c:	98 8b       	std	Y+16, r25	; 0x10
    509e:	8f 87       	std	Y+15, r24	; 0x0f
    50a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    50a2:	98 89       	ldd	r25, Y+16	; 0x10
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <send_falling_edge+0xfa>
    50a8:	98 8b       	std	Y+16, r25	; 0x10
    50aa:	8f 87       	std	Y+15, r24	; 0x0f
	//DIO_write('A',EN,1);
	_delay_ms(2);
	DIO_write('B',EN,0);
    50ac:	82 e4       	ldi	r24, 0x42	; 66
    50ae:	60 e0       	ldi	r22, 0x00	; 0
    50b0:	40 e0       	ldi	r20, 0x00	; 0
    50b2:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <DIO_write>
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	a0 e0       	ldi	r26, 0x00	; 0
    50bc:	b0 e4       	ldi	r27, 0x40	; 64
    50be:	8b 87       	std	Y+11, r24	; 0x0b
    50c0:	9c 87       	std	Y+12, r25	; 0x0c
    50c2:	ad 87       	std	Y+13, r26	; 0x0d
    50c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    50c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    50ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    50cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	4a e7       	ldi	r20, 0x7A	; 122
    50d4:	53 e4       	ldi	r21, 0x43	; 67
    50d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	8f 83       	std	Y+7, r24	; 0x07
    50e0:	98 87       	std	Y+8, r25	; 0x08
    50e2:	a9 87       	std	Y+9, r26	; 0x09
    50e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50e6:	6f 81       	ldd	r22, Y+7	; 0x07
    50e8:	78 85       	ldd	r23, Y+8	; 0x08
    50ea:	89 85       	ldd	r24, Y+9	; 0x09
    50ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e8       	ldi	r20, 0x80	; 128
    50f4:	5f e3       	ldi	r21, 0x3F	; 63
    50f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50fa:	88 23       	and	r24, r24
    50fc:	2c f4       	brge	.+10     	; 0x5108 <send_falling_edge+0x15e>
		__ticks = 1;
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	9e 83       	std	Y+6, r25	; 0x06
    5104:	8d 83       	std	Y+5, r24	; 0x05
    5106:	3f c0       	rjmp	.+126    	; 0x5186 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    5108:	6f 81       	ldd	r22, Y+7	; 0x07
    510a:	78 85       	ldd	r23, Y+8	; 0x08
    510c:	89 85       	ldd	r24, Y+9	; 0x09
    510e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5110:	20 e0       	ldi	r18, 0x00	; 0
    5112:	3f ef       	ldi	r19, 0xFF	; 255
    5114:	4f e7       	ldi	r20, 0x7F	; 127
    5116:	57 e4       	ldi	r21, 0x47	; 71
    5118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    511c:	18 16       	cp	r1, r24
    511e:	4c f5       	brge	.+82     	; 0x5172 <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5120:	6b 85       	ldd	r22, Y+11	; 0x0b
    5122:	7c 85       	ldd	r23, Y+12	; 0x0c
    5124:	8d 85       	ldd	r24, Y+13	; 0x0d
    5126:	9e 85       	ldd	r25, Y+14	; 0x0e
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e2       	ldi	r20, 0x20	; 32
    512e:	51 e4       	ldi	r21, 0x41	; 65
    5130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5134:	dc 01       	movw	r26, r24
    5136:	cb 01       	movw	r24, r22
    5138:	bc 01       	movw	r22, r24
    513a:	cd 01       	movw	r24, r26
    513c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5140:	dc 01       	movw	r26, r24
    5142:	cb 01       	movw	r24, r22
    5144:	9e 83       	std	Y+6, r25	; 0x06
    5146:	8d 83       	std	Y+5, r24	; 0x05
    5148:	0f c0       	rjmp	.+30     	; 0x5168 <send_falling_edge+0x1be>
    514a:	89 e1       	ldi	r24, 0x19	; 25
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	9c 83       	std	Y+4, r25	; 0x04
    5150:	8b 83       	std	Y+3, r24	; 0x03
    5152:	8b 81       	ldd	r24, Y+3	; 0x03
    5154:	9c 81       	ldd	r25, Y+4	; 0x04
    5156:	01 97       	sbiw	r24, 0x01	; 1
    5158:	f1 f7       	brne	.-4      	; 0x5156 <send_falling_edge+0x1ac>
    515a:	9c 83       	std	Y+4, r25	; 0x04
    515c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515e:	8d 81       	ldd	r24, Y+5	; 0x05
    5160:	9e 81       	ldd	r25, Y+6	; 0x06
    5162:	01 97       	sbiw	r24, 0x01	; 1
    5164:	9e 83       	std	Y+6, r25	; 0x06
    5166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5168:	8d 81       	ldd	r24, Y+5	; 0x05
    516a:	9e 81       	ldd	r25, Y+6	; 0x06
    516c:	00 97       	sbiw	r24, 0x00	; 0
    516e:	69 f7       	brne	.-38     	; 0x514a <send_falling_edge+0x1a0>
    5170:	14 c0       	rjmp	.+40     	; 0x519a <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5172:	6f 81       	ldd	r22, Y+7	; 0x07
    5174:	78 85       	ldd	r23, Y+8	; 0x08
    5176:	89 85       	ldd	r24, Y+9	; 0x09
    5178:	9a 85       	ldd	r25, Y+10	; 0x0a
    517a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    517e:	dc 01       	movw	r26, r24
    5180:	cb 01       	movw	r24, r22
    5182:	9e 83       	std	Y+6, r25	; 0x06
    5184:	8d 83       	std	Y+5, r24	; 0x05
    5186:	8d 81       	ldd	r24, Y+5	; 0x05
    5188:	9e 81       	ldd	r25, Y+6	; 0x06
    518a:	9a 83       	std	Y+2, r25	; 0x02
    518c:	89 83       	std	Y+1, r24	; 0x01
    518e:	89 81       	ldd	r24, Y+1	; 0x01
    5190:	9a 81       	ldd	r25, Y+2	; 0x02
    5192:	01 97       	sbiw	r24, 0x01	; 1
    5194:	f1 f7       	brne	.-4      	; 0x5192 <send_falling_edge+0x1e8>
    5196:	9a 83       	std	Y+2, r25	; 0x02
    5198:	89 83       	std	Y+1, r24	; 0x01
	//DIO_write('A',EN,0);
	_delay_ms(2);
}
    519a:	6c 96       	adiw	r28, 0x1c	; 28
    519c:	0f b6       	in	r0, 0x3f	; 63
    519e:	f8 94       	cli
    51a0:	de bf       	out	0x3e, r29	; 62
    51a2:	0f be       	out	0x3f, r0	; 63
    51a4:	cd bf       	out	0x3d, r28	; 61
    51a6:	cf 91       	pop	r28
    51a8:	df 91       	pop	r29
    51aa:	08 95       	ret

000051ac <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    51ac:	df 93       	push	r29
    51ae:	cf 93       	push	r28
    51b0:	cd b7       	in	r28, 0x3d	; 61
    51b2:	de b7       	in	r29, 0x3e	; 62
    51b4:	2f 97       	sbiw	r28, 0x0f	; 15
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	f8 94       	cli
    51ba:	de bf       	out	0x3e, r29	; 62
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	cd bf       	out	0x3d, r28	; 61
    51c0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();

	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
    51c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    51c4:	98 2f       	mov	r25, r24
    51c6:	92 95       	swap	r25
    51c8:	9f 70       	andi	r25, 0x0F	; 15
    51ca:	81 e4       	ldi	r24, 0x41	; 65
    51cc:	69 2f       	mov	r22, r25
    51ce:	0e 94 16 24 	call	0x482c	; 0x482c <write_high_nibble>
	//write_high_nibble('B',cmd>>4);
	DIO_write('B',RS,0);
    51d2:	82 e4       	ldi	r24, 0x42	; 66
    51d4:	61 e0       	ldi	r22, 0x01	; 1
    51d6:	40 e0       	ldi	r20, 0x00	; 0
    51d8:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <DIO_write>
	//DIO_write('A',RS,0);
	send_falling_edge();
    51dc:	0e 94 d5 27 	call	0x4faa	; 0x4faa <send_falling_edge>
	write_high_nibble('A',cmd);
    51e0:	81 e4       	ldi	r24, 0x41	; 65
    51e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    51e4:	0e 94 16 24 	call	0x482c	; 0x482c <write_high_nibble>
	//write_high_nibble('B',cmd);
	DIO_write('B',RS,0);
    51e8:	82 e4       	ldi	r24, 0x42	; 66
    51ea:	61 e0       	ldi	r22, 0x01	; 1
    51ec:	40 e0       	ldi	r20, 0x00	; 0
    51ee:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <DIO_write>
	//DIO_write('A',RS,0);
	send_falling_edge();
    51f2:	0e 94 d5 27 	call	0x4faa	; 0x4faa <send_falling_edge>
    51f6:	80 e0       	ldi	r24, 0x00	; 0
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	a0 e8       	ldi	r26, 0x80	; 128
    51fc:	bf e3       	ldi	r27, 0x3F	; 63
    51fe:	8b 87       	std	Y+11, r24	; 0x0b
    5200:	9c 87       	std	Y+12, r25	; 0x0c
    5202:	ad 87       	std	Y+13, r26	; 0x0d
    5204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5206:	6b 85       	ldd	r22, Y+11	; 0x0b
    5208:	7c 85       	ldd	r23, Y+12	; 0x0c
    520a:	8d 85       	ldd	r24, Y+13	; 0x0d
    520c:	9e 85       	ldd	r25, Y+14	; 0x0e
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	4a e7       	ldi	r20, 0x7A	; 122
    5214:	53 e4       	ldi	r21, 0x43	; 67
    5216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521a:	dc 01       	movw	r26, r24
    521c:	cb 01       	movw	r24, r22
    521e:	8f 83       	std	Y+7, r24	; 0x07
    5220:	98 87       	std	Y+8, r25	; 0x08
    5222:	a9 87       	std	Y+9, r26	; 0x09
    5224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5226:	6f 81       	ldd	r22, Y+7	; 0x07
    5228:	78 85       	ldd	r23, Y+8	; 0x08
    522a:	89 85       	ldd	r24, Y+9	; 0x09
    522c:	9a 85       	ldd	r25, Y+10	; 0x0a
    522e:	20 e0       	ldi	r18, 0x00	; 0
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	40 e8       	ldi	r20, 0x80	; 128
    5234:	5f e3       	ldi	r21, 0x3F	; 63
    5236:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    523a:	88 23       	and	r24, r24
    523c:	2c f4       	brge	.+10     	; 0x5248 <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    523e:	81 e0       	ldi	r24, 0x01	; 1
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	9e 83       	std	Y+6, r25	; 0x06
    5244:	8d 83       	std	Y+5, r24	; 0x05
    5246:	3f c0       	rjmp	.+126    	; 0x52c6 <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    5248:	6f 81       	ldd	r22, Y+7	; 0x07
    524a:	78 85       	ldd	r23, Y+8	; 0x08
    524c:	89 85       	ldd	r24, Y+9	; 0x09
    524e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	3f ef       	ldi	r19, 0xFF	; 255
    5254:	4f e7       	ldi	r20, 0x7F	; 127
    5256:	57 e4       	ldi	r21, 0x47	; 71
    5258:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    525c:	18 16       	cp	r1, r24
    525e:	4c f5       	brge	.+82     	; 0x52b2 <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5260:	6b 85       	ldd	r22, Y+11	; 0x0b
    5262:	7c 85       	ldd	r23, Y+12	; 0x0c
    5264:	8d 85       	ldd	r24, Y+13	; 0x0d
    5266:	9e 85       	ldd	r25, Y+14	; 0x0e
    5268:	20 e0       	ldi	r18, 0x00	; 0
    526a:	30 e0       	ldi	r19, 0x00	; 0
    526c:	40 e2       	ldi	r20, 0x20	; 32
    526e:	51 e4       	ldi	r21, 0x41	; 65
    5270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5274:	dc 01       	movw	r26, r24
    5276:	cb 01       	movw	r24, r22
    5278:	bc 01       	movw	r22, r24
    527a:	cd 01       	movw	r24, r26
    527c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5280:	dc 01       	movw	r26, r24
    5282:	cb 01       	movw	r24, r22
    5284:	9e 83       	std	Y+6, r25	; 0x06
    5286:	8d 83       	std	Y+5, r24	; 0x05
    5288:	0f c0       	rjmp	.+30     	; 0x52a8 <LCD_vSend_cmd+0xfc>
    528a:	89 e1       	ldi	r24, 0x19	; 25
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	9c 83       	std	Y+4, r25	; 0x04
    5290:	8b 83       	std	Y+3, r24	; 0x03
    5292:	8b 81       	ldd	r24, Y+3	; 0x03
    5294:	9c 81       	ldd	r25, Y+4	; 0x04
    5296:	01 97       	sbiw	r24, 0x01	; 1
    5298:	f1 f7       	brne	.-4      	; 0x5296 <LCD_vSend_cmd+0xea>
    529a:	9c 83       	std	Y+4, r25	; 0x04
    529c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    529e:	8d 81       	ldd	r24, Y+5	; 0x05
    52a0:	9e 81       	ldd	r25, Y+6	; 0x06
    52a2:	01 97       	sbiw	r24, 0x01	; 1
    52a4:	9e 83       	std	Y+6, r25	; 0x06
    52a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52a8:	8d 81       	ldd	r24, Y+5	; 0x05
    52aa:	9e 81       	ldd	r25, Y+6	; 0x06
    52ac:	00 97       	sbiw	r24, 0x00	; 0
    52ae:	69 f7       	brne	.-38     	; 0x528a <LCD_vSend_cmd+0xde>
    52b0:	14 c0       	rjmp	.+40     	; 0x52da <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52b2:	6f 81       	ldd	r22, Y+7	; 0x07
    52b4:	78 85       	ldd	r23, Y+8	; 0x08
    52b6:	89 85       	ldd	r24, Y+9	; 0x09
    52b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	9e 83       	std	Y+6, r25	; 0x06
    52c4:	8d 83       	std	Y+5, r24	; 0x05
    52c6:	8d 81       	ldd	r24, Y+5	; 0x05
    52c8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ca:	9a 83       	std	Y+2, r25	; 0x02
    52cc:	89 83       	std	Y+1, r24	; 0x01
    52ce:	89 81       	ldd	r24, Y+1	; 0x01
    52d0:	9a 81       	ldd	r25, Y+2	; 0x02
    52d2:	01 97       	sbiw	r24, 0x01	; 1
    52d4:	f1 f7       	brne	.-4      	; 0x52d2 <LCD_vSend_cmd+0x126>
    52d6:	9a 83       	std	Y+2, r25	; 0x02
    52d8:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    52da:	2f 96       	adiw	r28, 0x0f	; 15
    52dc:	0f b6       	in	r0, 0x3f	; 63
    52de:	f8 94       	cli
    52e0:	de bf       	out	0x3e, r29	; 62
    52e2:	0f be       	out	0x3f, r0	; 63
    52e4:	cd bf       	out	0x3d, r28	; 61
    52e6:	cf 91       	pop	r28
    52e8:	df 91       	pop	r29
    52ea:	08 95       	ret

000052ec <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    52ec:	df 93       	push	r29
    52ee:	cf 93       	push	r28
    52f0:	cd b7       	in	r28, 0x3d	; 61
    52f2:	de b7       	in	r29, 0x3e	; 62
    52f4:	2f 97       	sbiw	r28, 0x0f	; 15
    52f6:	0f b6       	in	r0, 0x3f	; 63
    52f8:	f8 94       	cli
    52fa:	de bf       	out	0x3e, r29	; 62
    52fc:	0f be       	out	0x3f, r0	; 63
    52fe:	cd bf       	out	0x3d, r28	; 61
    5300:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();

	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
    5302:	8f 85       	ldd	r24, Y+15	; 0x0f
    5304:	98 2f       	mov	r25, r24
    5306:	92 95       	swap	r25
    5308:	9f 70       	andi	r25, 0x0F	; 15
    530a:	81 e4       	ldi	r24, 0x41	; 65
    530c:	69 2f       	mov	r22, r25
    530e:	0e 94 16 24 	call	0x482c	; 0x482c <write_high_nibble>
	DIO_write('B',RS,1);
    5312:	82 e4       	ldi	r24, 0x42	; 66
    5314:	61 e0       	ldi	r22, 0x01	; 1
    5316:	41 e0       	ldi	r20, 0x01	; 1
    5318:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <DIO_write>
	/*
	write_high_nibble('B',data>>4);
	DIO_write('A',RS,1);
*/

	send_falling_edge();
    531c:	0e 94 d5 27 	call	0x4faa	; 0x4faa <send_falling_edge>

	write_high_nibble('A',data);
    5320:	81 e4       	ldi	r24, 0x41	; 65
    5322:	6f 85       	ldd	r22, Y+15	; 0x0f
    5324:	0e 94 16 24 	call	0x482c	; 0x482c <write_high_nibble>
	DIO_write('B',RS,1);
    5328:	82 e4       	ldi	r24, 0x42	; 66
    532a:	61 e0       	ldi	r22, 0x01	; 1
    532c:	41 e0       	ldi	r20, 0x01	; 1
    532e:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <DIO_write>
/*
	write_high_nibble('B',data);
	DIO_write('A',RS,1);
*/
	send_falling_edge();
    5332:	0e 94 d5 27 	call	0x4faa	; 0x4faa <send_falling_edge>
    5336:	80 e0       	ldi	r24, 0x00	; 0
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	a0 e8       	ldi	r26, 0x80	; 128
    533c:	bf e3       	ldi	r27, 0x3F	; 63
    533e:	8b 87       	std	Y+11, r24	; 0x0b
    5340:	9c 87       	std	Y+12, r25	; 0x0c
    5342:	ad 87       	std	Y+13, r26	; 0x0d
    5344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5346:	6b 85       	ldd	r22, Y+11	; 0x0b
    5348:	7c 85       	ldd	r23, Y+12	; 0x0c
    534a:	8d 85       	ldd	r24, Y+13	; 0x0d
    534c:	9e 85       	ldd	r25, Y+14	; 0x0e
    534e:	20 e0       	ldi	r18, 0x00	; 0
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	4a e7       	ldi	r20, 0x7A	; 122
    5354:	53 e4       	ldi	r21, 0x43	; 67
    5356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    535a:	dc 01       	movw	r26, r24
    535c:	cb 01       	movw	r24, r22
    535e:	8f 83       	std	Y+7, r24	; 0x07
    5360:	98 87       	std	Y+8, r25	; 0x08
    5362:	a9 87       	std	Y+9, r26	; 0x09
    5364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5366:	6f 81       	ldd	r22, Y+7	; 0x07
    5368:	78 85       	ldd	r23, Y+8	; 0x08
    536a:	89 85       	ldd	r24, Y+9	; 0x09
    536c:	9a 85       	ldd	r25, Y+10	; 0x0a
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	40 e8       	ldi	r20, 0x80	; 128
    5374:	5f e3       	ldi	r21, 0x3F	; 63
    5376:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    537a:	88 23       	and	r24, r24
    537c:	2c f4       	brge	.+10     	; 0x5388 <LCD_vSend_char+0x9c>
		__ticks = 1;
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	9e 83       	std	Y+6, r25	; 0x06
    5384:	8d 83       	std	Y+5, r24	; 0x05
    5386:	3f c0       	rjmp	.+126    	; 0x5406 <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    5388:	6f 81       	ldd	r22, Y+7	; 0x07
    538a:	78 85       	ldd	r23, Y+8	; 0x08
    538c:	89 85       	ldd	r24, Y+9	; 0x09
    538e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	3f ef       	ldi	r19, 0xFF	; 255
    5394:	4f e7       	ldi	r20, 0x7F	; 127
    5396:	57 e4       	ldi	r21, 0x47	; 71
    5398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    539c:	18 16       	cp	r1, r24
    539e:	4c f5       	brge	.+82     	; 0x53f2 <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    53a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	30 e0       	ldi	r19, 0x00	; 0
    53ac:	40 e2       	ldi	r20, 0x20	; 32
    53ae:	51 e4       	ldi	r21, 0x41	; 65
    53b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	bc 01       	movw	r22, r24
    53ba:	cd 01       	movw	r24, r26
    53bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53c0:	dc 01       	movw	r26, r24
    53c2:	cb 01       	movw	r24, r22
    53c4:	9e 83       	std	Y+6, r25	; 0x06
    53c6:	8d 83       	std	Y+5, r24	; 0x05
    53c8:	0f c0       	rjmp	.+30     	; 0x53e8 <LCD_vSend_char+0xfc>
    53ca:	89 e1       	ldi	r24, 0x19	; 25
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	9c 83       	std	Y+4, r25	; 0x04
    53d0:	8b 83       	std	Y+3, r24	; 0x03
    53d2:	8b 81       	ldd	r24, Y+3	; 0x03
    53d4:	9c 81       	ldd	r25, Y+4	; 0x04
    53d6:	01 97       	sbiw	r24, 0x01	; 1
    53d8:	f1 f7       	brne	.-4      	; 0x53d6 <LCD_vSend_char+0xea>
    53da:	9c 83       	std	Y+4, r25	; 0x04
    53dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53de:	8d 81       	ldd	r24, Y+5	; 0x05
    53e0:	9e 81       	ldd	r25, Y+6	; 0x06
    53e2:	01 97       	sbiw	r24, 0x01	; 1
    53e4:	9e 83       	std	Y+6, r25	; 0x06
    53e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53e8:	8d 81       	ldd	r24, Y+5	; 0x05
    53ea:	9e 81       	ldd	r25, Y+6	; 0x06
    53ec:	00 97       	sbiw	r24, 0x00	; 0
    53ee:	69 f7       	brne	.-38     	; 0x53ca <LCD_vSend_char+0xde>
    53f0:	14 c0       	rjmp	.+40     	; 0x541a <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53f2:	6f 81       	ldd	r22, Y+7	; 0x07
    53f4:	78 85       	ldd	r23, Y+8	; 0x08
    53f6:	89 85       	ldd	r24, Y+9	; 0x09
    53f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fe:	dc 01       	movw	r26, r24
    5400:	cb 01       	movw	r24, r22
    5402:	9e 83       	std	Y+6, r25	; 0x06
    5404:	8d 83       	std	Y+5, r24	; 0x05
    5406:	8d 81       	ldd	r24, Y+5	; 0x05
    5408:	9e 81       	ldd	r25, Y+6	; 0x06
    540a:	9a 83       	std	Y+2, r25	; 0x02
    540c:	89 83       	std	Y+1, r24	; 0x01
    540e:	89 81       	ldd	r24, Y+1	; 0x01
    5410:	9a 81       	ldd	r25, Y+2	; 0x02
    5412:	01 97       	sbiw	r24, 0x01	; 1
    5414:	f1 f7       	brne	.-4      	; 0x5412 <LCD_vSend_char+0x126>
    5416:	9a 83       	std	Y+2, r25	; 0x02
    5418:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    541a:	2f 96       	adiw	r28, 0x0f	; 15
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	f8 94       	cli
    5420:	de bf       	out	0x3e, r29	; 62
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	cd bf       	out	0x3d, r28	; 61
    5426:	cf 91       	pop	r28
    5428:	df 91       	pop	r29
    542a:	08 95       	ret

0000542c <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    542c:	df 93       	push	r29
    542e:	cf 93       	push	r28
    5430:	00 d0       	rcall	.+0      	; 0x5432 <LCD_vSend_string+0x6>
    5432:	cd b7       	in	r28, 0x3d	; 61
    5434:	de b7       	in	r29, 0x3e	; 62
    5436:	9a 83       	std	Y+2, r25	; 0x02
    5438:	89 83       	std	Y+1, r24	; 0x01
    543a:	0a c0       	rjmp	.+20     	; 0x5450 <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    543c:	e9 81       	ldd	r30, Y+1	; 0x01
    543e:	fa 81       	ldd	r31, Y+2	; 0x02
    5440:	80 81       	ld	r24, Z
    5442:	0e 94 76 29 	call	0x52ec	; 0x52ec <LCD_vSend_char>
		data++;
    5446:	89 81       	ldd	r24, Y+1	; 0x01
    5448:	9a 81       	ldd	r25, Y+2	; 0x02
    544a:	01 96       	adiw	r24, 0x01	; 1
    544c:	9a 83       	std	Y+2, r25	; 0x02
    544e:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    5450:	e9 81       	ldd	r30, Y+1	; 0x01
    5452:	fa 81       	ldd	r31, Y+2	; 0x02
    5454:	80 81       	ld	r24, Z
    5456:	88 23       	and	r24, r24
    5458:	89 f7       	brne	.-30     	; 0x543c <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    545a:	0f 90       	pop	r0
    545c:	0f 90       	pop	r0
    545e:	cf 91       	pop	r28
    5460:	df 91       	pop	r29
    5462:	08 95       	ret

00005464 <LCD_clearscreen>:
void LCD_clearscreen()
{
    5464:	df 93       	push	r29
    5466:	cf 93       	push	r28
    5468:	cd b7       	in	r28, 0x3d	; 61
    546a:	de b7       	in	r29, 0x3e	; 62
    546c:	2e 97       	sbiw	r28, 0x0e	; 14
    546e:	0f b6       	in	r0, 0x3f	; 63
    5470:	f8 94       	cli
    5472:	de bf       	out	0x3e, r29	; 62
    5474:	0f be       	out	0x3f, r0	; 63
    5476:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	0e 94 d6 28 	call	0x51ac	; 0x51ac <LCD_vSend_cmd>
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	a0 e2       	ldi	r26, 0x20	; 32
    5484:	b1 e4       	ldi	r27, 0x41	; 65
    5486:	8b 87       	std	Y+11, r24	; 0x0b
    5488:	9c 87       	std	Y+12, r25	; 0x0c
    548a:	ad 87       	std	Y+13, r26	; 0x0d
    548c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    548e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5490:	7c 85       	ldd	r23, Y+12	; 0x0c
    5492:	8d 85       	ldd	r24, Y+13	; 0x0d
    5494:	9e 85       	ldd	r25, Y+14	; 0x0e
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	4a e7       	ldi	r20, 0x7A	; 122
    549c:	53 e4       	ldi	r21, 0x43	; 67
    549e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	8f 83       	std	Y+7, r24	; 0x07
    54a8:	98 87       	std	Y+8, r25	; 0x08
    54aa:	a9 87       	std	Y+9, r26	; 0x09
    54ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    54ae:	6f 81       	ldd	r22, Y+7	; 0x07
    54b0:	78 85       	ldd	r23, Y+8	; 0x08
    54b2:	89 85       	ldd	r24, Y+9	; 0x09
    54b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	40 e8       	ldi	r20, 0x80	; 128
    54bc:	5f e3       	ldi	r21, 0x3F	; 63
    54be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54c2:	88 23       	and	r24, r24
    54c4:	2c f4       	brge	.+10     	; 0x54d0 <LCD_clearscreen+0x6c>
		__ticks = 1;
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	9e 83       	std	Y+6, r25	; 0x06
    54cc:	8d 83       	std	Y+5, r24	; 0x05
    54ce:	3f c0       	rjmp	.+126    	; 0x554e <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    54d0:	6f 81       	ldd	r22, Y+7	; 0x07
    54d2:	78 85       	ldd	r23, Y+8	; 0x08
    54d4:	89 85       	ldd	r24, Y+9	; 0x09
    54d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	3f ef       	ldi	r19, 0xFF	; 255
    54dc:	4f e7       	ldi	r20, 0x7F	; 127
    54de:	57 e4       	ldi	r21, 0x47	; 71
    54e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54e4:	18 16       	cp	r1, r24
    54e6:	4c f5       	brge	.+82     	; 0x553a <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    54ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    54ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    54ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    54f0:	20 e0       	ldi	r18, 0x00	; 0
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	40 e2       	ldi	r20, 0x20	; 32
    54f6:	51 e4       	ldi	r21, 0x41	; 65
    54f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54fc:	dc 01       	movw	r26, r24
    54fe:	cb 01       	movw	r24, r22
    5500:	bc 01       	movw	r22, r24
    5502:	cd 01       	movw	r24, r26
    5504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5508:	dc 01       	movw	r26, r24
    550a:	cb 01       	movw	r24, r22
    550c:	9e 83       	std	Y+6, r25	; 0x06
    550e:	8d 83       	std	Y+5, r24	; 0x05
    5510:	0f c0       	rjmp	.+30     	; 0x5530 <LCD_clearscreen+0xcc>
    5512:	89 e1       	ldi	r24, 0x19	; 25
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	9c 83       	std	Y+4, r25	; 0x04
    5518:	8b 83       	std	Y+3, r24	; 0x03
    551a:	8b 81       	ldd	r24, Y+3	; 0x03
    551c:	9c 81       	ldd	r25, Y+4	; 0x04
    551e:	01 97       	sbiw	r24, 0x01	; 1
    5520:	f1 f7       	brne	.-4      	; 0x551e <LCD_clearscreen+0xba>
    5522:	9c 83       	std	Y+4, r25	; 0x04
    5524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5526:	8d 81       	ldd	r24, Y+5	; 0x05
    5528:	9e 81       	ldd	r25, Y+6	; 0x06
    552a:	01 97       	sbiw	r24, 0x01	; 1
    552c:	9e 83       	std	Y+6, r25	; 0x06
    552e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5530:	8d 81       	ldd	r24, Y+5	; 0x05
    5532:	9e 81       	ldd	r25, Y+6	; 0x06
    5534:	00 97       	sbiw	r24, 0x00	; 0
    5536:	69 f7       	brne	.-38     	; 0x5512 <LCD_clearscreen+0xae>
    5538:	14 c0       	rjmp	.+40     	; 0x5562 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    553a:	6f 81       	ldd	r22, Y+7	; 0x07
    553c:	78 85       	ldd	r23, Y+8	; 0x08
    553e:	89 85       	ldd	r24, Y+9	; 0x09
    5540:	9a 85       	ldd	r25, Y+10	; 0x0a
    5542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5546:	dc 01       	movw	r26, r24
    5548:	cb 01       	movw	r24, r22
    554a:	9e 83       	std	Y+6, r25	; 0x06
    554c:	8d 83       	std	Y+5, r24	; 0x05
    554e:	8d 81       	ldd	r24, Y+5	; 0x05
    5550:	9e 81       	ldd	r25, Y+6	; 0x06
    5552:	9a 83       	std	Y+2, r25	; 0x02
    5554:	89 83       	std	Y+1, r24	; 0x01
    5556:	89 81       	ldd	r24, Y+1	; 0x01
    5558:	9a 81       	ldd	r25, Y+2	; 0x02
    555a:	01 97       	sbiw	r24, 0x01	; 1
    555c:	f1 f7       	brne	.-4      	; 0x555a <LCD_clearscreen+0xf6>
    555e:	9a 83       	std	Y+2, r25	; 0x02
    5560:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    5562:	2e 96       	adiw	r28, 0x0e	; 14
    5564:	0f b6       	in	r0, 0x3f	; 63
    5566:	f8 94       	cli
    5568:	de bf       	out	0x3e, r29	; 62
    556a:	0f be       	out	0x3f, r0	; 63
    556c:	cd bf       	out	0x3d, r28	; 61
    556e:	cf 91       	pop	r28
    5570:	df 91       	pop	r29
    5572:	08 95       	ret

00005574 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    5574:	df 93       	push	r29
    5576:	cf 93       	push	r28
    5578:	cd b7       	in	r28, 0x3d	; 61
    557a:	de b7       	in	r29, 0x3e	; 62
    557c:	61 97       	sbiw	r28, 0x11	; 17
    557e:	0f b6       	in	r0, 0x3f	; 63
    5580:	f8 94       	cli
    5582:	de bf       	out	0x3e, r29	; 62
    5584:	0f be       	out	0x3f, r0	; 63
    5586:	cd bf       	out	0x3d, r28	; 61
    5588:	88 8b       	std	Y+16, r24	; 0x10
    558a:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    558c:	88 89       	ldd	r24, Y+16	; 0x10
    558e:	83 30       	cpi	r24, 0x03	; 3
    5590:	48 f4       	brcc	.+18     	; 0x55a4 <LCD_movecursor+0x30>
    5592:	88 89       	ldd	r24, Y+16	; 0x10
    5594:	88 23       	and	r24, r24
    5596:	31 f0       	breq	.+12     	; 0x55a4 <LCD_movecursor+0x30>
    5598:	89 89       	ldd	r24, Y+17	; 0x11
    559a:	81 31       	cpi	r24, 0x11	; 17
    559c:	18 f4       	brcc	.+6      	; 0x55a4 <LCD_movecursor+0x30>
    559e:	89 89       	ldd	r24, Y+17	; 0x11
    55a0:	88 23       	and	r24, r24
    55a2:	19 f4       	brne	.+6      	; 0x55aa <LCD_movecursor+0x36>
	{
		data=0x80;
    55a4:	80 e8       	ldi	r24, 0x80	; 128
    55a6:	8f 87       	std	Y+15, r24	; 0x0f
    55a8:	0d c0       	rjmp	.+26     	; 0x55c4 <LCD_movecursor+0x50>
	}
	else if(row==1)
    55aa:	88 89       	ldd	r24, Y+16	; 0x10
    55ac:	81 30       	cpi	r24, 0x01	; 1
    55ae:	21 f4       	brne	.+8      	; 0x55b8 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    55b0:	89 89       	ldd	r24, Y+17	; 0x11
    55b2:	81 58       	subi	r24, 0x81	; 129
    55b4:	8f 87       	std	Y+15, r24	; 0x0f
    55b6:	06 c0       	rjmp	.+12     	; 0x55c4 <LCD_movecursor+0x50>
	}
	else if (row==2)
    55b8:	88 89       	ldd	r24, Y+16	; 0x10
    55ba:	82 30       	cpi	r24, 0x02	; 2
    55bc:	19 f4       	brne	.+6      	; 0x55c4 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    55be:	89 89       	ldd	r24, Y+17	; 0x11
    55c0:	81 54       	subi	r24, 0x41	; 65
    55c2:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    55c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    55c6:	0e 94 d6 28 	call	0x51ac	; 0x51ac <LCD_vSend_cmd>
    55ca:	80 e0       	ldi	r24, 0x00	; 0
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	a0 e8       	ldi	r26, 0x80	; 128
    55d0:	bf e3       	ldi	r27, 0x3F	; 63
    55d2:	8b 87       	std	Y+11, r24	; 0x0b
    55d4:	9c 87       	std	Y+12, r25	; 0x0c
    55d6:	ad 87       	std	Y+13, r26	; 0x0d
    55d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55da:	6b 85       	ldd	r22, Y+11	; 0x0b
    55dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    55de:	8d 85       	ldd	r24, Y+13	; 0x0d
    55e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	4a e7       	ldi	r20, 0x7A	; 122
    55e8:	53 e4       	ldi	r21, 0x43	; 67
    55ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ee:	dc 01       	movw	r26, r24
    55f0:	cb 01       	movw	r24, r22
    55f2:	8f 83       	std	Y+7, r24	; 0x07
    55f4:	98 87       	std	Y+8, r25	; 0x08
    55f6:	a9 87       	std	Y+9, r26	; 0x09
    55f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55fa:	6f 81       	ldd	r22, Y+7	; 0x07
    55fc:	78 85       	ldd	r23, Y+8	; 0x08
    55fe:	89 85       	ldd	r24, Y+9	; 0x09
    5600:	9a 85       	ldd	r25, Y+10	; 0x0a
    5602:	20 e0       	ldi	r18, 0x00	; 0
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	40 e8       	ldi	r20, 0x80	; 128
    5608:	5f e3       	ldi	r21, 0x3F	; 63
    560a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    560e:	88 23       	and	r24, r24
    5610:	2c f4       	brge	.+10     	; 0x561c <LCD_movecursor+0xa8>
		__ticks = 1;
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	9e 83       	std	Y+6, r25	; 0x06
    5618:	8d 83       	std	Y+5, r24	; 0x05
    561a:	3f c0       	rjmp	.+126    	; 0x569a <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    561c:	6f 81       	ldd	r22, Y+7	; 0x07
    561e:	78 85       	ldd	r23, Y+8	; 0x08
    5620:	89 85       	ldd	r24, Y+9	; 0x09
    5622:	9a 85       	ldd	r25, Y+10	; 0x0a
    5624:	20 e0       	ldi	r18, 0x00	; 0
    5626:	3f ef       	ldi	r19, 0xFF	; 255
    5628:	4f e7       	ldi	r20, 0x7F	; 127
    562a:	57 e4       	ldi	r21, 0x47	; 71
    562c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5630:	18 16       	cp	r1, r24
    5632:	4c f5       	brge	.+82     	; 0x5686 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5634:	6b 85       	ldd	r22, Y+11	; 0x0b
    5636:	7c 85       	ldd	r23, Y+12	; 0x0c
    5638:	8d 85       	ldd	r24, Y+13	; 0x0d
    563a:	9e 85       	ldd	r25, Y+14	; 0x0e
    563c:	20 e0       	ldi	r18, 0x00	; 0
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	40 e2       	ldi	r20, 0x20	; 32
    5642:	51 e4       	ldi	r21, 0x41	; 65
    5644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5648:	dc 01       	movw	r26, r24
    564a:	cb 01       	movw	r24, r22
    564c:	bc 01       	movw	r22, r24
    564e:	cd 01       	movw	r24, r26
    5650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5654:	dc 01       	movw	r26, r24
    5656:	cb 01       	movw	r24, r22
    5658:	9e 83       	std	Y+6, r25	; 0x06
    565a:	8d 83       	std	Y+5, r24	; 0x05
    565c:	0f c0       	rjmp	.+30     	; 0x567c <LCD_movecursor+0x108>
    565e:	89 e1       	ldi	r24, 0x19	; 25
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	9c 83       	std	Y+4, r25	; 0x04
    5664:	8b 83       	std	Y+3, r24	; 0x03
    5666:	8b 81       	ldd	r24, Y+3	; 0x03
    5668:	9c 81       	ldd	r25, Y+4	; 0x04
    566a:	01 97       	sbiw	r24, 0x01	; 1
    566c:	f1 f7       	brne	.-4      	; 0x566a <LCD_movecursor+0xf6>
    566e:	9c 83       	std	Y+4, r25	; 0x04
    5670:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5672:	8d 81       	ldd	r24, Y+5	; 0x05
    5674:	9e 81       	ldd	r25, Y+6	; 0x06
    5676:	01 97       	sbiw	r24, 0x01	; 1
    5678:	9e 83       	std	Y+6, r25	; 0x06
    567a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    567c:	8d 81       	ldd	r24, Y+5	; 0x05
    567e:	9e 81       	ldd	r25, Y+6	; 0x06
    5680:	00 97       	sbiw	r24, 0x00	; 0
    5682:	69 f7       	brne	.-38     	; 0x565e <LCD_movecursor+0xea>
    5684:	14 c0       	rjmp	.+40     	; 0x56ae <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5686:	6f 81       	ldd	r22, Y+7	; 0x07
    5688:	78 85       	ldd	r23, Y+8	; 0x08
    568a:	89 85       	ldd	r24, Y+9	; 0x09
    568c:	9a 85       	ldd	r25, Y+10	; 0x0a
    568e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	9e 83       	std	Y+6, r25	; 0x06
    5698:	8d 83       	std	Y+5, r24	; 0x05
    569a:	8d 81       	ldd	r24, Y+5	; 0x05
    569c:	9e 81       	ldd	r25, Y+6	; 0x06
    569e:	9a 83       	std	Y+2, r25	; 0x02
    56a0:	89 83       	std	Y+1, r24	; 0x01
    56a2:	89 81       	ldd	r24, Y+1	; 0x01
    56a4:	9a 81       	ldd	r25, Y+2	; 0x02
    56a6:	01 97       	sbiw	r24, 0x01	; 1
    56a8:	f1 f7       	brne	.-4      	; 0x56a6 <LCD_movecursor+0x132>
    56aa:	9a 83       	std	Y+2, r25	; 0x02
    56ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    56ae:	61 96       	adiw	r28, 0x11	; 17
    56b0:	0f b6       	in	r0, 0x3f	; 63
    56b2:	f8 94       	cli
    56b4:	de bf       	out	0x3e, r29	; 62
    56b6:	0f be       	out	0x3f, r0	; 63
    56b8:	cd bf       	out	0x3d, r28	; 61
    56ba:	cf 91       	pop	r28
    56bc:	df 91       	pop	r29
    56be:	08 95       	ret

000056c0 <BUTTON_Init>:
 */

#include "button.h"

BTN_ERROR_t BUTTON_Init(str_BTN_config_t * BTN_confg_s)
{
    56c0:	df 93       	push	r29
    56c2:	cf 93       	push	r28
    56c4:	00 d0       	rcall	.+0      	; 0x56c6 <BUTTON_Init+0x6>
    56c6:	cd b7       	in	r28, 0x3d	; 61
    56c8:	de b7       	in	r29, 0x3e	; 62
    56ca:	9a 83       	std	Y+2, r25	; 0x02
    56cc:	89 83       	std	Y+1, r24	; 0x01
	return DIO_setPin_Direction(BTN_confg_s->Port, BTN_confg_s->Pin, INPUT);
    56ce:	e9 81       	ldd	r30, Y+1	; 0x01
    56d0:	fa 81       	ldd	r31, Y+2	; 0x02
    56d2:	80 81       	ld	r24, Z
    56d4:	e9 81       	ldd	r30, Y+1	; 0x01
    56d6:	fa 81       	ldd	r31, Y+2	; 0x02
    56d8:	91 81       	ldd	r25, Z+1	; 0x01
    56da:	69 2f       	mov	r22, r25
    56dc:	40 e0       	ldi	r20, 0x00	; 0
    56de:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <DIO_setPin_Direction>
}
    56e2:	0f 90       	pop	r0
    56e4:	0f 90       	pop	r0
    56e6:	cf 91       	pop	r28
    56e8:	df 91       	pop	r29
    56ea:	08 95       	ret

000056ec <BUTTON_readState>:

BTN_ERROR_t BUTTON_readState(str_BTN_config_t * BTN_confg_s)
{
    56ec:	df 93       	push	r29
    56ee:	cf 93       	push	r28
    56f0:	00 d0       	rcall	.+0      	; 0x56f2 <BUTTON_readState+0x6>
    56f2:	00 d0       	rcall	.+0      	; 0x56f4 <BUTTON_readState+0x8>
    56f4:	cd b7       	in	r28, 0x3d	; 61
    56f6:	de b7       	in	r29, 0x3e	; 62
    56f8:	9c 83       	std	Y+4, r25	; 0x04
    56fa:	8b 83       	std	Y+3, r24	; 0x03
	u8_t temp, temp2;
	temp2 = DIO_getPin_Value(BTN_confg_s->Port, BTN_confg_s->Pin, &temp);
    56fc:	eb 81       	ldd	r30, Y+3	; 0x03
    56fe:	fc 81       	ldd	r31, Y+4	; 0x04
    5700:	80 81       	ld	r24, Z
    5702:	eb 81       	ldd	r30, Y+3	; 0x03
    5704:	fc 81       	ldd	r31, Y+4	; 0x04
    5706:	91 81       	ldd	r25, Z+1	; 0x01
    5708:	9e 01       	movw	r18, r28
    570a:	2e 5f       	subi	r18, 0xFE	; 254
    570c:	3f 4f       	sbci	r19, 0xFF	; 255
    570e:	69 2f       	mov	r22, r25
    5710:	a9 01       	movw	r20, r18
    5712:	0e 94 02 18 	call	0x3004	; 0x3004 <DIO_getPin_Value>
    5716:	89 83       	std	Y+1, r24	; 0x01
	BTN_confg_s->State = temp;
    5718:	8a 81       	ldd	r24, Y+2	; 0x02
    571a:	eb 81       	ldd	r30, Y+3	; 0x03
    571c:	fc 81       	ldd	r31, Y+4	; 0x04
    571e:	82 83       	std	Z+2, r24	; 0x02
	return temp2;
    5720:	89 81       	ldd	r24, Y+1	; 0x01
}
    5722:	0f 90       	pop	r0
    5724:	0f 90       	pop	r0
    5726:	0f 90       	pop	r0
    5728:	0f 90       	pop	r0
    572a:	cf 91       	pop	r28
    572c:	df 91       	pop	r29
    572e:	08 95       	ret

00005730 <APP_init>:

u8_t US_Push_But_Feat_Flag = 0;
u64_t US_lastPushTickTime = 0;

void APP_init()
{
    5730:	df 93       	push	r29
    5732:	cf 93       	push	r28
    5734:	cd b7       	in	r28, 0x3d	; 61
    5736:	de b7       	in	r29, 0x3e	; 62
	// Increment button config
	BTN_INC_confg_s.Port = BUTTON_INC_PORT;
    5738:	83 e0       	ldi	r24, 0x03	; 3
    573a:	80 93 b7 01 	sts	0x01B7, r24
	BTN_INC_confg_s.Pin = BUTTON_INC_PIN;
    573e:	82 e0       	ldi	r24, 0x02	; 2
    5740:	80 93 b8 01 	sts	0x01B8, r24

	// Decrement button config
	BTN_DEC_confg_s.Port = BUTTON_DEC_PORT;
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	80 93 a8 01 	sts	0x01A8, r24
	BTN_DEC_confg_s.Pin = BUTTON_DEC_PIN;
    574a:	82 e0       	ldi	r24, 0x02	; 2
    574c:	80 93 a9 01 	sts	0x01A9, r24
	// buttons initialization
	/*BUTTON_Init(&BTN_INC_confg_s);
	BUTTON_Init(&BTN_DEC_confg_s);*/
	//BUTTON_Init(&BTN_BRK_confg_s);

	GLOBALInt_enable();
    5750:	0e 94 1e 12 	call	0x243c	; 0x243c <GLOBALInt_enable>

	// Button INCREMENT init
	EXTInt_enable(EXT_INT0);
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	0e 94 3a 12 	call	0x2474	; 0x2474 <EXTInt_enable>
	EXTInt_Mode(EXT_INT0, FALLING_EDGE);
    575a:	80 e0       	ldi	r24, 0x00	; 0
    575c:	62 e0       	ldi	r22, 0x02	; 2
    575e:	0e 94 b6 12 	call	0x256c	; 0x256c <EXTInt_Mode>
	SET_BIT(PORTD, 2); // pull up
    5762:	a2 e3       	ldi	r26, 0x32	; 50
    5764:	b0 e0       	ldi	r27, 0x00	; 0
    5766:	e2 e3       	ldi	r30, 0x32	; 50
    5768:	f0 e0       	ldi	r31, 0x00	; 0
    576a:	80 81       	ld	r24, Z
    576c:	84 60       	ori	r24, 0x04	; 4
    576e:	8c 93       	st	X, r24
	EXTInt_setCallBack(EXT_INT0, &APP_BTN_INC_readState);
    5770:	22 e3       	ldi	r18, 0x32	; 50
    5772:	3e e2       	ldi	r19, 0x2E	; 46
    5774:	80 e0       	ldi	r24, 0x00	; 0
    5776:	b9 01       	movw	r22, r18
    5778:	0e 94 c2 13 	call	0x2784	; 0x2784 <EXTInt_setCallBack>

	// button decrement init
	EXTInt_enable(EXT_INT2);
    577c:	82 e0       	ldi	r24, 0x02	; 2
    577e:	0e 94 3a 12 	call	0x2474	; 0x2474 <EXTInt_enable>
	EXTInt_Mode(EXT_INT2, FALLING_EDGE);
    5782:	82 e0       	ldi	r24, 0x02	; 2
    5784:	62 e0       	ldi	r22, 0x02	; 2
    5786:	0e 94 b6 12 	call	0x256c	; 0x256c <EXTInt_Mode>
	SET_BIT(PORTB, 2); // pull up
    578a:	a8 e3       	ldi	r26, 0x38	; 56
    578c:	b0 e0       	ldi	r27, 0x00	; 0
    578e:	e8 e3       	ldi	r30, 0x38	; 56
    5790:	f0 e0       	ldi	r31, 0x00	; 0
    5792:	80 81       	ld	r24, Z
    5794:	84 60       	ori	r24, 0x04	; 4
    5796:	8c 93       	st	X, r24
	EXTInt_setCallBack(EXT_INT2, &APP_BTN_DEC_readState);
    5798:	2c e3       	ldi	r18, 0x3C	; 60
    579a:	3e e2       	ldi	r19, 0x2E	; 46
    579c:	82 e0       	ldi	r24, 0x02	; 2
    579e:	b9 01       	movw	r22, r18
    57a0:	0e 94 c2 13 	call	0x2784	; 0x2784 <EXTInt_setCallBack>

	// initializing ultrasonic sensor
	US_confg_s.Echo_Channel = US_CHANNEL_1;
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	80 93 b1 01 	sts	0x01B1, r24
	US_confg_s.Trigger_Port = US_TRIGGER_PORT;
    57aa:	83 e0       	ldi	r24, 0x03	; 3
    57ac:	80 93 af 01 	sts	0x01AF, r24
	US_confg_s.Trigger_Pin = US_TRIGGER_PIN;
    57b0:	84 e0       	ldi	r24, 0x04	; 4
    57b2:	80 93 b0 01 	sts	0x01B0, r24

	// Activating the trigger pin as ouput
	DIO_setPin_Direction(US_TRIGGER_PORT, US_TRIGGER_PIN, OUTPUT);
    57b6:	83 e0       	ldi	r24, 0x03	; 3
    57b8:	64 e0       	ldi	r22, 0x04	; 4
    57ba:	41 e0       	ldi	r20, 0x01	; 1
    57bc:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <DIO_setPin_Direction>
	// ultrasonic init
	ULTRASONIC_Init(&US_confg_s);
    57c0:	8f ea       	ldi	r24, 0xAF	; 175
    57c2:	91 e0       	ldi	r25, 0x01	; 1
    57c4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <ULTRASONIC_Init>

	// MOTOR CONFIG
	M_confg_s.PORT = MOTOR_PORT;
    57c8:	10 92 a6 01 	sts	0x01A6, r1
	M_confg_s.PIN = MOTOR_PIN;
    57cc:	10 92 a7 01 	sts	0x01A7, r1
	M_confg_s.motorstate = ON;
    57d0:	10 92 a5 01 	sts	0x01A5, r1

	// MOTOR init
	motor_init(&M_confg_s);
    57d4:	85 ea       	ldi	r24, 0xA5	; 165
    57d6:	91 e0       	ldi	r25, 0x01	; 1
    57d8:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <motor_init>

	// Start engine
	motor_set_state(&M_confg_s);
    57dc:	85 ea       	ldi	r24, 0xA5	; 165
    57de:	91 e0       	ldi	r25, 0x01	; 1
    57e0:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <motor_set_state>

	// motor started
	Car_Ignition_On = 1;
    57e4:	81 e0       	ldi	r24, 0x01	; 1
    57e6:	80 93 84 01 	sts	0x0184, r24

	// Switch to default mode at initialization of the system
	APP_Mode = APP_DEFAULT_MODE;
    57ea:	10 92 b6 01 	sts	0x01B6, r1

	// TIMER CONFIG
	Timer_confg_s.Interrupt_Mode = APP_TIMER_INTERRUPT_MODE;
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	80 93 ae 01 	sts	0x01AE, r24
	Timer_confg_s.Timer_Channel = APP_TIMER_CHANNEL;
    57f4:	10 92 ab 01 	sts	0x01AB, r1
	Timer_confg_s.Timer_Mode = APP_TIMER_MODE;
    57f8:	10 92 ad 01 	sts	0x01AD, r1
	Timer_confg_s.Timer_Psc = APP_TIMER_PSC;
    57fc:	85 e0       	ldi	r24, 0x05	; 5
    57fe:	80 93 ac 01 	sts	0x01AC, r24

	// TIMER INIT
	Timer_Init(&Timer_confg_s);
    5802:	8b ea       	ldi	r24, 0xAB	; 171
    5804:	91 e0       	ldi	r25, 0x01	; 1
    5806:	0e 94 fe 09 	call	0x13fc	; 0x13fc <Timer_Init>
	// TIMER CALL BACK FUNCTION INCASE OF INTERRUPT
	TIMER_SetCallBack(APP_TIMER_CHANNEL, &APP_ticksIncrement);
    580a:	2b ed       	ldi	r18, 0xDB	; 219
    580c:	3d e2       	ldi	r19, 0x2D	; 45
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	b9 01       	movw	r22, r18
    5812:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <TIMER_SetCallBack>
	// STARTING TIMER
	Timer_Start(APP_TIMER_CHANNEL, APP_TIMER_TICKS);
    5816:	80 e0       	ldi	r24, 0x00	; 0
    5818:	6e ef       	ldi	r22, 0xFE	; 254
    581a:	70 e0       	ldi	r23, 0x00	; 0
    581c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <Timer_Start>
}
    5820:	cf 91       	pop	r28
    5822:	df 91       	pop	r29
    5824:	08 95       	ret

00005826 <APP_readSensors>:

void APP_readSensors()
{
    5826:	df 93       	push	r29
    5828:	cf 93       	push	r28
    582a:	cd b7       	in	r28, 0x3d	; 61
    582c:	de b7       	in	r29, 0x3e	; 62
    582e:	ed 97       	sbiw	r28, 0x3d	; 61
    5830:	0f b6       	in	r0, 0x3f	; 63
    5832:	f8 94       	cli
    5834:	de bf       	out	0x3e, r29	; 62
    5836:	0f be       	out	0x3f, r0	; 63
    5838:	cd bf       	out	0x3d, r28	; 61
			US_Push_But_Feat_Flag = 0;
		}
		return;
	}*/

	switch(APP_Mode)
    583a:	80 91 b6 01 	lds	r24, 0x01B6
    583e:	28 2f       	mov	r18, r24
    5840:	30 e0       	ldi	r19, 0x00	; 0
    5842:	3a a3       	std	Y+34, r19	; 0x22
    5844:	29 a3       	std	Y+33, r18	; 0x21
    5846:	89 a1       	ldd	r24, Y+33	; 0x21
    5848:	9a a1       	ldd	r25, Y+34	; 0x22
    584a:	00 97       	sbiw	r24, 0x00	; 0
    584c:	39 f0       	breq	.+14     	; 0x585c <APP_readSensors+0x36>
    584e:	29 a1       	ldd	r18, Y+33	; 0x21
    5850:	3a a1       	ldd	r19, Y+34	; 0x22
    5852:	21 30       	cpi	r18, 0x01	; 1
    5854:	31 05       	cpc	r19, r1
    5856:	09 f4       	brne	.+2      	; 0x585a <APP_readSensors+0x34>
    5858:	57 c1       	rjmp	.+686    	; 0x5b08 <APP_readSensors+0x2e2>
    585a:	a4 c1       	rjmp	.+840    	; 0x5ba4 <APP_readSensors+0x37e>
	{
		case APP_DEFAULT_MODE:
			if(BTN_INC_confg_s.State == PRESSED)
    585c:	80 91 b9 01 	lds	r24, 0x01B9
    5860:	81 30       	cpi	r24, 0x01	; 1
    5862:	51 f4       	brne	.+20     	; 0x5878 <APP_readSensors+0x52>
			{
				if(BTN_DEC_confg_s.State == NOT_PRESSED)
    5864:	80 91 aa 01 	lds	r24, 0x01AA
    5868:	88 23       	and	r24, r24
    586a:	09 f0       	breq	.+2      	; 0x586e <APP_readSensors+0x48>
    586c:	9b c1       	rjmp	.+822    	; 0x5ba4 <APP_readSensors+0x37e>
				{
					motor_increase_speed();
    586e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <motor_increase_speed>
					US_Push_But_Feat_Flag = 0;
    5872:	10 92 8f 01 	sts	0x018F, r1
    5876:	43 c1       	rjmp	.+646    	; 0x5afe <APP_readSensors+0x2d8>
				else
				{
					return;
				}
			}
			else if(BTN_DEC_confg_s.State == PRESSED)
    5878:	80 91 aa 01 	lds	r24, 0x01AA
    587c:	81 30       	cpi	r24, 0x01	; 1
    587e:	51 f4       	brne	.+20     	; 0x5894 <APP_readSensors+0x6e>
			{
				if(BTN_INC_confg_s.State == NOT_PRESSED)
    5880:	80 91 b9 01 	lds	r24, 0x01B9
    5884:	88 23       	and	r24, r24
    5886:	09 f0       	breq	.+2      	; 0x588a <APP_readSensors+0x64>
    5888:	8d c1       	rjmp	.+794    	; 0x5ba4 <APP_readSensors+0x37e>
				{
					motor_decrease_speed();
    588a:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <motor_decrease_speed>
					US_Push_But_Feat_Flag = 0;
    588e:	10 92 8f 01 	sts	0x018F, r1
    5892:	35 c1       	rjmp	.+618    	; 0x5afe <APP_readSensors+0x2d8>
					return;
				}
			}
			else
			{
				if(!US_Push_But_Feat_Flag)
    5894:	80 91 8f 01 	lds	r24, 0x018F
    5898:	88 23       	and	r24, r24
    589a:	41 f4       	brne	.+16     	; 0x58ac <APP_readSensors+0x86>
				{
					US_Push_But_Feat_Flag = 1;
    589c:	81 e0       	ldi	r24, 0x01	; 1
    589e:	80 93 8f 01 	sts	0x018F, r24
					APP_getCurrentTicks_ms(&US_lastPushTickTime);
    58a2:	80 e9       	ldi	r24, 0x90	; 144
    58a4:	91 e0       	ldi	r25, 0x01	; 1
    58a6:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <APP_getCurrentTicks_ms>
    58aa:	29 c1       	rjmp	.+594    	; 0x5afe <APP_readSensors+0x2d8>
				}
				else
				{
					u64_t currentTicks;
					APP_getCurrentTicks_ms(&currentTicks);
    58ac:	ce 01       	movw	r24, r28
    58ae:	01 96       	adiw	r24, 0x01	; 1
    58b0:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <APP_getCurrentTicks_ms>
					if(currentTicks - US_lastPushTickTime >= 5000)
    58b4:	39 81       	ldd	r19, Y+1	; 0x01
    58b6:	39 8f       	std	Y+25, r19	; 0x19
    58b8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ba:	8a 8f       	std	Y+26, r24	; 0x1a
    58bc:	9b 81       	ldd	r25, Y+3	; 0x03
    58be:	9b 8f       	std	Y+27, r25	; 0x1b
    58c0:	2c 81       	ldd	r18, Y+4	; 0x04
    58c2:	2c 8f       	std	Y+28, r18	; 0x1c
    58c4:	3d 81       	ldd	r19, Y+5	; 0x05
    58c6:	3d 8f       	std	Y+29, r19	; 0x1d
    58c8:	8e 81       	ldd	r24, Y+6	; 0x06
    58ca:	8e 8f       	std	Y+30, r24	; 0x1e
    58cc:	9f 81       	ldd	r25, Y+7	; 0x07
    58ce:	9f 8f       	std	Y+31, r25	; 0x1f
    58d0:	28 85       	ldd	r18, Y+8	; 0x08
    58d2:	28 a3       	std	Y+32, r18	; 0x20
    58d4:	30 91 90 01 	lds	r19, 0x0190
    58d8:	39 8b       	std	Y+17, r19	; 0x11
    58da:	80 91 91 01 	lds	r24, 0x0191
    58de:	8a 8b       	std	Y+18, r24	; 0x12
    58e0:	90 91 92 01 	lds	r25, 0x0192
    58e4:	9b 8b       	std	Y+19, r25	; 0x13
    58e6:	20 91 93 01 	lds	r18, 0x0193
    58ea:	2c 8b       	std	Y+20, r18	; 0x14
    58ec:	30 91 94 01 	lds	r19, 0x0194
    58f0:	3d 8b       	std	Y+21, r19	; 0x15
    58f2:	80 91 95 01 	lds	r24, 0x0195
    58f6:	8e 8b       	std	Y+22, r24	; 0x16
    58f8:	90 91 96 01 	lds	r25, 0x0196
    58fc:	9f 8b       	std	Y+23, r25	; 0x17
    58fe:	20 91 97 01 	lds	r18, 0x0197
    5902:	28 8f       	std	Y+24, r18	; 0x18
    5904:	39 8d       	ldd	r19, Y+25	; 0x19
    5906:	89 89       	ldd	r24, Y+17	; 0x11
    5908:	38 1b       	sub	r19, r24
    590a:	3b a3       	std	Y+35, r19	; 0x23
    590c:	91 e0       	ldi	r25, 0x01	; 1
    590e:	9b a7       	std	Y+43, r25	; 0x2b
    5910:	2b a1       	ldd	r18, Y+35	; 0x23
    5912:	39 8d       	ldd	r19, Y+25	; 0x19
    5914:	32 17       	cp	r19, r18
    5916:	08 f0       	brcs	.+2      	; 0x591a <APP_readSensors+0xf4>
    5918:	1b a6       	std	Y+43, r1	; 0x2b
    591a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    591c:	9a 89       	ldd	r25, Y+18	; 0x12
    591e:	89 1b       	sub	r24, r25
    5920:	8c a3       	std	Y+36, r24	; 0x24
    5922:	21 e0       	ldi	r18, 0x01	; 1
    5924:	2c a7       	std	Y+44, r18	; 0x2c
    5926:	3c a1       	ldd	r19, Y+36	; 0x24
    5928:	8a 8d       	ldd	r24, Y+26	; 0x1a
    592a:	83 17       	cp	r24, r19
    592c:	08 f0       	brcs	.+2      	; 0x5930 <APP_readSensors+0x10a>
    592e:	1c a6       	std	Y+44, r1	; 0x2c
    5930:	9c a1       	ldd	r25, Y+36	; 0x24
    5932:	2b a5       	ldd	r18, Y+43	; 0x2b
    5934:	92 1b       	sub	r25, r18
    5936:	9d a7       	std	Y+45, r25	; 0x2d
    5938:	31 e0       	ldi	r19, 0x01	; 1
    593a:	3e a7       	std	Y+46, r19	; 0x2e
    593c:	8d a5       	ldd	r24, Y+45	; 0x2d
    593e:	9c a1       	ldd	r25, Y+36	; 0x24
    5940:	98 17       	cp	r25, r24
    5942:	08 f0       	brcs	.+2      	; 0x5946 <APP_readSensors+0x120>
    5944:	1e a6       	std	Y+46, r1	; 0x2e
    5946:	2c a5       	ldd	r18, Y+44	; 0x2c
    5948:	3e a5       	ldd	r19, Y+46	; 0x2e
    594a:	23 2b       	or	r18, r19
    594c:	2c a7       	std	Y+44, r18	; 0x2c
    594e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5950:	8c a3       	std	Y+36, r24	; 0x24
    5952:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5954:	2b 89       	ldd	r18, Y+19	; 0x13
    5956:	92 1b       	sub	r25, r18
    5958:	9d a3       	std	Y+37, r25	; 0x25
    595a:	31 e0       	ldi	r19, 0x01	; 1
    595c:	3f a7       	std	Y+47, r19	; 0x2f
    595e:	8d a1       	ldd	r24, Y+37	; 0x25
    5960:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5962:	98 17       	cp	r25, r24
    5964:	08 f0       	brcs	.+2      	; 0x5968 <APP_readSensors+0x142>
    5966:	1f a6       	std	Y+47, r1	; 0x2f
    5968:	2d a1       	ldd	r18, Y+37	; 0x25
    596a:	3c a5       	ldd	r19, Y+44	; 0x2c
    596c:	23 1b       	sub	r18, r19
    596e:	28 ab       	std	Y+48, r18	; 0x30
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	89 ab       	std	Y+49, r24	; 0x31
    5974:	98 a9       	ldd	r25, Y+48	; 0x30
    5976:	2d a1       	ldd	r18, Y+37	; 0x25
    5978:	29 17       	cp	r18, r25
    597a:	08 f0       	brcs	.+2      	; 0x597e <APP_readSensors+0x158>
    597c:	19 aa       	std	Y+49, r1	; 0x31
    597e:	3f a5       	ldd	r19, Y+47	; 0x2f
    5980:	89 a9       	ldd	r24, Y+49	; 0x31
    5982:	38 2b       	or	r19, r24
    5984:	3f a7       	std	Y+47, r19	; 0x2f
    5986:	98 a9       	ldd	r25, Y+48	; 0x30
    5988:	9d a3       	std	Y+37, r25	; 0x25
    598a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    598c:	3c 89       	ldd	r19, Y+20	; 0x14
    598e:	23 1b       	sub	r18, r19
    5990:	2e a3       	std	Y+38, r18	; 0x26
    5992:	81 e0       	ldi	r24, 0x01	; 1
    5994:	8a ab       	std	Y+50, r24	; 0x32
    5996:	9e a1       	ldd	r25, Y+38	; 0x26
    5998:	2c 8d       	ldd	r18, Y+28	; 0x1c
    599a:	29 17       	cp	r18, r25
    599c:	08 f0       	brcs	.+2      	; 0x59a0 <APP_readSensors+0x17a>
    599e:	1a aa       	std	Y+50, r1	; 0x32
    59a0:	3e a1       	ldd	r19, Y+38	; 0x26
    59a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    59a4:	38 1b       	sub	r19, r24
    59a6:	3b ab       	std	Y+51, r19	; 0x33
    59a8:	91 e0       	ldi	r25, 0x01	; 1
    59aa:	9c ab       	std	Y+52, r25	; 0x34
    59ac:	2b a9       	ldd	r18, Y+51	; 0x33
    59ae:	3e a1       	ldd	r19, Y+38	; 0x26
    59b0:	32 17       	cp	r19, r18
    59b2:	08 f0       	brcs	.+2      	; 0x59b6 <APP_readSensors+0x190>
    59b4:	1c aa       	std	Y+52, r1	; 0x34
    59b6:	8a a9       	ldd	r24, Y+50	; 0x32
    59b8:	9c a9       	ldd	r25, Y+52	; 0x34
    59ba:	89 2b       	or	r24, r25
    59bc:	8a ab       	std	Y+50, r24	; 0x32
    59be:	2b a9       	ldd	r18, Y+51	; 0x33
    59c0:	2e a3       	std	Y+38, r18	; 0x26
    59c2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    59c4:	8d 89       	ldd	r24, Y+21	; 0x15
    59c6:	38 1b       	sub	r19, r24
    59c8:	3f a3       	std	Y+39, r19	; 0x27
    59ca:	91 e0       	ldi	r25, 0x01	; 1
    59cc:	9d ab       	std	Y+53, r25	; 0x35
    59ce:	2f a1       	ldd	r18, Y+39	; 0x27
    59d0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    59d2:	32 17       	cp	r19, r18
    59d4:	08 f0       	brcs	.+2      	; 0x59d8 <APP_readSensors+0x1b2>
    59d6:	1d aa       	std	Y+53, r1	; 0x35
    59d8:	8f a1       	ldd	r24, Y+39	; 0x27
    59da:	9a a9       	ldd	r25, Y+50	; 0x32
    59dc:	89 1b       	sub	r24, r25
    59de:	8e ab       	std	Y+54, r24	; 0x36
    59e0:	21 e0       	ldi	r18, 0x01	; 1
    59e2:	2f ab       	std	Y+55, r18	; 0x37
    59e4:	3e a9       	ldd	r19, Y+54	; 0x36
    59e6:	8f a1       	ldd	r24, Y+39	; 0x27
    59e8:	83 17       	cp	r24, r19
    59ea:	08 f0       	brcs	.+2      	; 0x59ee <APP_readSensors+0x1c8>
    59ec:	1f aa       	std	Y+55, r1	; 0x37
    59ee:	9d a9       	ldd	r25, Y+53	; 0x35
    59f0:	2f a9       	ldd	r18, Y+55	; 0x37
    59f2:	92 2b       	or	r25, r18
    59f4:	9d ab       	std	Y+53, r25	; 0x35
    59f6:	3e a9       	ldd	r19, Y+54	; 0x36
    59f8:	3f a3       	std	Y+39, r19	; 0x27
    59fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    59fc:	9e 89       	ldd	r25, Y+22	; 0x16
    59fe:	89 1b       	sub	r24, r25
    5a00:	88 a7       	std	Y+40, r24	; 0x28
    5a02:	21 e0       	ldi	r18, 0x01	; 1
    5a04:	28 af       	std	Y+56, r18	; 0x38
    5a06:	38 a5       	ldd	r19, Y+40	; 0x28
    5a08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5a0a:	83 17       	cp	r24, r19
    5a0c:	08 f0       	brcs	.+2      	; 0x5a10 <APP_readSensors+0x1ea>
    5a0e:	18 ae       	std	Y+56, r1	; 0x38
    5a10:	98 a5       	ldd	r25, Y+40	; 0x28
    5a12:	2d a9       	ldd	r18, Y+53	; 0x35
    5a14:	92 1b       	sub	r25, r18
    5a16:	99 af       	std	Y+57, r25	; 0x39
    5a18:	31 e0       	ldi	r19, 0x01	; 1
    5a1a:	3a af       	std	Y+58, r19	; 0x3a
    5a1c:	89 ad       	ldd	r24, Y+57	; 0x39
    5a1e:	98 a5       	ldd	r25, Y+40	; 0x28
    5a20:	98 17       	cp	r25, r24
    5a22:	08 f0       	brcs	.+2      	; 0x5a26 <APP_readSensors+0x200>
    5a24:	1a ae       	std	Y+58, r1	; 0x3a
    5a26:	28 ad       	ldd	r18, Y+56	; 0x38
    5a28:	3a ad       	ldd	r19, Y+58	; 0x3a
    5a2a:	23 2b       	or	r18, r19
    5a2c:	28 af       	std	Y+56, r18	; 0x38
    5a2e:	89 ad       	ldd	r24, Y+57	; 0x39
    5a30:	88 a7       	std	Y+40, r24	; 0x28
    5a32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5a34:	2f 89       	ldd	r18, Y+23	; 0x17
    5a36:	92 1b       	sub	r25, r18
    5a38:	99 a7       	std	Y+41, r25	; 0x29
    5a3a:	31 e0       	ldi	r19, 0x01	; 1
    5a3c:	3b af       	std	Y+59, r19	; 0x3b
    5a3e:	89 a5       	ldd	r24, Y+41	; 0x29
    5a40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5a42:	98 17       	cp	r25, r24
    5a44:	08 f0       	brcs	.+2      	; 0x5a48 <APP_readSensors+0x222>
    5a46:	1b ae       	std	Y+59, r1	; 0x3b
    5a48:	29 a5       	ldd	r18, Y+41	; 0x29
    5a4a:	38 ad       	ldd	r19, Y+56	; 0x38
    5a4c:	23 1b       	sub	r18, r19
    5a4e:	2c af       	std	Y+60, r18	; 0x3c
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	8d af       	std	Y+61, r24	; 0x3d
    5a54:	9c ad       	ldd	r25, Y+60	; 0x3c
    5a56:	29 a5       	ldd	r18, Y+41	; 0x29
    5a58:	29 17       	cp	r18, r25
    5a5a:	08 f0       	brcs	.+2      	; 0x5a5e <APP_readSensors+0x238>
    5a5c:	1d ae       	std	Y+61, r1	; 0x3d
    5a5e:	3b ad       	ldd	r19, Y+59	; 0x3b
    5a60:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a62:	38 2b       	or	r19, r24
    5a64:	3b af       	std	Y+59, r19	; 0x3b
    5a66:	9c ad       	ldd	r25, Y+60	; 0x3c
    5a68:	99 a7       	std	Y+41, r25	; 0x29
    5a6a:	28 a1       	ldd	r18, Y+32	; 0x20
    5a6c:	38 8d       	ldd	r19, Y+24	; 0x18
    5a6e:	23 1b       	sub	r18, r19
    5a70:	2a a7       	std	Y+42, r18	; 0x2a
    5a72:	8a a5       	ldd	r24, Y+42	; 0x2a
    5a74:	9b ad       	ldd	r25, Y+59	; 0x3b
    5a76:	89 1b       	sub	r24, r25
    5a78:	8a a7       	std	Y+42, r24	; 0x2a
    5a7a:	2b a1       	ldd	r18, Y+35	; 0x23
    5a7c:	29 87       	std	Y+9, r18	; 0x09
    5a7e:	3c a1       	ldd	r19, Y+36	; 0x24
    5a80:	3a 87       	std	Y+10, r19	; 0x0a
    5a82:	8d a1       	ldd	r24, Y+37	; 0x25
    5a84:	8b 87       	std	Y+11, r24	; 0x0b
    5a86:	9e a1       	ldd	r25, Y+38	; 0x26
    5a88:	9c 87       	std	Y+12, r25	; 0x0c
    5a8a:	2f a1       	ldd	r18, Y+39	; 0x27
    5a8c:	2d 87       	std	Y+13, r18	; 0x0d
    5a8e:	38 a5       	ldd	r19, Y+40	; 0x28
    5a90:	3e 87       	std	Y+14, r19	; 0x0e
    5a92:	89 a5       	ldd	r24, Y+41	; 0x29
    5a94:	8f 87       	std	Y+15, r24	; 0x0f
    5a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a98:	98 8b       	std	Y+16, r25	; 0x10
    5a9a:	28 89       	ldd	r18, Y+16	; 0x10
    5a9c:	22 23       	and	r18, r18
    5a9e:	51 f5       	brne	.+84     	; 0x5af4 <APP_readSensors+0x2ce>
    5aa0:	38 89       	ldd	r19, Y+16	; 0x10
    5aa2:	33 23       	and	r19, r19
    5aa4:	61 f5       	brne	.+88     	; 0x5afe <APP_readSensors+0x2d8>
    5aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5aa8:	88 23       	and	r24, r24
    5aaa:	21 f5       	brne	.+72     	; 0x5af4 <APP_readSensors+0x2ce>
    5aac:	9f 85       	ldd	r25, Y+15	; 0x0f
    5aae:	99 23       	and	r25, r25
    5ab0:	31 f5       	brne	.+76     	; 0x5afe <APP_readSensors+0x2d8>
    5ab2:	2e 85       	ldd	r18, Y+14	; 0x0e
    5ab4:	22 23       	and	r18, r18
    5ab6:	f1 f4       	brne	.+60     	; 0x5af4 <APP_readSensors+0x2ce>
    5ab8:	3e 85       	ldd	r19, Y+14	; 0x0e
    5aba:	33 23       	and	r19, r19
    5abc:	01 f5       	brne	.+64     	; 0x5afe <APP_readSensors+0x2d8>
    5abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ac0:	88 23       	and	r24, r24
    5ac2:	c1 f4       	brne	.+48     	; 0x5af4 <APP_readSensors+0x2ce>
    5ac4:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ac6:	99 23       	and	r25, r25
    5ac8:	d1 f4       	brne	.+52     	; 0x5afe <APP_readSensors+0x2d8>
    5aca:	2c 85       	ldd	r18, Y+12	; 0x0c
    5acc:	22 23       	and	r18, r18
    5ace:	91 f4       	brne	.+36     	; 0x5af4 <APP_readSensors+0x2ce>
    5ad0:	3c 85       	ldd	r19, Y+12	; 0x0c
    5ad2:	33 23       	and	r19, r19
    5ad4:	a1 f4       	brne	.+40     	; 0x5afe <APP_readSensors+0x2d8>
    5ad6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ad8:	88 23       	and	r24, r24
    5ada:	61 f4       	brne	.+24     	; 0x5af4 <APP_readSensors+0x2ce>
    5adc:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ade:	99 23       	and	r25, r25
    5ae0:	71 f4       	brne	.+28     	; 0x5afe <APP_readSensors+0x2d8>
    5ae2:	2a 85       	ldd	r18, Y+10	; 0x0a
    5ae4:	24 31       	cpi	r18, 0x14	; 20
    5ae6:	30 f4       	brcc	.+12     	; 0x5af4 <APP_readSensors+0x2ce>
    5ae8:	3a 85       	ldd	r19, Y+10	; 0x0a
    5aea:	33 31       	cpi	r19, 0x13	; 19
    5aec:	41 f4       	brne	.+16     	; 0x5afe <APP_readSensors+0x2d8>
    5aee:	89 85       	ldd	r24, Y+9	; 0x09
    5af0:	88 38       	cpi	r24, 0x88	; 136
    5af2:	28 f0       	brcs	.+10     	; 0x5afe <APP_readSensors+0x2d8>
					{
						APP_Mode = APP_ULTRASONIC_MODE;
    5af4:	81 e0       	ldi	r24, 0x01	; 1
    5af6:	80 93 b6 01 	sts	0x01B6, r24
						US_Push_But_Feat_Flag = 0;
    5afa:	10 92 8f 01 	sts	0x018F, r1
					}
				}
			}
			BTN_INC_confg_s.State = 0;
    5afe:	10 92 b9 01 	sts	0x01B9, r1
			BTN_DEC_confg_s.State = 0;
    5b02:	10 92 aa 01 	sts	0x01AA, r1
    5b06:	4e c0       	rjmp	.+156    	; 0x5ba4 <APP_readSensors+0x37e>
			break;
		case APP_ULTRASONIC_MODE:
			if(BTN_INC_confg_s.State == PRESSED)
    5b08:	80 91 b9 01 	lds	r24, 0x01B9
    5b0c:	81 30       	cpi	r24, 0x01	; 1
    5b0e:	61 f4       	brne	.+24     	; 0x5b28 <APP_readSensors+0x302>
			{
				if(BTN_DEC_confg_s.State == NOT_PRESSED)
    5b10:	80 91 aa 01 	lds	r24, 0x01AA
    5b14:	88 23       	and	r24, r24
    5b16:	09 f0       	breq	.+2      	; 0x5b1a <APP_readSensors+0x2f4>
    5b18:	45 c0       	rjmp	.+138    	; 0x5ba4 <APP_readSensors+0x37e>
				{
					motor_increase_speed();
    5b1a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <motor_increase_speed>
					US_Push_But_Feat_Flag = 0;
    5b1e:	10 92 8f 01 	sts	0x018F, r1
					APP_Mode = APP_DEFAULT_MODE;
    5b22:	10 92 b6 01 	sts	0x01B6, r1
    5b26:	3a c0       	rjmp	.+116    	; 0x5b9c <APP_readSensors+0x376>
				else
				{
					return;
				}
			}
			else if(BTN_DEC_confg_s.State == PRESSED)
    5b28:	80 91 aa 01 	lds	r24, 0x01AA
    5b2c:	81 30       	cpi	r24, 0x01	; 1
    5b2e:	59 f4       	brne	.+22     	; 0x5b46 <APP_readSensors+0x320>
			{
				if(BTN_INC_confg_s.State == NOT_PRESSED)
    5b30:	80 91 b9 01 	lds	r24, 0x01B9
    5b34:	88 23       	and	r24, r24
    5b36:	b1 f5       	brne	.+108    	; 0x5ba4 <APP_readSensors+0x37e>
				{
					motor_decrease_speed();
    5b38:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <motor_decrease_speed>
					US_Push_But_Feat_Flag = 0;
    5b3c:	10 92 8f 01 	sts	0x018F, r1
					APP_Mode = APP_DEFAULT_MODE;
    5b40:	10 92 b6 01 	sts	0x01B6, r1
    5b44:	2b c0       	rjmp	.+86     	; 0x5b9c <APP_readSensors+0x376>
			}
			// ultrasonic requirements
			else
			{
				// read ultrasonic distance
				ULTRASONIC_readDistance(&US_confg_s);
    5b46:	8f ea       	ldi	r24, 0xAF	; 175
    5b48:	91 e0       	ldi	r25, 0x01	; 1
    5b4a:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <ULTRASONIC_readDistance>
				if(US_confg_s.distance >= 80)
    5b4e:	80 91 b2 01 	lds	r24, 0x01B2
    5b52:	80 35       	cpi	r24, 0x50	; 80
    5b54:	20 f0       	brcs	.+8      	; 0x5b5e <APP_readSensors+0x338>
				{
					motor_set_speed(100);
    5b56:	84 e6       	ldi	r24, 0x64	; 100
    5b58:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <motor_set_speed>
    5b5c:	1f c0       	rjmp	.+62     	; 0x5b9c <APP_readSensors+0x376>
				}
				else if (US_confg_s.distance >= 50 && US_confg_s.distance < 80)
    5b5e:	80 91 b2 01 	lds	r24, 0x01B2
    5b62:	82 33       	cpi	r24, 0x32	; 50
    5b64:	40 f0       	brcs	.+16     	; 0x5b76 <APP_readSensors+0x350>
    5b66:	80 91 b2 01 	lds	r24, 0x01B2
    5b6a:	80 35       	cpi	r24, 0x50	; 80
    5b6c:	20 f4       	brcc	.+8      	; 0x5b76 <APP_readSensors+0x350>
				{
					motor_set_speed(75);
    5b6e:	8b e4       	ldi	r24, 0x4B	; 75
    5b70:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <motor_set_speed>
    5b74:	13 c0       	rjmp	.+38     	; 0x5b9c <APP_readSensors+0x376>
				}
				else if (US_confg_s.distance >= 20 && US_confg_s.distance < 50)
    5b76:	80 91 b2 01 	lds	r24, 0x01B2
    5b7a:	84 31       	cpi	r24, 0x14	; 20
    5b7c:	40 f0       	brcs	.+16     	; 0x5b8e <APP_readSensors+0x368>
    5b7e:	80 91 b2 01 	lds	r24, 0x01B2
    5b82:	82 33       	cpi	r24, 0x32	; 50
    5b84:	20 f4       	brcc	.+8      	; 0x5b8e <APP_readSensors+0x368>
				{
					motor_set_speed(50);
    5b86:	82 e3       	ldi	r24, 0x32	; 50
    5b88:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <motor_set_speed>
    5b8c:	07 c0       	rjmp	.+14     	; 0x5b9c <APP_readSensors+0x376>
				}
				else if (US_confg_s.distance < 20)
    5b8e:	80 91 b2 01 	lds	r24, 0x01B2
    5b92:	84 31       	cpi	r24, 0x14	; 20
    5b94:	18 f4       	brcc	.+6      	; 0x5b9c <APP_readSensors+0x376>
				{
					motor_decrease_speed_by(5);
    5b96:	85 e0       	ldi	r24, 0x05	; 5
    5b98:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <motor_decrease_speed_by>
				}
			}
			BTN_INC_confg_s.State = 0;
    5b9c:	10 92 b9 01 	sts	0x01B9, r1
			BTN_DEC_confg_s.State = 0;
    5ba0:	10 92 aa 01 	sts	0x01AA, r1
			break;
		case APP_OFF_MODE:
			break;
	}
}
    5ba4:	ed 96       	adiw	r28, 0x3d	; 61
    5ba6:	0f b6       	in	r0, 0x3f	; 63
    5ba8:	f8 94       	cli
    5baa:	de bf       	out	0x3e, r29	; 62
    5bac:	0f be       	out	0x3f, r0	; 63
    5bae:	cd bf       	out	0x3d, r28	; 61
    5bb0:	cf 91       	pop	r28
    5bb2:	df 91       	pop	r29
    5bb4:	08 95       	ret

00005bb6 <APP_ticksIncrement>:

void APP_ticksIncrement(void)
{
    5bb6:	df 93       	push	r29
    5bb8:	cf 93       	push	r28
    5bba:	cd b7       	in	r28, 0x3d	; 61
    5bbc:	de b7       	in	r29, 0x3e	; 62
	Timer_Total_Overflows++;
    5bbe:	80 91 85 01 	lds	r24, 0x0185
    5bc2:	90 91 86 01 	lds	r25, 0x0186
    5bc6:	01 96       	adiw	r24, 0x01	; 1
    5bc8:	90 93 86 01 	sts	0x0186, r25
    5bcc:	80 93 85 01 	sts	0x0185, r24
	Timer_Total_Ticks_ms = Timer_Total_Overflows * APP_TIMER_OVF_MS;
    5bd0:	80 91 85 01 	lds	r24, 0x0185
    5bd4:	90 91 86 01 	lds	r25, 0x0186
    5bd8:	82 95       	swap	r24
    5bda:	92 95       	swap	r25
    5bdc:	90 7f       	andi	r25, 0xF0	; 240
    5bde:	98 27       	eor	r25, r24
    5be0:	80 7f       	andi	r24, 0xF0	; 240
    5be2:	98 27       	eor	r25, r24
    5be4:	9c 01       	movw	r18, r24
    5be6:	40 e0       	ldi	r20, 0x00	; 0
    5be8:	50 e0       	ldi	r21, 0x00	; 0
    5bea:	60 e0       	ldi	r22, 0x00	; 0
    5bec:	70 e0       	ldi	r23, 0x00	; 0
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	20 93 87 01 	sts	0x0187, r18
    5bf6:	30 93 88 01 	sts	0x0188, r19
    5bfa:	40 93 89 01 	sts	0x0189, r20
    5bfe:	50 93 8a 01 	sts	0x018A, r21
    5c02:	60 93 8b 01 	sts	0x018B, r22
    5c06:	70 93 8c 01 	sts	0x018C, r23
    5c0a:	80 93 8d 01 	sts	0x018D, r24
    5c0e:	90 93 8e 01 	sts	0x018E, r25
}
    5c12:	cf 91       	pop	r28
    5c14:	df 91       	pop	r29
    5c16:	08 95       	ret

00005c18 <APP_getCurrentTicks_ms>:

void APP_getCurrentTicks_ms(u64_t *timer_ms)
{
    5c18:	df 93       	push	r29
    5c1a:	cf 93       	push	r28
    5c1c:	00 d0       	rcall	.+0      	; 0x5c1e <APP_getCurrentTicks_ms+0x6>
    5c1e:	cd b7       	in	r28, 0x3d	; 61
    5c20:	de b7       	in	r29, 0x3e	; 62
    5c22:	9a 83       	std	Y+2, r25	; 0x02
    5c24:	89 83       	std	Y+1, r24	; 0x01
	*timer_ms =  Timer_Total_Ticks_ms;
    5c26:	20 91 87 01 	lds	r18, 0x0187
    5c2a:	30 91 88 01 	lds	r19, 0x0188
    5c2e:	40 91 89 01 	lds	r20, 0x0189
    5c32:	50 91 8a 01 	lds	r21, 0x018A
    5c36:	60 91 8b 01 	lds	r22, 0x018B
    5c3a:	70 91 8c 01 	lds	r23, 0x018C
    5c3e:	80 91 8d 01 	lds	r24, 0x018D
    5c42:	90 91 8e 01 	lds	r25, 0x018E
    5c46:	e9 81       	ldd	r30, Y+1	; 0x01
    5c48:	fa 81       	ldd	r31, Y+2	; 0x02
    5c4a:	20 83       	st	Z, r18
    5c4c:	31 83       	std	Z+1, r19	; 0x01
    5c4e:	42 83       	std	Z+2, r20	; 0x02
    5c50:	53 83       	std	Z+3, r21	; 0x03
    5c52:	64 83       	std	Z+4, r22	; 0x04
    5c54:	75 83       	std	Z+5, r23	; 0x05
    5c56:	86 83       	std	Z+6, r24	; 0x06
    5c58:	97 83       	std	Z+7, r25	; 0x07
}
    5c5a:	0f 90       	pop	r0
    5c5c:	0f 90       	pop	r0
    5c5e:	cf 91       	pop	r28
    5c60:	df 91       	pop	r29
    5c62:	08 95       	ret

00005c64 <APP_BTN_INC_readState>:

void APP_BTN_INC_readState()
{
    5c64:	df 93       	push	r29
    5c66:	cf 93       	push	r28
    5c68:	cd b7       	in	r28, 0x3d	; 61
    5c6a:	de b7       	in	r29, 0x3e	; 62
	BTN_INC_confg_s.State = 1;
    5c6c:	81 e0       	ldi	r24, 0x01	; 1
    5c6e:	80 93 b9 01 	sts	0x01B9, r24
}
    5c72:	cf 91       	pop	r28
    5c74:	df 91       	pop	r29
    5c76:	08 95       	ret

00005c78 <APP_BTN_DEC_readState>:

void APP_BTN_DEC_readState()
{
    5c78:	df 93       	push	r29
    5c7a:	cf 93       	push	r28
    5c7c:	cd b7       	in	r28, 0x3d	; 61
    5c7e:	de b7       	in	r29, 0x3e	; 62
	BTN_DEC_confg_s.State = 1;
    5c80:	81 e0       	ldi	r24, 0x01	; 1
    5c82:	80 93 aa 01 	sts	0x01AA, r24
}
    5c86:	cf 91       	pop	r28
    5c88:	df 91       	pop	r29
    5c8a:	08 95       	ret

00005c8c <main>:
#include <avr/interrupt.h>

u8_t motor_speed;

int main()
{
    5c8c:	df 93       	push	r29
    5c8e:	cf 93       	push	r28
    5c90:	cd b7       	in	r28, 0x3d	; 61
    5c92:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    5c94:	0e 94 98 2b 	call	0x5730	; 0x5730 <APP_init>
	//GLOBALInt_disbable();
	while(1)
	{
		APP_readSensors();
    5c98:	0e 94 13 2c 	call	0x5826	; 0x5826 <APP_readSensors>
    5c9c:	fd cf       	rjmp	.-6      	; 0x5c98 <main+0xc>

00005c9e <__udivmodsi4>:
    5c9e:	a1 e2       	ldi	r26, 0x21	; 33
    5ca0:	1a 2e       	mov	r1, r26
    5ca2:	aa 1b       	sub	r26, r26
    5ca4:	bb 1b       	sub	r27, r27
    5ca6:	fd 01       	movw	r30, r26
    5ca8:	0d c0       	rjmp	.+26     	; 0x5cc4 <__udivmodsi4_ep>

00005caa <__udivmodsi4_loop>:
    5caa:	aa 1f       	adc	r26, r26
    5cac:	bb 1f       	adc	r27, r27
    5cae:	ee 1f       	adc	r30, r30
    5cb0:	ff 1f       	adc	r31, r31
    5cb2:	a2 17       	cp	r26, r18
    5cb4:	b3 07       	cpc	r27, r19
    5cb6:	e4 07       	cpc	r30, r20
    5cb8:	f5 07       	cpc	r31, r21
    5cba:	20 f0       	brcs	.+8      	; 0x5cc4 <__udivmodsi4_ep>
    5cbc:	a2 1b       	sub	r26, r18
    5cbe:	b3 0b       	sbc	r27, r19
    5cc0:	e4 0b       	sbc	r30, r20
    5cc2:	f5 0b       	sbc	r31, r21

00005cc4 <__udivmodsi4_ep>:
    5cc4:	66 1f       	adc	r22, r22
    5cc6:	77 1f       	adc	r23, r23
    5cc8:	88 1f       	adc	r24, r24
    5cca:	99 1f       	adc	r25, r25
    5ccc:	1a 94       	dec	r1
    5cce:	69 f7       	brne	.-38     	; 0x5caa <__udivmodsi4_loop>
    5cd0:	60 95       	com	r22
    5cd2:	70 95       	com	r23
    5cd4:	80 95       	com	r24
    5cd6:	90 95       	com	r25
    5cd8:	9b 01       	movw	r18, r22
    5cda:	ac 01       	movw	r20, r24
    5cdc:	bd 01       	movw	r22, r26
    5cde:	cf 01       	movw	r24, r30
    5ce0:	08 95       	ret

00005ce2 <__prologue_saves__>:
    5ce2:	2f 92       	push	r2
    5ce4:	3f 92       	push	r3
    5ce6:	4f 92       	push	r4
    5ce8:	5f 92       	push	r5
    5cea:	6f 92       	push	r6
    5cec:	7f 92       	push	r7
    5cee:	8f 92       	push	r8
    5cf0:	9f 92       	push	r9
    5cf2:	af 92       	push	r10
    5cf4:	bf 92       	push	r11
    5cf6:	cf 92       	push	r12
    5cf8:	df 92       	push	r13
    5cfa:	ef 92       	push	r14
    5cfc:	ff 92       	push	r15
    5cfe:	0f 93       	push	r16
    5d00:	1f 93       	push	r17
    5d02:	cf 93       	push	r28
    5d04:	df 93       	push	r29
    5d06:	cd b7       	in	r28, 0x3d	; 61
    5d08:	de b7       	in	r29, 0x3e	; 62
    5d0a:	ca 1b       	sub	r28, r26
    5d0c:	db 0b       	sbc	r29, r27
    5d0e:	0f b6       	in	r0, 0x3f	; 63
    5d10:	f8 94       	cli
    5d12:	de bf       	out	0x3e, r29	; 62
    5d14:	0f be       	out	0x3f, r0	; 63
    5d16:	cd bf       	out	0x3d, r28	; 61
    5d18:	09 94       	ijmp

00005d1a <__epilogue_restores__>:
    5d1a:	2a 88       	ldd	r2, Y+18	; 0x12
    5d1c:	39 88       	ldd	r3, Y+17	; 0x11
    5d1e:	48 88       	ldd	r4, Y+16	; 0x10
    5d20:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d22:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d24:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d26:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d28:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d2c:	b9 84       	ldd	r11, Y+9	; 0x09
    5d2e:	c8 84       	ldd	r12, Y+8	; 0x08
    5d30:	df 80       	ldd	r13, Y+7	; 0x07
    5d32:	ee 80       	ldd	r14, Y+6	; 0x06
    5d34:	fd 80       	ldd	r15, Y+5	; 0x05
    5d36:	0c 81       	ldd	r16, Y+4	; 0x04
    5d38:	1b 81       	ldd	r17, Y+3	; 0x03
    5d3a:	aa 81       	ldd	r26, Y+2	; 0x02
    5d3c:	b9 81       	ldd	r27, Y+1	; 0x01
    5d3e:	ce 0f       	add	r28, r30
    5d40:	d1 1d       	adc	r29, r1
    5d42:	0f b6       	in	r0, 0x3f	; 63
    5d44:	f8 94       	cli
    5d46:	de bf       	out	0x3e, r29	; 62
    5d48:	0f be       	out	0x3f, r0	; 63
    5d4a:	cd bf       	out	0x3d, r28	; 61
    5d4c:	ed 01       	movw	r28, r26
    5d4e:	08 95       	ret

00005d50 <_exit>:
    5d50:	f8 94       	cli

00005d52 <__stop_program>:
    5d52:	ff cf       	rjmp	.-2      	; 0x5d52 <__stop_program>
